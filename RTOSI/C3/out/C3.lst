
_programs/C3/out/C3.elf:     file format elf32-littlearm
_programs/C3/out/C3.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000521

Program Header:
0x70000001 off    0x0001a47c vaddr 0x1a00a47c paddr 0x1a00a47c align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x000033f8 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x0000a484 memsz 0x0000a484 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a00a484 align 2**16
         filesz 0x00000900 memsz 0x00000900 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a478  1a000000  1a000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000900  10000000  1a00a484  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020900  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020900  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020900  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020900  2**2
                  CONTENTS
  6 .bss          00002af8  10000900  10000900  00000900  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020900  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020900  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020900  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020900  2**2
                  CONTENTS
 11 .init_array   00000004  1a00a478  1a00a478  0001a478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a00a47c  1a00a47c  0001a47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020900  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020900  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020900  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020900  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020900  2**2
                  CONTENTS
 18 .noinit       00000000  100033f8  100033f8  00020900  2**2
                  CONTENTS
 19 .debug_info   0003f6e6  00000000  00000000  00020900  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 000095ea  00000000  00000000  0005ffe6  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00018125  00000000  00000000  000695d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00001338  00000000  00000000  000816f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 000017f8  00000000  00000000  00082a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000f476  00000000  00000000  00084228  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   000161bc  00000000  00000000  0009369e  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00032dd9  00000000  00000000  000a985a  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000031  00000000  00000000  000dc633  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  000dc664  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00003394  00000000  00000000  000dc69c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000900 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a00a478 l    d  .init_array	00000000 .init_array
1a00a47c l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100033f8 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 C3.c
00000000 l    df *ABS*	00000000 debounce.c
10000900 l     O .bss	00000001 contFalling.14262
10000901 l     O .bss	00000001 contRising.14263
00000000 l    df *ABS*	00000000 userTasks.c
00000000 l    df *ABS*	00000000 system.c
10000904 l     O .bss	00000004 heap_end.5622
00000000 l    df *ABS*	00000000 heap_4.c
1a000674 l     F .text	00000064 prvHeapInit
1a0006d8 l     F .text	00000058 prvInsertBlockIntoFreeList
10000908 l     O .bss	00000004 pxEnd
1000090c l     O .bss	00002000 ucHeap
1000290c l     O .bss	00000004 xBlockAllocatedBit
10002910 l     O .bss	00000004 xFreeBytesRemaining
10002914 l     O .bss	00000004 xMinimumEverFreeBytesRemaining
10002918 l     O .bss	00000008 xStart
00000000 l    df *ABS*	00000000 queue.c
1a0008b0 l     F .text	00000012 prvGetDisinheritPriorityAfterTimeout
1a0008c2 l     F .text	0000001e prvIsQueueFull
1a0008e0 l     F .text	0000001a prvIsQueueEmpty
1a0008fa l     F .text	00000076 prvCopyDataToQueue
1a000970 l     F .text	00000024 prvCopyDataFromQueue
1a000994 l     F .text	0000006e prvUnlockQueue
1a000a84 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
10002920 l     O .bss	00000168 uxIdleTaskStack.10588
10002a88 l     O .bss	000005a0 uxTimerTaskStack.10595
10003028 l     O .bss	00000060 xIdleTaskTCB.10587
10003088 l     O .bss	00000060 xTimerTaskTCB.10594
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a0012dc l     F .text	00000034 prvResetNextTaskUnblockTime
1a001310 l     F .text	00000092 prvInitialiseNewTask
1a0013a4 l     F .text	00000068 prvInitialiseTaskLists
1a00140c l     F .text	000000ac prvAddNewTaskToReadyList
1a0014b8 l     F .text	0000003a prvDeleteTCB
1a0014f4 l     F .text	0000004c prvCheckTasksWaitingTermination
1a001540 l     F .text	00000028 prvIdleTask
1a001568 l     F .text	00000098 prvAddCurrentTaskToDelayedList
100030ec l     O .bss	00000004 pxDelayedTaskList
100030f0 l     O .bss	00000004 pxOverflowDelayedTaskList
100030f4 l     O .bss	0000008c pxReadyTasksLists
10003180 l     O .bss	00000004 uxCurrentNumberOfTasks
10003184 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10003188 l     O .bss	00000004 uxPendedTicks
1000318c l     O .bss	00000004 uxSchedulerSuspended
10003190 l     O .bss	00000004 uxTaskNumber
10003194 l     O .bss	00000004 uxTopReadyPriority
10003198 l     O .bss	00000014 xDelayedTaskList1
100031ac l     O .bss	00000014 xDelayedTaskList2
100031c0 l     O .bss	00000004 xNextTaskUnblockTime
100031c4 l     O .bss	00000004 xNumOfOverflows
100031c8 l     O .bss	00000014 xPendingReadyList
100031dc l     O .bss	00000004 xSchedulerRunning
100031e0 l     O .bss	00000014 xSuspendedTaskList
100031f4 l     O .bss	00000014 xTasksWaitingTermination
10003208 l     O .bss	00000004 xTickCount
1000320c l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a001edc l     F .text	00000020 prvGetNextExpireTime
1a001efc l     F .text	00000048 prvInsertTimerInActiveList
1a001f44 l     F .text	00000070 prvCheckForValidListAndQueue
1a002304 l     F .text	00000016 prvTimerTask
1a002090 l     F .text	00000078 prvSwitchTimerLists
1a002108 l     F .text	0000002c prvSampleTimeNow
1a002134 l     F .text	00000060 prvProcessExpiredTimer
1a002194 l     F .text	00000074 prvProcessTimerOrBlockTask
1a002208 l     F .text	000000fc prvProcessReceivedCommands
10003210 l     O .bss	00000004 pxCurrentTimerList
10003214 l     O .bss	00000004 pxOverflowTimerList
10003218 l     O .bss	000000a0 ucStaticTimerQueueStorage.11667
100032b8 l     O .bss	00000014 xActiveTimerList1
100032cc l     O .bss	00000014 xActiveTimerList2
100032e0 l     O .bss	00000004 xLastTime.11616
100032e4 l     O .bss	00000050 xStaticTimerQueue.11666
10003334 l     O .bss	00000004 xTimerQueue
10003338 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a00231c l     F .text	00000040 prvTaskExitError
1a00235c l     F .text	00000022 prvPortStartFirstTask
1a002384 l     F .text	0000000e vPortEnableVFP
1a0023f0 l       .text	00000000 pxCurrentTCBConst2
1a0024d0 l       .text	00000000 pxCurrentTCBConst
1000333c l     O .bss	00000001 ucMaxSysCallPriority
10003340 l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 board.c
1a0026a4 l     F .text	00000044 Board_LED_Init
1a0026e8 l     F .text	00000040 Board_TEC_Init
1a002728 l     F .text	00000040 Board_GPIO_Init
1a002768 l     F .text	00000030 Board_ADC_Init
1a002798 l     F .text	00000038 Board_SPI_Init
1a0027d0 l     F .text	00000024 Board_I2C_Init
1a00a04c l     O .text	00000008 GpioButtons
1a00a054 l     O .text	0000000c GpioLeds
1a00a060 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a00a078 l     O .text	00000004 InitClkStates
1a00a07c l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a002944 l     F .text	0000002c Chip_UART_GetIndex
1a00a0f0 l     O .text	00000008 UART_BClock
1a00a0f8 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a002aac l     F .text	00000014 Chip_ADC_GetClockIndex
1a002ac0 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a002b88 l     F .text	000000a0 pll_calc_divs
1a002c28 l     F .text	0000010c pll_get_frac
1a002d34 l     F .text	0000004c Chip_Clock_FindBaseClock
1a002fa8 l     F .text	00000022 Chip_Clock_GetDivRate
10003344 l     O .bss	00000008 audio_usb_pll_freq
1a00a10c l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a00a178 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a00326c l     F .text	00000014 Chip_SSP_GetClockIndex
1a003280 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000004 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000003c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a0033f8 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
1000334c l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a004584 l     F .text	00000004 __fp_unlock
1a004594 l     F .text	000000f0 __sinit.part.1
1a004684 l     F .text	00000004 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 vfprintf.c
1a00695c l     F .text	0000006a __sbprintf
1a00a2b0 l     O .text	00000010 blanks.8142
1a00a2c0 l     O .text	00000010 zeroes.8143
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
1a006a90 l     F .text	00000128 quorem
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 locale.c
10000880 l     O .data	00000020 lc_ctype_charset
100008a4 l     O .data	00000020 lc_message_charset
100008c4 l     O .data	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
1a00a330 l     O .text	0000000c p05.6468
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 vfprintf.c
1a008efc l     F .text	0000007e __sprint_r.part.0
1a009ba8 l     F .text	0000006a __sbprintf
1a00a458 l     O .text	00000010 blanks.8085
1a00a468 l     O .text	00000010 zeroes.8086
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 impure.c
10000048 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
1a00a47c l       .init_array	00000000 __init_array_end
1a00a478 l       .bss_RAM5	00000000 __preinit_array_end
1a00a478 l       .init_array	00000000 __init_array_start
1a00a478 l       .bss_RAM5	00000000 __preinit_array_start
1a0087d4 g     F .text	00000040 _mprec_log10
1a003fd8 g     F .text	0000002c .hidden __aeabi_dcmpun
1a002dcc g     F .text	0000001c Chip_Clock_GetDividerSource
1a00885c g     F .text	0000005e __any_on
1a0005c0 g     F .text	00000012 _isatty_r
1a00a408 g     O .text	00000028 __mprec_tinytens
1a003f9c g     F .text	00000012 .hidden __aeabi_dcmple
1a005268 g     F .text	00000068 _puts_r
1a003ed8 g     F .text	0000007a .hidden __cmpdf2
1a0005d2 g     F .text	0000000a _lseek_r
1a000130  w    F .text	00000002 DebugMon_Handler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a003ed8 g     F .text	0000007a .hidden __eqdf2
1a0000c0 g       .text	00000000 __section_table_start
1a002438 g     F .text	0000002c vPortExitCritical
1a003a48 g     F .text	0000005a .hidden __floatdidf
1a000166  w    F .text	00000002 I2C0_IRQHandler
1a005240 g     F .text	00000028 printf
1a00288a g     F .text	00000008 __stdio_init
1a009e3c g     F .text	00000054 _wcrtomb_r
1a005344 g     F .text	00000020 __sseek
1a004758 g     F .text	00000008 __sinit
1a009d7c g     F .text	000000ae __swbuf_r
1a000126  w    F .text	00000002 HardFault_Handler
1a001164 g     F .text	00000052 vQueueWaitForMessageRestricted
1a007cf4 g     F .text	00000040 _setlocale_r
1a004688 g     F .text	0000002e __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a002b66 g     F .text	0000000c Chip_ADC_SetResolution
1a00521c g     F .text	00000002 __malloc_unlock
1a0024d4 g     F .text	0000002c SysTick_Handler
1a000166  w    F .text	00000002 SPIFI_ADCHS_IRQHandler
1a00051c  w    F .text	00000002 initialise_monitor_handles
1a000166  w    F .text	00000002 SDIO_IRQHandler
1a00282c g     F .text	0000001c Board_UARTGetChar
1a007f00 g     F .text	000000c6 memmove
1a004744 g     F .text	00000014 _cleanup
1a002470 g     F .text	00000064 PendSV_Handler
1a000d5c g     F .text	000000de xQueueGenericSendFromISR
1a000124  w    F .text	00000002 NMI_Handler
1a007fc8 g     F .text	0000004c _Balloc
1a00a484 g       .ARM.exidx	00000000 __exidx_end
1a0000fc g       .text	00000000 __data_section_table_end
1a000166  w    F .text	00000002 UART1_IRQHandler
1a003ec8 g     F .text	0000008a .hidden __gtdf2
100030e8 g     O .bss	00000004 pxCurrentTCB
1a0005b6 g     F .text	0000000a _fstat_r
53ff7512 g       *ABS*	00000000 __valid_user_code_checksum
1a005304 g     F .text	00000004 __seofread
1a00a484 g       .ARM.exidx	00000000 _etext
1a003f64 g     F .text	00000010 .hidden __aeabi_cdcmple
1a000166  w    F .text	00000002 USB1_IRQHandler
1a001bbc g     F .text	00000018 vTaskInternalSetTimeOutState
1a000166  w    F .text	00000002 TIMER3_IRQHandler
1a00304a g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000166  w    F .text	00000002 UART0_IRQHandler
1a000154 g     F .text	00000012 bss_init
1a002538 g     F .text	00000110 xPortStartScheduler
1a005048 g     F .text	00000134 memcpy
1a001ac8 g     F .text	00000030 vTaskPlaceOnEventList
1a003f54 g     F .text	00000020 .hidden __aeabi_cdrcmple
1a000166  w    F .text	00000002 SGPIO_IRQHandler
1a004588 g     F .text	0000000c _cleanup_r
1a0039d8 g     F .text	00000022 .hidden __floatsidf
1a002500  w    F .text	00000038 vPortSetupTimerInterrupt
1a003ed0 g     F .text	00000082 .hidden __ltdf2
1a004054 g     F .text	00000000 .hidden __aeabi_uldivmod
100033f8 g       .noinit	00000000 _noinit
1a0052d0 g     F .text	00000010 puts
1a000840 g     F .text	00000070 vPortFree
100033f0 g     O .bss	00000004 SystemCoreClock
1a008774 g     F .text	00000060 __ratio
1a002970 g     F .text	00000054 Chip_UART_Init
1a000f98 g     F .text	000001a4 xQueueSemaphoreTake
1a000166  w    F .text	00000002 ADC0_IRQHandler
1a002648 g     F .text	0000005c vPortValidateInterruptPriority
1a005220 g     F .text	0000001e _printf_r
1a00a340 g     O .text	000000c8 __mprec_tens
10003384 g     O .bss	00000004 xSemaphore
1a00012c  w    F .text	00000002 UsageFault_Handler
1a007d34 g     F .text	00000008 __locale_charset
1a0030c8 g     F .text	0000004c Chip_Clock_GetRate
1a0011d2 g     F .text	00000018 vListInsertEnd
10003350 g     O .bss	00000004 __malloc_top_pad
1a0028cc g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
100008a0 g     O .data	00000004 __mb_cur_max
1a0039b8 g     F .text	0000001e .hidden __aeabi_ui2d
1a007d54 g     F .text	00000008 _localeconv_r
1a0081e4 g     F .text	00000012 __i2b
1a007a04 g     F .text	000002f0 __sfvwrite_r
1a004084 g     F .text	000002dc .hidden __udivmoddi4
1a003734 g     F .text	00000000 .hidden __aeabi_drsub
1a000654 g     F .text	00000020 _sbrk_r
1a00a048 g     O .text	00000004 ExtRateIn
1a000166  w    F .text	00000002 IntDefaultHandler
1a000166  w    F .text	00000002 SSP0_SSP1_IRQHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a0005dc g     F .text	00000050 _read_r
1a0011cc g     F .text	00000006 vListInitialiseItem
1a003f88 g     F .text	00000012 .hidden __aeabi_dcmplt
1a004364 g     F .text	00000080 _fclose_r
1a000e3c g     F .text	0000015c xQueueReceive
100033b0 g     O .bss	00000040 xQueueRegistry
1a004560 g     F .text	00000024 fflush
1000337c g     O .bss	00000004 __malloc_max_sbrked_mem
1a0039fc g     F .text	0000003a .hidden __extendsfdf2
1a003cf8 g     F .text	000001d0 .hidden __aeabi_ddiv
1a001260 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a003740 g     F .text	00000276 .hidden __adddf3
1a0085f4 g     F .text	000000c4 __b2d
1a00a47c g       .ARM.exidx	00000000 __exidx_start
1a003aa4 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
1a00a2a8 g     O .text	00000004 _global_impure_ptr
1a0088bc g     F .text	0000034c _realloc_r
1a004aa4 g     F .text	00000050 __libc_init_array
1a009d14 g     F .text	00000026 _fputwc_r
1a00a430 g     O .text	00000028 __mprec_bigtens
1a0080a8 g     F .text	0000009c __s2b
1a0039b8 g     F .text	0000001e .hidden __floatunsidf
1a000166  w    F .text	00000002 ADC1_IRQHandler
1a008460 g     F .text	00000036 __mcmp
1a000730 g     F .text	00000110 pvPortMalloc
1a000166  w    F .text	00000002 RIT_WDT_IRQHandler
1a000166  w    F .text	00000002 FLASH_EEPROM_ATIMER_IRQHandler
1a004770 g     F .text	00000014 __fp_lock_all
1a002848 g     F .text	00000030 Board_Init
1a0005aa  w    F .text	00000002 _init
1a0011b6 g     F .text	00000016 vListInitialise
1a0000c0 g       .text	00000000 __data_section_table
1a001784 g     F .text	0000000c xTaskGetTickCount
1a000bd4 g     F .text	00000188 xQueueGenericSend
1a000166  w    F .text	00000002 RTC_IRQHandler
100033f8 g       .bss	00000000 _ebss
1a000166  w    F .text	00000002 TIMER0_IRQHandler
1a000520 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a008144 g     F .text	0000003e __hi0bits
1a003364 g     F .text	00000038 Chip_I2C_SetClockRate
1a004004 g     F .text	0000004e .hidden __fixdfsi
1a001d40 g     F .text	000000b4 xTaskPriorityDisinherit
1a000166  w    F .text	00000002 LCD_IRQHandler
1a002d80 g     F .text	0000004c Chip_Clock_EnableCrystal
1a000166  w    F .text	00000002 M4_IRQHandler
10008000 g       *ABS*	00000000 __top_RamLoc32
1a001b30 g     F .text	0000008c xTaskRemoveFromEventList
1a0012a4  w    F .text	0000001c vApplicationMallocFailedHook
1a003740 g     F .text	00000276 .hidden __aeabi_dadd
1a000136 g     F .text	0000001e data_init
1a0004e0 g     F .text	0000003c led_task
1a003ed0 g     F .text	00000082 .hidden __ledf2
1a00831c g     F .text	000000a0 __pow5mult
1a003a38 g     F .text	0000006a .hidden __aeabi_ul2d
10003388 g     O .bss	00000003 ledStruct
1a003340 g     F .text	00000024 Chip_I2C_Init
100033a4 g     O .bss	00000004 time_down
1a002f3c g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a00a1c0 g     O .text	000000e6 gpioPinsInit
1a001278  w    F .text	0000002c vAssertCalled
1a001ec0 g     F .text	0000001c pvTaskIncrementMutexHeldCount
1a003298 g     F .text	00000012 Chip_SSP_SetClockRate
1a003fc4 g     F .text	00000012 .hidden __aeabi_dcmpgt
1a004760 g     F .text	00000002 __sfp_lock_acquire
1a007e60 g     F .text	00000000 memchr
1a001bd4 g     F .text	00000080 xTaskCheckForTimeOut
1a004838 g     F .text	000001cc _free_r
1a003024 g     F .text	00000026 Chip_Clock_GetBaseClock
1a001c80 g     F .text	000000c0 xTaskPriorityInherit
1a007d3c g     F .text	0000000c __locale_mb_cur_max
1a003fb0 g     F .text	00000012 .hidden __aeabi_dcmpge
10000900 g       .bss	00000000 _bss
1a002b34 g     F .text	00000032 Chip_ADC_SetSampleRate
1a00373c g     F .text	0000027a .hidden __aeabi_dsub
10000878 g     O .data	00000004 __malloc_sbrk_base
1a001774 g     F .text	00000010 vTaskSuspendAll
1a003a38 g     F .text	0000006a .hidden __floatundidf
1a0083bc g     F .text	000000a2 __lshift
1a0032aa g     F .text	0000003e Chip_SSP_SetBitRate
1a00121e g     F .text	00000028 uxListRemove
1a000166  w    F .text	00000002 I2S0_I2S1_QEI_IRQHandler
1a003268 g     F .text	00000002 Chip_GPIO_Init
1a00a074 g     O .text	00000004 OscRateIn
1a0081f8 g     F .text	00000124 __multiply
1a001600 g     F .text	00000072 xTaskCreateStatic
100033f8 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
10003354 g     O .bss	00000028 __malloc_current_mallinfo
1a0086b8 g     F .text	000000ba __d2b
1a0019fc g     F .text	000000cc vTaskSwitchContext
1a000aa6 g     F .text	000000a0 xQueueGenericCreateStatic
1a001af8 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000124 g       .text	00000000 __bss_section_table_end
1000338c g     O .bss	00000010 task_handles
1a0005ac g     F .text	0000000a _close_r
1a0039d8 g     F .text	00000022 .hidden __aeabi_i2d
1a00342c g     F .text	000001ac gpioInit
1a001248 g     F .text	00000018 vApplicationGetIdleTaskMemory
1a002024 g     F .text	0000006c xTimerGenericCommand
1a0069c8 g     F .text	000000c8 __swsetup_r
1a0012c0  w    F .text	0000001c vApplicationStackOverflowHook
1a004360  w    F .text	00000002 .hidden __aeabi_ldiv0
1a003cf8 g     F .text	000001d0 .hidden __divdf3
1a0046b8 g     F .text	0000008c __sfp
1a008814 g     F .text	00000046 __copybits
10000470 g     O .data	00000408 __malloc_av_
1a00476c g     F .text	00000002 __sinit_lock_release
1a003aa4 g     F .text	00000254 .hidden __muldf3
1a0052e0 g     F .text	00000022 __sread
1a0036ac g     F .text	0000001c USB0_IRQHandler
1a005218 g     F .text	00000002 __malloc_lock
1a002818 g     F .text	00000014 Board_UARTPutChar
1a000166  w    F .text	00000002 SCT_IRQHandler
1a004534 g     F .text	0000002c _fflush_r
1a009c14 g     F .text	0000005e _calloc_r
1a002de8 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a00517c g     F .text	0000009a memset
1a000128  w    F .text	00000002 MemManage_Handler
1a000300 g     F .text	000000ac main
1a00040c g     F .text	0000000c get_count
1a0003ac g     F .text	00000010 fsm_buttonPressed
10003380 g     O .bss	00000004 __malloc_max_total_mem
1a009e2c g     F .text	00000010 __swbuf
1a0011ea g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a0023d0 g     F .text	00000024 SVC_Handler
1a005364 g     F .text	00000008 __sclose
1a0043e4 g     F .text	00000010 fclose
1a001fb4 g     F .text	00000070 xTimerCreateTimerTask
1a006bb8 g     F .text	00000e4c _dtoa_r
1a004af4 g     F .text	00000552 _malloc_r
1a009ee8 g     F .text	0000001a __ascii_wctomb
1a003a48 g     F .text	0000005a .hidden __aeabi_l2d
1a003058 g     F .text	0000003c Chip_Clock_EnableOpts
1a002882 g     F .text	00000008 __stdio_getchar
1a004a04 g     F .text	0000004a _fwalk
1a000b46 g     F .text	0000004e xQueueGenericCreate
1a004798 g     F .text	000000a0 _malloc_trim_r
1a002e04 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a008c28 g     F .text	000002dc strcmp
1a000b94 g     F .text	00000040 xQueueCreateCountingSemaphore
1a002ebc g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a009b90 g     F .text	00000018 vfiprintf
1a00339c g     F .text	00000040 SystemInit
1a0000fc g       .text	00000000 __bss_section_table
1a003ed8 g     F .text	0000007a .hidden __nedf2
1a0035d8 g     F .text	0000006a gpioWrite
1a0005a8  w    F .text	00000002 _fini
1a0018b0 g     F .text	000000fc xTaskResumeAll
1a0016d8 g     F .text	0000009c vTaskStartScheduler
1a002af4 g     F .text	00000040 Chip_ADC_Init
100033f4 g     O .bss	00000004 g_pUsbApi
1a002894 g     F .text	00000038 Board_SetupMuxing
1a0029c4 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a00062c g     F .text	00000028 _write_r
1a000166  w    F .text	00000002 SPI_DAC_IRQHandler
1a007d5c g     F .text	00000010 setlocale
1a000166  w    F .text	00000002 ETH_IRQHandler
10000040 g     O .data	00000004 _impure_ptr
1a0043f4 g     F .text	00000140 __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a007d50 g     F .text	00000004 __locale_cjk_lang
1b000000 g       .text	00000000 __core_m0app_START__
1a0004cc g     F .text	00000012 button_task
1000339c g     O .bss	00000008 buttonStruct
1a000166  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a0085a0 g     F .text	00000054 __ulp
1a004784 g     F .text	00000014 __fp_unlock_all
1a001c54 g     F .text	0000000c vTaskMissedYield
100033f8 g       .bss	00000000 _pvHeapStart
1a000166  w    F .text	00000002 UART2_CAN1_IRQHandler
1a000124 g       .text	00000000 __section_table_end
1a0032e8 g     F .text	00000038 Chip_SSP_Init
1a00113c g     F .text	00000028 vQueueAddToRegistry
1a001790 g     F .text	00000120 xTaskIncrementTick
1a007d6c g     F .text	00000008 localeconv
1a007d74 g     F .text	0000005c __swhatbuf_r
1a0027f4 g     F .text	00000024 Board_Debug_Init
1a003f74 g     F .text	00000012 .hidden __aeabi_dcmpeq
1a002878 g     F .text	0000000a __stdio_putchar
1a000a04 g     F .text	00000080 xQueueGenericReset
10000900 g       .data	00000000 _edata
1a003320 g     F .text	00000020 Chip_I2C_EventHandler
1a000166  w    F .text	00000002 M0SUB_IRQHandler
1a009c74 g     F .text	0000009e __fputwc
1a001672 g     F .text	00000066 xTaskCreate
1a003114 g     F .text	00000154 Chip_SetupCoreClock
1a005308 g     F .text	0000003c __swrite
1000087c g     O .data	00000004 __malloc_trim_threshold
1a007d48 g     F .text	00000008 __locale_msgcharset
1a008f90 g     F .text	00000c00 _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a004a50 g     F .text	00000052 _fwalk_reent
1a002b74 g     F .text	00000014 SystemCoreClockUpdate
1a008498 g     F .text	00000108 __mdiff
1a004004 g     F .text	0000004e .hidden __aeabi_d2iz
1a000166  w    F .text	00000002 DMA_IRQHandler
1a0019ac g     F .text	00000050 vTaskDelay
1a000166  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a004764 g     F .text	00000002 __sfp_lock_release
1a001c60 g     F .text	00000020 xTaskGetSchedulerState
1a001df4 g     F .text	000000cc vTaskPriorityDisinheritAfterTimeout
1a004360  w    F .text	00000002 .hidden __aeabi_idiv0
1a003fd8 g     F .text	0000002c .hidden __unorddf2
100033a8 g     O .bss	00000004 time_up
1a00012a  w    F .text	00000002 BusFault_Handler
100033ac g     O .bss	00000004 time_cycle
1a007dd0 g     F .text	00000088 __smakebuf_r
1a005380 g     F .text	000000dc strlen
1a002398 g     F .text	0000002c pxPortInitialiseStack
1a003094 g     F .text	00000034 Chip_Clock_Enable
1a003f64 g     F .text	00000010 .hidden __aeabi_cdcmpeq
1a003ec8 g     F .text	0000008a .hidden __gedf2
1a000166  w    F .text	00000002 UART3_IRQHandler
1a000166  w    F .text	00000002 MCPWM_IRQHandler
100008fc g     O .data	00000004 __wctomb
1a008f7c g     F .text	00000012 __sprint_r
1a003642 g     F .text	00000068 gpioRead
1a0039fc g     F .text	0000003a .hidden __aeabi_f2d
1a0036c8 g     F .text	0000006c boardInit
1a0023f4 g     F .text	00000044 vPortEnterCritical
1a000418 g     F .text	00000006 fsm_buttonError
1a009f04 g     F .text	00000030 _wctomb_r
1a000040 g     O .text	00000080 g_pfnVendorVectors
1a00373c g     F .text	0000027a .hidden __subdf3
1a005460 g     F .text	000014e4 _vfprintf_r
1a000166  w    F .text	00000002 GINT1_IRQHandler
1a0003bc g     F .text	00000050 fsm_buttonReleased
1a008184 g     F .text	0000005e __lo0bits
1a000420 g     F .text	000000ac fsm_buttonUpdate
1a009e90 g     F .text	00000058 wcrtomb
1a002fcc g     F .text	00000058 Chip_Clock_SetBaseClock
1a006944 g     F .text	00000018 vfprintf
1a0033dc g     F .text	0000001c cyclesCounterInit
1a000166  w    F .text	00000002 GPIO4_IRQHandler
1a009d3c g     F .text	00000040 fputwc
1a004768 g     F .text	00000002 __sinit_lock_acquire
1a002938 g     F .text	0000000c Board_SystemInit
1a008028 g     F .text	00000080 __multadd
1a008014 g     F .text	00000012 _Bfree



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 21 05 00 1a 25 01 00 1a 27 01 00 1a     ....!...%...'...
1a000010:	29 01 00 1a 2b 01 00 1a 2d 01 00 1a 12 75 ff 53     )...+...-....u.S
	...
1a00002c:	d1 23 00 1a 31 01 00 1a 00 00 00 00 71 24 00 1a     .#..1.......q$..
1a00003c:	d5 24 00 1a                                         .$..

1a000040 <g_pfnVendorVectors>:
1a000040:	67 01 00 1a 67 01 00 1a 67 01 00 1a 00 00 00 00     g...g...g.......
1a000050:	67 01 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     g...g...g...g...
1a000060:	ad 36 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     .6..g...g...g...
1a000070:	67 01 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     g...g...g...g...
1a000080:	67 01 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     g...g...g...g...
1a000090:	67 01 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     g...g...g...g...
1a0000a0:	67 01 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     g...g...g...g...
1a0000b0:	67 01 00 1a 67 01 00 1a 67 01 00 1a 67 01 00 1a     g...g...g...g...

1a0000c0 <__data_section_table>:
1a0000c0:	1a00a484 	.word	0x1a00a484
1a0000c4:	10000000 	.word	0x10000000
1a0000c8:	00000900 	.word	0x00000900
1a0000cc:	1a00a484 	.word	0x1a00a484
1a0000d0:	10080000 	.word	0x10080000
1a0000d4:	00000000 	.word	0x00000000
1a0000d8:	1a00a484 	.word	0x1a00a484
1a0000dc:	20000000 	.word	0x20000000
1a0000e0:	00000000 	.word	0x00000000
1a0000e4:	1a00a484 	.word	0x1a00a484
1a0000e8:	20008000 	.word	0x20008000
1a0000ec:	00000000 	.word	0x00000000
1a0000f0:	1a00a484 	.word	0x1a00a484
1a0000f4:	2000c000 	.word	0x2000c000
1a0000f8:	00000000 	.word	0x00000000

1a0000fc <__bss_section_table>:
1a0000fc:	10000900 	.word	0x10000900
1a000100:	00002af8 	.word	0x00002af8
1a000104:	10080000 	.word	0x10080000
1a000108:	00000000 	.word	0x00000000
1a00010c:	20000000 	.word	0x20000000
1a000110:	00000000 	.word	0x00000000
1a000114:	20008000 	.word	0x20008000
1a000118:	00000000 	.word	0x00000000
1a00011c:	2000c000 	.word	0x2000c000
1a000120:	00000000 	.word	0x00000000

1a000124 <NMI_Handler>:


}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000124:	e7fe      	b.n	1a000124 <NMI_Handler>

1a000126 <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a000126:	e7fe      	b.n	1a000126 <HardFault_Handler>

1a000128 <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a000128:	e7fe      	b.n	1a000128 <MemManage_Handler>

1a00012a <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00012a:	e7fe      	b.n	1a00012a <BusFault_Handler>

1a00012c <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a00012c:	e7fe      	b.n	1a00012c <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a00012e:	e7fe      	b.n	1a00012e <UsageFault_Handler+0x2>

1a000130 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000130:	e7fe      	b.n	1a000130 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000132:	e7fe      	b.n	1a000132 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000134:	e7fe      	b.n	1a000134 <DebugMon_Handler+0x4>

1a000136 <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a000136:	2300      	movs	r3, #0
1a000138:	4293      	cmp	r3, r2
1a00013a:	d20a      	bcs.n	1a000152 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a00013c:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a00013e:	6804      	ldr	r4, [r0, #0]
1a000140:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000142:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000144:	3004      	adds	r0, #4
1a000146:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a000148:	4293      	cmp	r3, r2
1a00014a:	d3f8      	bcc.n	1a00013e <data_init+0x8>
}
1a00014c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000150:	4770      	bx	lr
1a000152:	4770      	bx	lr

1a000154 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a000154:	2300      	movs	r3, #0
1a000156:	e003      	b.n	1a000160 <bss_init+0xc>
        *pulDest++ = 0;
1a000158:	2200      	movs	r2, #0
1a00015a:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a00015c:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a00015e:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a000160:	428b      	cmp	r3, r1
1a000162:	d3f9      	bcc.n	1a000158 <bss_init+0x4>
}
1a000164:	4770      	bx	lr

1a000166 <ADC0_IRQHandler>:
    QEI_IRQHandler,           // 68
};
#endif

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a000166:	e7fe      	b.n	1a000166 <ADC0_IRQHandler>
1a000168:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00016c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000170:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000174:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000178:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00017c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000180:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000184:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000188:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00018c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000190:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000194:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000198:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00019c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <main>:
debounce_t buttonStruct;
leds_t ledStruct[TOTAL_LEDS];
static BaseType_t xErrorHandler;

int main( void )
{
1a000300:	b510      	push	{r4, lr}
1a000302:	b082      	sub	sp, #8
   boardInit();
1a000304:	f003 f9e0 	bl	1a0036c8 <boardInit>

   xSemaphore = xSemaphoreCreateCounting(MAX_SEM_COUNT, INI_SEM_COUNT);
1a000308:	2100      	movs	r1, #0
1a00030a:	2003      	movs	r0, #3
1a00030c:	f000 fc42 	bl	1a000b94 <xQueueCreateCountingSemaphore>
1a000310:	4b1c      	ldr	r3, [pc, #112]	; (1a000384 <main+0x84>)
1a000312:	6018      	str	r0, [r3, #0]

   buttonStruct.button = TEC2;
1a000314:	4b1c      	ldr	r3, [pc, #112]	; (1a000388 <main+0x88>)
1a000316:	2225      	movs	r2, #37	; 0x25
1a000318:	705a      	strb	r2, [r3, #1]
      button_task,                  // Function that implements the task.
      (const char *)"button_task",  // Text name for the task.
      configMINIMAL_STACK_SIZE*2,   // Stack size in words, not bytes.
      &buttonStruct,             // Parameter passed into the task.
      tskIDLE_PRIORITY+1,           // Priority at which the task is created.
      task_handles[0]               // Pointer to the task created in the system
1a00031a:	4a1c      	ldr	r2, [pc, #112]	; (1a00038c <main+0x8c>)
1a00031c:	6812      	ldr	r2, [r2, #0]
   xErrorHandler = xTaskCreate(
1a00031e:	9201      	str	r2, [sp, #4]
1a000320:	2201      	movs	r2, #1
1a000322:	9200      	str	r2, [sp, #0]
1a000324:	22b4      	movs	r2, #180	; 0xb4
1a000326:	491a      	ldr	r1, [pc, #104]	; (1a000390 <main+0x90>)
1a000328:	481a      	ldr	r0, [pc, #104]	; (1a000394 <main+0x94>)
1a00032a:	f001 f9a2 	bl	1a001672 <xTaskCreate>
   );

   if(xErrorHandler == pdPASS){
1a00032e:	2801      	cmp	r0, #1
1a000330:	d001      	beq.n	1a000336 <main+0x36>
{
1a000332:	2300      	movs	r3, #0
1a000334:	e008      	b.n	1a000348 <main+0x48>
      printf("Button task created.\r\n");
1a000336:	4818      	ldr	r0, [pc, #96]	; (1a000398 <main+0x98>)
1a000338:	f004 ffca 	bl	1a0052d0 <puts>
1a00033c:	e7f9      	b.n	1a000332 <main+0x32>
   }

   //Bucle para crear leds
   for(int i = 0; i < TOTAL_LEDS; i++){
      ledStruct[i].led = NUM_LED + i;
1a00033e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
1a000342:	4a16      	ldr	r2, [pc, #88]	; (1a00039c <main+0x9c>)
1a000344:	54d1      	strb	r1, [r2, r3]
   for(int i = 0; i < TOTAL_LEDS; i++){
1a000346:	3301      	adds	r3, #1
1a000348:	2b02      	cmp	r3, #2
1a00034a:	ddf8      	ble.n	1a00033e <main+0x3e>
1a00034c:	2400      	movs	r4, #0
1a00034e:	e00f      	b.n	1a000370 <main+0x70>
   for(int i = 0; i < TOTAL_LEDS; i++){
      xErrorHandler = xTaskCreate(
         led_task,                  // Function that implements the task.
         (const char *)"led_task",  // Text name for the task.
         configMINIMAL_STACK_SIZE*2,   // Stack size in words, not bytes.
         &ledStruct[i],             // Parameter passed into the task.
1a000350:	4b12      	ldr	r3, [pc, #72]	; (1a00039c <main+0x9c>)
1a000352:	4423      	add	r3, r4
         tskIDLE_PRIORITY+1,           // Priority at which the task is created.
         task_handles[i+1]               // Pointer to the task created in the system
1a000354:	3401      	adds	r4, #1
1a000356:	4a0d      	ldr	r2, [pc, #52]	; (1a00038c <main+0x8c>)
1a000358:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
      xErrorHandler = xTaskCreate(
1a00035c:	9201      	str	r2, [sp, #4]
1a00035e:	2201      	movs	r2, #1
1a000360:	9200      	str	r2, [sp, #0]
1a000362:	22b4      	movs	r2, #180	; 0xb4
1a000364:	490e      	ldr	r1, [pc, #56]	; (1a0003a0 <main+0xa0>)
1a000366:	480f      	ldr	r0, [pc, #60]	; (1a0003a4 <main+0xa4>)
1a000368:	f001 f983 	bl	1a001672 <xTaskCreate>
      );

      if(xErrorHandler == pdPASS){
1a00036c:	2801      	cmp	r0, #1
1a00036e:	d004      	beq.n	1a00037a <main+0x7a>
   for(int i = 0; i < TOTAL_LEDS; i++){
1a000370:	2c02      	cmp	r4, #2
1a000372:	dded      	ble.n	1a000350 <main+0x50>
         printf("Tarea LED%d  creada\r\n", i+1);
      }
   }
   vTaskStartScheduler(); // Initialize scheduler
1a000374:	f001 f9b0 	bl	1a0016d8 <vTaskStartScheduler>
1a000378:	e7fe      	b.n	1a000378 <main+0x78>
         printf("Tarea LED%d  creada\r\n", i+1);
1a00037a:	4621      	mov	r1, r4
1a00037c:	480a      	ldr	r0, [pc, #40]	; (1a0003a8 <main+0xa8>)
1a00037e:	f004 ff5f 	bl	1a005240 <printf>
1a000382:	e7f5      	b.n	1a000370 <main+0x70>
1a000384:	10003384 	.word	0x10003384
1a000388:	1000339c 	.word	0x1000339c
1a00038c:	1000338c 	.word	0x1000338c
1a000390:	1a009f34 	.word	0x1a009f34
1a000394:	1a0004cd 	.word	0x1a0004cd
1a000398:	1a009f40 	.word	0x1a009f40
1a00039c:	10003388 	.word	0x10003388
1a0003a0:	1a009f58 	.word	0x1a009f58
1a0003a4:	1a0004e1 	.word	0x1a0004e1
1a0003a8:	1a009f64 	.word	0x1a009f64

1a0003ac <fsm_buttonPressed>:
void clear_cycle(debounce_t* buttonStruct){
	buttonStruct->timePressed = 0;
}

//Funcion que lee los ticks al momento de pulsarse la tecla
void fsm_buttonPressed( debounce_t* buttonStruct ){
1a0003ac:	b508      	push	{r3, lr}
	time_down = xTaskGetTickCount();
1a0003ae:	f001 f9e9 	bl	1a001784 <xTaskGetTickCount>
1a0003b2:	4b01      	ldr	r3, [pc, #4]	; (1a0003b8 <fsm_buttonPressed+0xc>)
1a0003b4:	6018      	str	r0, [r3, #0]
1a0003b6:	bd08      	pop	{r3, pc}
1a0003b8:	100033a4 	.word	0x100033a4

1a0003bc <fsm_buttonReleased>:
}

//Funcion que lee los ticks al momento de liberarse la tecla
//Luego mide la diferencia de tiempo
void fsm_buttonReleased( debounce_t* buttonStruct ){
1a0003bc:	b510      	push	{r4, lr}
1a0003be:	4604      	mov	r4, r0
	time_up = xTaskGetTickCount();
1a0003c0:	f001 f9e0 	bl	1a001784 <xTaskGetTickCount>
1a0003c4:	4b0d      	ldr	r3, [pc, #52]	; (1a0003fc <fsm_buttonReleased+0x40>)
1a0003c6:	6018      	str	r0, [r3, #0]
	time_cycle = time_up - time_down;
1a0003c8:	4b0d      	ldr	r3, [pc, #52]	; (1a000400 <fsm_buttonReleased+0x44>)
1a0003ca:	681b      	ldr	r3, [r3, #0]
1a0003cc:	1ac0      	subs	r0, r0, r3
1a0003ce:	4b0d      	ldr	r3, [pc, #52]	; (1a000404 <fsm_buttonReleased+0x48>)
1a0003d0:	6018      	str	r0, [r3, #0]
    buttonStruct->timePressed = time_cycle;
1a0003d2:	6060      	str	r0, [r4, #4]
    xSemaphoreGive(xSemaphore);
1a0003d4:	4c0c      	ldr	r4, [pc, #48]	; (1a000408 <fsm_buttonReleased+0x4c>)
1a0003d6:	2300      	movs	r3, #0
1a0003d8:	461a      	mov	r2, r3
1a0003da:	4619      	mov	r1, r3
1a0003dc:	6820      	ldr	r0, [r4, #0]
1a0003de:	f000 fbf9 	bl	1a000bd4 <xQueueGenericSend>
    xSemaphoreGive(xSemaphore);
1a0003e2:	2300      	movs	r3, #0
1a0003e4:	461a      	mov	r2, r3
1a0003e6:	4619      	mov	r1, r3
1a0003e8:	6820      	ldr	r0, [r4, #0]
1a0003ea:	f000 fbf3 	bl	1a000bd4 <xQueueGenericSend>
    xSemaphoreGive(xSemaphore);
1a0003ee:	2300      	movs	r3, #0
1a0003f0:	461a      	mov	r2, r3
1a0003f2:	4619      	mov	r1, r3
1a0003f4:	6820      	ldr	r0, [r4, #0]
1a0003f6:	f000 fbed 	bl	1a000bd4 <xQueueGenericSend>
1a0003fa:	bd10      	pop	{r4, pc}
1a0003fc:	100033a8 	.word	0x100033a8
1a000400:	100033a4 	.word	0x100033a4
1a000404:	100033ac 	.word	0x100033ac
1a000408:	10003384 	.word	0x10003384

1a00040c <get_count>:
}

TickType_t get_count(){
    return time_cycle;
}
1a00040c:	4b01      	ldr	r3, [pc, #4]	; (1a000414 <get_count+0x8>)
1a00040e:	6818      	ldr	r0, [r3, #0]
1a000410:	4770      	bx	lr
1a000412:	bf00      	nop
1a000414:	100033ac 	.word	0x100033ac

1a000418 <fsm_buttonError>:

void fsm_buttonError( debounce_t* buttonStruct ){
    buttonStruct->buttonState = BUTTON_UP;
1a000418:	2300      	movs	r3, #0
1a00041a:	7003      	strb	r3, [r0, #0]
1a00041c:	4770      	bx	lr
1a00041e:	Address 0x000000001a00041e is out of bounds.


1a000420 <fsm_buttonUpdate>:
    buttonStruct->buttonState = BUTTON_UP;
}

// FSM Update Sate Function
void fsm_buttonUpdate( debounce_t* buttonStruct )
{
1a000420:	b510      	push	{r4, lr}
1a000422:	4604      	mov	r4, r0

    static uint8_t contFalling = 0;
    static uint8_t contRising = 0;

    switch( buttonStruct->buttonState )
1a000424:	7803      	ldrb	r3, [r0, #0]
1a000426:	2b03      	cmp	r3, #3
1a000428:	d848      	bhi.n	1a0004bc <fsm_buttonUpdate+0x9c>
1a00042a:	e8df f003 	tbb	[pc, r3]
1a00042e:	2502      	.short	0x2502
1a000430:	2d0b      	.short	0x2d0b
    {
        case UP:
            /* CHECK TRANSITION CONDITIONS */
            if( !gpioRead( buttonStruct->button ) ){
1a000432:	f990 0001 	ldrsb.w	r0, [r0, #1]
1a000436:	f003 f904 	bl	1a003642 <gpioRead>
1a00043a:	2800      	cmp	r0, #0
1a00043c:	d140      	bne.n	1a0004c0 <fsm_buttonUpdate+0xa0>
                buttonStruct->buttonState = FALLING;
1a00043e:	2302      	movs	r3, #2
1a000440:	7023      	strb	r3, [r4, #0]
1a000442:	bd10      	pop	{r4, pc}

        case FALLING:
            /* ENTRY */

            /* CHECK TRANSITION CONDITIONS */
            if( contFalling >= DEBOUNCE_TIME )
1a000444:	4b1f      	ldr	r3, [pc, #124]	; (1a0004c4 <fsm_buttonUpdate+0xa4>)
1a000446:	781b      	ldrb	r3, [r3, #0]
1a000448:	2b27      	cmp	r3, #39	; 0x27
1a00044a:	d804      	bhi.n	1a000456 <fsm_buttonUpdate+0x36>
                }

                contFalling = 0;
            }

            contFalling++;
1a00044c:	4a1d      	ldr	r2, [pc, #116]	; (1a0004c4 <fsm_buttonUpdate+0xa4>)
1a00044e:	7813      	ldrb	r3, [r2, #0]
1a000450:	3301      	adds	r3, #1
1a000452:	7013      	strb	r3, [r2, #0]

            /* LEAVE */
            break;
1a000454:	bd10      	pop	{r4, pc}
                if( !gpioRead( buttonStruct->button ) )
1a000456:	f990 0001 	ldrsb.w	r0, [r0, #1]
1a00045a:	f003 f8f2 	bl	1a003642 <gpioRead>
1a00045e:	b128      	cbz	r0, 1a00046c <fsm_buttonUpdate+0x4c>
                    buttonStruct->buttonState = UP;
1a000460:	2300      	movs	r3, #0
1a000462:	7023      	strb	r3, [r4, #0]
                contFalling = 0;
1a000464:	2200      	movs	r2, #0
1a000466:	4b17      	ldr	r3, [pc, #92]	; (1a0004c4 <fsm_buttonUpdate+0xa4>)
1a000468:	701a      	strb	r2, [r3, #0]
1a00046a:	e7ef      	b.n	1a00044c <fsm_buttonUpdate+0x2c>
                    buttonStruct->buttonState = DOWN;
1a00046c:	2301      	movs	r3, #1
1a00046e:	7023      	strb	r3, [r4, #0]
                    fsm_buttonPressed(buttonStruct);
1a000470:	4620      	mov	r0, r4
1a000472:	f7ff ff9b 	bl	1a0003ac <fsm_buttonPressed>
1a000476:	e7f5      	b.n	1a000464 <fsm_buttonUpdate+0x44>

        case DOWN:
			/* CHECK TRANSITION CONDITIONS */
			if( gpioRead( buttonStruct->button ) )
1a000478:	f990 0001 	ldrsb.w	r0, [r0, #1]
1a00047c:	f003 f8e1 	bl	1a003642 <gpioRead>
1a000480:	b1f0      	cbz	r0, 1a0004c0 <fsm_buttonUpdate+0xa0>
			{
				buttonStruct->buttonState = RISING;
1a000482:	2303      	movs	r3, #3
1a000484:	7023      	strb	r3, [r4, #0]
1a000486:	bd10      	pop	{r4, pc}
        case RISING:
            /* ENTRY */

            /* CHECK TRANSITION CONDITIONS */

            if( contRising >= DEBOUNCE_TIME )
1a000488:	4b0f      	ldr	r3, [pc, #60]	; (1a0004c8 <fsm_buttonUpdate+0xa8>)
1a00048a:	781b      	ldrb	r3, [r3, #0]
1a00048c:	2b27      	cmp	r3, #39	; 0x27
1a00048e:	d804      	bhi.n	1a00049a <fsm_buttonUpdate+0x7a>
                {
                    buttonStruct->buttonState = DOWN;
                }
                contRising = 0;
            }
            contRising++;
1a000490:	4a0d      	ldr	r2, [pc, #52]	; (1a0004c8 <fsm_buttonUpdate+0xa8>)
1a000492:	7813      	ldrb	r3, [r2, #0]
1a000494:	3301      	adds	r3, #1
1a000496:	7013      	strb	r3, [r2, #0]

            /* LEAVE */
            break;
1a000498:	bd10      	pop	{r4, pc}
                if( gpioRead( buttonStruct->button ) )
1a00049a:	f990 0001 	ldrsb.w	r0, [r0, #1]
1a00049e:	f003 f8d0 	bl	1a003642 <gpioRead>
1a0004a2:	b928      	cbnz	r0, 1a0004b0 <fsm_buttonUpdate+0x90>
                    buttonStruct->buttonState = DOWN;
1a0004a4:	2301      	movs	r3, #1
1a0004a6:	7023      	strb	r3, [r4, #0]
                contRising = 0;
1a0004a8:	2200      	movs	r2, #0
1a0004aa:	4b07      	ldr	r3, [pc, #28]	; (1a0004c8 <fsm_buttonUpdate+0xa8>)
1a0004ac:	701a      	strb	r2, [r3, #0]
1a0004ae:	e7ef      	b.n	1a000490 <fsm_buttonUpdate+0x70>
                    buttonStruct->buttonState = UP;
1a0004b0:	2300      	movs	r3, #0
1a0004b2:	7023      	strb	r3, [r4, #0]
                    fsm_buttonReleased(buttonStruct);
1a0004b4:	4620      	mov	r0, r4
1a0004b6:	f7ff ff81 	bl	1a0003bc <fsm_buttonReleased>
1a0004ba:	e7f5      	b.n	1a0004a8 <fsm_buttonUpdate+0x88>

        default:
            fsm_buttonError(buttonStruct);
1a0004bc:	f7ff ffac 	bl	1a000418 <fsm_buttonError>
1a0004c0:	bd10      	pop	{r4, pc}
1a0004c2:	bf00      	nop
1a0004c4:	10000900 	.word	0x10000900
1a0004c8:	10000901 	.word	0x10000901

1a0004cc <button_task>:

/*=====[Implementations of public functions]=================================*/

// Task implementation
void button_task( void* taskParmPtr )
{
1a0004cc:	b510      	push	{r4, lr}
1a0004ce:	4604      	mov	r4, r0
   debounce_t* buttonStructure = (debounce_t*) taskParmPtr;

   // ----- Task repeat for ever -------------------------
   while(TRUE) {

      fsm_buttonUpdate( buttonStructure );
1a0004d0:	4620      	mov	r0, r4
1a0004d2:	f7ff ffa5 	bl	1a000420 <fsm_buttonUpdate>

      vTaskDelay( BUTTON_RATE / portTICK_RATE_MS);
1a0004d6:	2001      	movs	r0, #1
1a0004d8:	f001 fa68 	bl	1a0019ac <vTaskDelay>
1a0004dc:	e7f8      	b.n	1a0004d0 <button_task+0x4>
1a0004de:	Address 0x000000001a0004de is out of bounds.


1a0004e0 <led_task>:

   }
}

void led_task( void* taskParmPtr )
{
1a0004e0:	b538      	push	{r3, r4, r5, lr}
1a0004e2:	4604      	mov	r4, r0
   leds_t* ledStructure = (leds_t*) taskParmPtr;
   // ----- Task repeat for ever -------------------------
   while(TRUE) {
      
      if(xSemaphoreTake( xSemaphore, portMAX_DELAY ) == pdTRUE){
1a0004e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0004e8:	4b0b      	ldr	r3, [pc, #44]	; (1a000518 <led_task+0x38>)
1a0004ea:	6818      	ldr	r0, [r3, #0]
1a0004ec:	f000 fd54 	bl	1a000f98 <xQueueSemaphoreTake>
1a0004f0:	2801      	cmp	r0, #1
1a0004f2:	d1f7      	bne.n	1a0004e4 <led_task+0x4>

         TickType_t xDifference = get_count();
1a0004f4:	f7ff ff8a 	bl	1a00040c <get_count>
1a0004f8:	4605      	mov	r5, r0

         //clear_cycle(buttonStructure);

         gpioWrite(ledStructure->led, ON);
1a0004fa:	2101      	movs	r1, #1
1a0004fc:	f994 0000 	ldrsb.w	r0, [r4]
1a000500:	f003 f86a 	bl	1a0035d8 <gpioWrite>
         vTaskDelay(xDifference);
1a000504:	4628      	mov	r0, r5
1a000506:	f001 fa51 	bl	1a0019ac <vTaskDelay>
         gpioWrite(ledStructure->led, OFF);
1a00050a:	2100      	movs	r1, #0
1a00050c:	f994 0000 	ldrsb.w	r0, [r4]
1a000510:	f003 f862 	bl	1a0035d8 <gpioWrite>
1a000514:	e7e6      	b.n	1a0004e4 <led_task+0x4>
1a000516:	bf00      	nop
1a000518:	10003384 	.word	0x10003384

1a00051c <initialise_monitor_handles>:
{
1a00051c:	4770      	bx	lr
1a00051e:	Address 0x000000001a00051e is out of bounds.


1a000520 <Reset_Handler>:
void Reset_Handler(void) {
1a000520:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000522:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000524:	4a19      	ldr	r2, [pc, #100]	; (1a00058c <Reset_Handler+0x6c>)
1a000526:	4b1a      	ldr	r3, [pc, #104]	; (1a000590 <Reset_Handler+0x70>)
1a000528:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00052a:	4a1a      	ldr	r2, [pc, #104]	; (1a000594 <Reset_Handler+0x74>)
1a00052c:	3304      	adds	r3, #4
1a00052e:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000530:	2300      	movs	r3, #0
1a000532:	e005      	b.n	1a000540 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000534:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000538:	4a17      	ldr	r2, [pc, #92]	; (1a000598 <Reset_Handler+0x78>)
1a00053a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00053e:	3301      	adds	r3, #1
1a000540:	2b07      	cmp	r3, #7
1a000542:	d9f7      	bls.n	1a000534 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000544:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000546:	4b15      	ldr	r3, [pc, #84]	; (1a00059c <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000548:	e007      	b.n	1a00055a <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a00054a:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00054e:	689a      	ldr	r2, [r3, #8]
1a000550:	6859      	ldr	r1, [r3, #4]
1a000552:	6818      	ldr	r0, [r3, #0]
1a000554:	f7ff fdef 	bl	1a000136 <data_init>
        SectionLen = *SectionTableAddr++;
1a000558:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a00055a:	4a11      	ldr	r2, [pc, #68]	; (1a0005a0 <Reset_Handler+0x80>)
1a00055c:	4293      	cmp	r3, r2
1a00055e:	d3f4      	bcc.n	1a00054a <Reset_Handler+0x2a>
1a000560:	e006      	b.n	1a000570 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000562:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000564:	6859      	ldr	r1, [r3, #4]
1a000566:	f854 0b08 	ldr.w	r0, [r4], #8
1a00056a:	f7ff fdf3 	bl	1a000154 <bss_init>
        SectionLen = *SectionTableAddr++;
1a00056e:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000570:	4a0c      	ldr	r2, [pc, #48]	; (1a0005a4 <Reset_Handler+0x84>)
1a000572:	4293      	cmp	r3, r2
1a000574:	d3f5      	bcc.n	1a000562 <Reset_Handler+0x42>
    SystemInit();
1a000576:	f002 ff11 	bl	1a00339c <SystemInit>
    __libc_init_array();
1a00057a:	f004 fa93 	bl	1a004aa4 <__libc_init_array>
    initialise_monitor_handles();
1a00057e:	f7ff ffcd 	bl	1a00051c <initialise_monitor_handles>
    main();
1a000582:	f7ff febd 	bl	1a000300 <main>
        __asm__ volatile("wfi");
1a000586:	bf30      	wfi
1a000588:	e7fd      	b.n	1a000586 <Reset_Handler+0x66>
1a00058a:	bf00      	nop
1a00058c:	10df1000 	.word	0x10df1000
1a000590:	40053100 	.word	0x40053100
1a000594:	01dff7ff 	.word	0x01dff7ff
1a000598:	e000e280 	.word	0xe000e280
1a00059c:	1a0000c0 	.word	0x1a0000c0
1a0005a0:	1a0000fc 	.word	0x1a0000fc
1a0005a4:	1a000124 	.word	0x1a000124

1a0005a8 <_fini>:
void _fini(void) {}
1a0005a8:	4770      	bx	lr

1a0005aa <_init>:
void _init(void) {}
1a0005aa:	4770      	bx	lr

1a0005ac <_close_r>:
   (void) __params__;
}

USED int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a0005ac:	2309      	movs	r3, #9
1a0005ae:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0005b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0005b4:	4770      	bx	lr

1a0005b6 <_fstat_r>:
}

USED int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a0005b6:	2358      	movs	r3, #88	; 0x58
1a0005b8:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0005ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0005be:	4770      	bx	lr

1a0005c0 <_isatty_r>:
   UNUSED(r);
   return 1;
}

USED int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a0005c0:	2902      	cmp	r1, #2
1a0005c2:	d801      	bhi.n	1a0005c8 <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a0005c4:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a0005c6:	4770      	bx	lr
       SET_ERR(EBADF);
1a0005c8:	2309      	movs	r3, #9
1a0005ca:	6003      	str	r3, [r0, #0]
       return -1;
1a0005cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0005d0:	4770      	bx	lr

1a0005d2 <_lseek_r>:

USED _off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a0005d2:	2358      	movs	r3, #88	; 0x58
1a0005d4:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0005d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0005da:	4770      	bx	lr

1a0005dc <_read_r>:
   }
}
*/
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a0005dc:	2902      	cmp	r1, #2
1a0005de:	d820      	bhi.n	1a000622 <_read_r+0x46>
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a0005e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0005e4:	461d      	mov	r5, r3
1a0005e6:	4617      	mov	r7, r2
1a0005e8:	4606      	mov	r6, r0
  switch (fd) {
1a0005ea:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a0005ec:	42ac      	cmp	r4, r5
1a0005ee:	d212      	bcs.n	1a000616 <_read_r+0x3a>
         int c = __stdio_getchar();
1a0005f0:	f002 f947 	bl	1a002882 <__stdio_getchar>
         if( c != -1 ){
1a0005f4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0005f8:	d0f8      	beq.n	1a0005ec <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a0005fa:	f104 0801 	add.w	r8, r4, #1
1a0005fe:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000600:	280d      	cmp	r0, #13
1a000602:	d003      	beq.n	1a00060c <_read_r+0x30>
1a000604:	280a      	cmp	r0, #10
1a000606:	d001      	beq.n	1a00060c <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a000608:	4644      	mov	r4, r8
1a00060a:	e7ef      	b.n	1a0005ec <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a00060c:	f002 f939 	bl	1a002882 <__stdio_getchar>
               return i;
1a000610:	4640      	mov	r0, r8
1a000612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            }
         }
      }
      SET_ERR(ENODEV);
1a000616:	2313      	movs	r3, #19
1a000618:	6033      	str	r3, [r6, #0]
      return -1;
1a00061a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00061e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  default:
      SET_ERR(ENODEV);
1a000622:	2313      	movs	r3, #19
1a000624:	6003      	str	r3, [r0, #0]
      return -1;
1a000626:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00062a:	4770      	bx	lr

1a00062c <_write_r>:
   return -1;
}

USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a00062c:	2902      	cmp	r1, #2
1a00062e:	d80c      	bhi.n	1a00064a <_write_r+0x1e>
USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000630:	b570      	push	{r4, r5, r6, lr}
1a000632:	461d      	mov	r5, r3
1a000634:	4616      	mov	r6, r2
   switch (fd) {
1a000636:	2400      	movs	r4, #0
1a000638:	e003      	b.n	1a000642 <_write_r+0x16>
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
           __stdio_putchar(((char*) b)[i]);
1a00063a:	5d30      	ldrb	r0, [r6, r4]
1a00063c:	f002 f91c 	bl	1a002878 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a000640:	3401      	adds	r4, #1
1a000642:	42ac      	cmp	r4, r5
1a000644:	d3f9      	bcc.n	1a00063a <_write_r+0xe>
       return n;
1a000646:	4628      	mov	r0, r5
1a000648:	bd70      	pop	{r4, r5, r6, pc}
   default:
       SET_ERR(ENODEV);
1a00064a:	2313      	movs	r3, #19
1a00064c:	6003      	str	r3, [r0, #0]
       return -1;
1a00064e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000652:	4770      	bx	lr

1a000654 <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000654:	4b05      	ldr	r3, [pc, #20]	; (1a00066c <_sbrk_r+0x18>)
1a000656:	681b      	ldr	r3, [r3, #0]
1a000658:	b123      	cbz	r3, 1a000664 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a00065a:	4b04      	ldr	r3, [pc, #16]	; (1a00066c <_sbrk_r+0x18>)
1a00065c:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a00065e:	4401      	add	r1, r0
1a000660:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a000662:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000664:	4a02      	ldr	r2, [pc, #8]	; (1a000670 <_sbrk_r+0x1c>)
1a000666:	4b01      	ldr	r3, [pc, #4]	; (1a00066c <_sbrk_r+0x18>)
1a000668:	601a      	str	r2, [r3, #0]
1a00066a:	e7f6      	b.n	1a00065a <_sbrk_r+0x6>
1a00066c:	10000904 	.word	0x10000904
1a000670:	100033f8 	.word	0x100033f8

1a000674 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
1a000674:	4a12      	ldr	r2, [pc, #72]	; (1a0006c0 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
1a000676:	f012 0f07 	tst.w	r2, #7
1a00067a:	d01e      	beq.n	1a0006ba <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
1a00067c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a00067e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
1a000682:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
1a000686:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000688:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1a00068a:	480e      	ldr	r0, [pc, #56]	; (1a0006c4 <prvHeapInit+0x50>)
1a00068c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
1a00068e:	2100      	movs	r1, #0
1a000690:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
1a000692:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
1a000694:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000696:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
1a00069a:	480b      	ldr	r0, [pc, #44]	; (1a0006c8 <prvHeapInit+0x54>)
1a00069c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
1a00069e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
1a0006a0:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
1a0006a2:	1a99      	subs	r1, r3, r2
1a0006a4:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
1a0006a6:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a0006a8:	4b08      	ldr	r3, [pc, #32]	; (1a0006cc <prvHeapInit+0x58>)
1a0006aa:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a0006ac:	4b08      	ldr	r3, [pc, #32]	; (1a0006d0 <prvHeapInit+0x5c>)
1a0006ae:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
1a0006b0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
1a0006b4:	4b07      	ldr	r3, [pc, #28]	; (1a0006d4 <prvHeapInit+0x60>)
1a0006b6:	601a      	str	r2, [r3, #0]
1a0006b8:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
1a0006ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
1a0006be:	e7e4      	b.n	1a00068a <prvHeapInit+0x16>
1a0006c0:	1000090c 	.word	0x1000090c
1a0006c4:	10002918 	.word	0x10002918
1a0006c8:	10000908 	.word	0x10000908
1a0006cc:	10002914 	.word	0x10002914
1a0006d0:	10002910 	.word	0x10002910
1a0006d4:	1000290c 	.word	0x1000290c

1a0006d8 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
1a0006d8:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a0006da:	4b13      	ldr	r3, [pc, #76]	; (1a000728 <prvInsertBlockIntoFreeList+0x50>)
1a0006dc:	681a      	ldr	r2, [r3, #0]
1a0006de:	4282      	cmp	r2, r0
1a0006e0:	d31b      	bcc.n	1a00071a <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
1a0006e2:	6859      	ldr	r1, [r3, #4]
1a0006e4:	185c      	adds	r4, r3, r1
1a0006e6:	42a0      	cmp	r0, r4
1a0006e8:	d103      	bne.n	1a0006f2 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
1a0006ea:	6840      	ldr	r0, [r0, #4]
1a0006ec:	4401      	add	r1, r0
1a0006ee:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
1a0006f0:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1a0006f2:	6841      	ldr	r1, [r0, #4]
1a0006f4:	1844      	adds	r4, r0, r1
1a0006f6:	42a2      	cmp	r2, r4
1a0006f8:	d113      	bne.n	1a000722 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
1a0006fa:	4c0c      	ldr	r4, [pc, #48]	; (1a00072c <prvInsertBlockIntoFreeList+0x54>)
1a0006fc:	6824      	ldr	r4, [r4, #0]
1a0006fe:	42a2      	cmp	r2, r4
1a000700:	d00d      	beq.n	1a00071e <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
1a000702:	6852      	ldr	r2, [r2, #4]
1a000704:	4411      	add	r1, r2
1a000706:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
1a000708:	681a      	ldr	r2, [r3, #0]
1a00070a:	6812      	ldr	r2, [r2, #0]
1a00070c:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
1a00070e:	4298      	cmp	r0, r3
1a000710:	d000      	beq.n	1a000714 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
1a000712:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a000714:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000718:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a00071a:	4613      	mov	r3, r2
1a00071c:	e7de      	b.n	1a0006dc <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
1a00071e:	6004      	str	r4, [r0, #0]
1a000720:	e7f5      	b.n	1a00070e <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
1a000722:	6002      	str	r2, [r0, #0]
1a000724:	e7f3      	b.n	1a00070e <prvInsertBlockIntoFreeList+0x36>
1a000726:	bf00      	nop
1a000728:	10002918 	.word	0x10002918
1a00072c:	10000908 	.word	0x10000908

1a000730 <pvPortMalloc>:
{
1a000730:	b570      	push	{r4, r5, r6, lr}
1a000732:	4604      	mov	r4, r0
	vTaskSuspendAll();
1a000734:	f001 f81e 	bl	1a001774 <vTaskSuspendAll>
		if( pxEnd == NULL )
1a000738:	4b3c      	ldr	r3, [pc, #240]	; (1a00082c <pvPortMalloc+0xfc>)
1a00073a:	681b      	ldr	r3, [r3, #0]
1a00073c:	b1bb      	cbz	r3, 1a00076e <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
1a00073e:	4b3c      	ldr	r3, [pc, #240]	; (1a000830 <pvPortMalloc+0x100>)
1a000740:	681b      	ldr	r3, [r3, #0]
1a000742:	421c      	tst	r4, r3
1a000744:	d164      	bne.n	1a000810 <pvPortMalloc+0xe0>
			if( xWantedSize > 0 )
1a000746:	b1ac      	cbz	r4, 1a000774 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
1a000748:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
1a00074a:	f014 0f07 	tst.w	r4, #7
1a00074e:	d011      	beq.n	1a000774 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a000750:	f024 0407 	bic.w	r4, r4, #7
1a000754:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
1a000756:	f004 0307 	and.w	r3, r4, #7
1a00075a:	b15b      	cbz	r3, 1a000774 <pvPortMalloc+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a00075c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000760:	f383 8811 	msr	BASEPRI, r3
1a000764:	f3bf 8f6f 	isb	sy
1a000768:	f3bf 8f4f 	dsb	sy
1a00076c:	e7fe      	b.n	1a00076c <pvPortMalloc+0x3c>
			prvHeapInit();
1a00076e:	f7ff ff81 	bl	1a000674 <prvHeapInit>
1a000772:	e7e4      	b.n	1a00073e <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
1a000774:	2c00      	cmp	r4, #0
1a000776:	d04d      	beq.n	1a000814 <pvPortMalloc+0xe4>
1a000778:	4b2e      	ldr	r3, [pc, #184]	; (1a000834 <pvPortMalloc+0x104>)
1a00077a:	681b      	ldr	r3, [r3, #0]
1a00077c:	429c      	cmp	r4, r3
1a00077e:	d84b      	bhi.n	1a000818 <pvPortMalloc+0xe8>
				pxBlock = xStart.pxNextFreeBlock;
1a000780:	4b2d      	ldr	r3, [pc, #180]	; (1a000838 <pvPortMalloc+0x108>)
1a000782:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a000784:	e001      	b.n	1a00078a <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
1a000786:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
1a000788:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a00078a:	686a      	ldr	r2, [r5, #4]
1a00078c:	4294      	cmp	r4, r2
1a00078e:	d902      	bls.n	1a000796 <pvPortMalloc+0x66>
1a000790:	682a      	ldr	r2, [r5, #0]
1a000792:	2a00      	cmp	r2, #0
1a000794:	d1f7      	bne.n	1a000786 <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
1a000796:	4a25      	ldr	r2, [pc, #148]	; (1a00082c <pvPortMalloc+0xfc>)
1a000798:	6812      	ldr	r2, [r2, #0]
1a00079a:	4295      	cmp	r5, r2
1a00079c:	d03e      	beq.n	1a00081c <pvPortMalloc+0xec>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
1a00079e:	681e      	ldr	r6, [r3, #0]
1a0007a0:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1a0007a2:	682a      	ldr	r2, [r5, #0]
1a0007a4:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1a0007a6:	686b      	ldr	r3, [r5, #4]
1a0007a8:	1b1b      	subs	r3, r3, r4
1a0007aa:	2b10      	cmp	r3, #16
1a0007ac:	d910      	bls.n	1a0007d0 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1a0007ae:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
1a0007b0:	f010 0f07 	tst.w	r0, #7
1a0007b4:	d008      	beq.n	1a0007c8 <pvPortMalloc+0x98>
1a0007b6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0007ba:	f383 8811 	msr	BASEPRI, r3
1a0007be:	f3bf 8f6f 	isb	sy
1a0007c2:	f3bf 8f4f 	dsb	sy
1a0007c6:	e7fe      	b.n	1a0007c6 <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1a0007c8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
1a0007ca:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
1a0007cc:	f7ff ff84 	bl	1a0006d8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
1a0007d0:	686a      	ldr	r2, [r5, #4]
1a0007d2:	4918      	ldr	r1, [pc, #96]	; (1a000834 <pvPortMalloc+0x104>)
1a0007d4:	680b      	ldr	r3, [r1, #0]
1a0007d6:	1a9b      	subs	r3, r3, r2
1a0007d8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
1a0007da:	4918      	ldr	r1, [pc, #96]	; (1a00083c <pvPortMalloc+0x10c>)
1a0007dc:	6809      	ldr	r1, [r1, #0]
1a0007de:	428b      	cmp	r3, r1
1a0007e0:	d201      	bcs.n	1a0007e6 <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
1a0007e2:	4916      	ldr	r1, [pc, #88]	; (1a00083c <pvPortMalloc+0x10c>)
1a0007e4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
1a0007e6:	4b12      	ldr	r3, [pc, #72]	; (1a000830 <pvPortMalloc+0x100>)
1a0007e8:	681b      	ldr	r3, [r3, #0]
1a0007ea:	4313      	orrs	r3, r2
1a0007ec:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
1a0007ee:	2300      	movs	r3, #0
1a0007f0:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
1a0007f2:	f001 f85d 	bl	1a0018b0 <xTaskResumeAll>
		if( pvReturn == NULL )
1a0007f6:	b19e      	cbz	r6, 1a000820 <pvPortMalloc+0xf0>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
1a0007f8:	f016 0f07 	tst.w	r6, #7
1a0007fc:	d013      	beq.n	1a000826 <pvPortMalloc+0xf6>
1a0007fe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000802:	f383 8811 	msr	BASEPRI, r3
1a000806:	f3bf 8f6f 	isb	sy
1a00080a:	f3bf 8f4f 	dsb	sy
1a00080e:	e7fe      	b.n	1a00080e <pvPortMalloc+0xde>
void *pvReturn = NULL;
1a000810:	2600      	movs	r6, #0
1a000812:	e7ee      	b.n	1a0007f2 <pvPortMalloc+0xc2>
1a000814:	2600      	movs	r6, #0
1a000816:	e7ec      	b.n	1a0007f2 <pvPortMalloc+0xc2>
1a000818:	2600      	movs	r6, #0
1a00081a:	e7ea      	b.n	1a0007f2 <pvPortMalloc+0xc2>
1a00081c:	2600      	movs	r6, #0
1a00081e:	e7e8      	b.n	1a0007f2 <pvPortMalloc+0xc2>
			vApplicationMallocFailedHook();
1a000820:	f000 fd40 	bl	1a0012a4 <vApplicationMallocFailedHook>
1a000824:	e7e8      	b.n	1a0007f8 <pvPortMalloc+0xc8>
}
1a000826:	4630      	mov	r0, r6
1a000828:	bd70      	pop	{r4, r5, r6, pc}
1a00082a:	bf00      	nop
1a00082c:	10000908 	.word	0x10000908
1a000830:	1000290c 	.word	0x1000290c
1a000834:	10002910 	.word	0x10002910
1a000838:	10002918 	.word	0x10002918
1a00083c:	10002914 	.word	0x10002914

1a000840 <vPortFree>:
	if( pv != NULL )
1a000840:	b380      	cbz	r0, 1a0008a4 <vPortFree+0x64>
{
1a000842:	b538      	push	{r3, r4, r5, lr}
1a000844:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
1a000846:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
1a00084a:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a00084e:	4916      	ldr	r1, [pc, #88]	; (1a0008a8 <vPortFree+0x68>)
1a000850:	6809      	ldr	r1, [r1, #0]
1a000852:	420a      	tst	r2, r1
1a000854:	d108      	bne.n	1a000868 <vPortFree+0x28>
1a000856:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00085a:	f383 8811 	msr	BASEPRI, r3
1a00085e:	f3bf 8f6f 	isb	sy
1a000862:	f3bf 8f4f 	dsb	sy
1a000866:	e7fe      	b.n	1a000866 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
1a000868:	f850 0c08 	ldr.w	r0, [r0, #-8]
1a00086c:	b140      	cbz	r0, 1a000880 <vPortFree+0x40>
1a00086e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000872:	f383 8811 	msr	BASEPRI, r3
1a000876:	f3bf 8f6f 	isb	sy
1a00087a:	f3bf 8f4f 	dsb	sy
1a00087e:	e7fe      	b.n	1a00087e <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
1a000880:	ea22 0201 	bic.w	r2, r2, r1
1a000884:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
1a000888:	f000 ff74 	bl	1a001774 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
1a00088c:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a000890:	4a06      	ldr	r2, [pc, #24]	; (1a0008ac <vPortFree+0x6c>)
1a000892:	6813      	ldr	r3, [r2, #0]
1a000894:	440b      	add	r3, r1
1a000896:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a000898:	4628      	mov	r0, r5
1a00089a:	f7ff ff1d 	bl	1a0006d8 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
1a00089e:	f001 f807 	bl	1a0018b0 <xTaskResumeAll>
1a0008a2:	bd38      	pop	{r3, r4, r5, pc}
1a0008a4:	4770      	bx	lr
1a0008a6:	bf00      	nop
1a0008a8:	1000290c 	.word	0x1000290c
1a0008ac:	10002910 	.word	0x10002910

1a0008b0 <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
1a0008b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a0008b2:	b123      	cbz	r3, 1a0008be <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
1a0008b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a0008b6:	6818      	ldr	r0, [r3, #0]
1a0008b8:	f1c0 0007 	rsb	r0, r0, #7
1a0008bc:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
1a0008be:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
1a0008c0:	4770      	bx	lr

1a0008c2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a0008c2:	b510      	push	{r4, lr}
1a0008c4:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a0008c6:	f001 fd95 	bl	1a0023f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a0008ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0008cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0008ce:	429a      	cmp	r2, r3
1a0008d0:	d004      	beq.n	1a0008dc <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a0008d2:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a0008d4:	f001 fdb0 	bl	1a002438 <vPortExitCritical>

	return xReturn;
}
1a0008d8:	4620      	mov	r0, r4
1a0008da:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a0008dc:	2401      	movs	r4, #1
1a0008de:	e7f9      	b.n	1a0008d4 <prvIsQueueFull+0x12>

1a0008e0 <prvIsQueueEmpty>:
{
1a0008e0:	b510      	push	{r4, lr}
1a0008e2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a0008e4:	f001 fd86 	bl	1a0023f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a0008e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a0008ea:	b123      	cbz	r3, 1a0008f6 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a0008ec:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0008ee:	f001 fda3 	bl	1a002438 <vPortExitCritical>
}
1a0008f2:	4620      	mov	r0, r4
1a0008f4:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a0008f6:	2401      	movs	r4, #1
1a0008f8:	e7f9      	b.n	1a0008ee <prvIsQueueEmpty+0xe>

1a0008fa <prvCopyDataToQueue>:
{
1a0008fa:	b570      	push	{r4, r5, r6, lr}
1a0008fc:	4604      	mov	r4, r0
1a0008fe:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000900:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a000902:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000904:	b94a      	cbnz	r2, 1a00091a <prvCopyDataToQueue+0x20>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000906:	6803      	ldr	r3, [r0, #0]
1a000908:	bb53      	cbnz	r3, 1a000960 <prvCopyDataToQueue+0x66>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a00090a:	6840      	ldr	r0, [r0, #4]
1a00090c:	f001 fa18 	bl	1a001d40 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a000910:	2300      	movs	r3, #0
1a000912:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a000914:	3501      	adds	r5, #1
1a000916:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a000918:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
1a00091a:	b96e      	cbnz	r6, 1a000938 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a00091c:	6880      	ldr	r0, [r0, #8]
1a00091e:	f004 fb93 	bl	1a005048 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a000922:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000924:	68a3      	ldr	r3, [r4, #8]
1a000926:	4413      	add	r3, r2
1a000928:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a00092a:	6862      	ldr	r2, [r4, #4]
1a00092c:	4293      	cmp	r3, r2
1a00092e:	d319      	bcc.n	1a000964 <prvCopyDataToQueue+0x6a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a000930:	6823      	ldr	r3, [r4, #0]
1a000932:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a000934:	2000      	movs	r0, #0
1a000936:	e7ed      	b.n	1a000914 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000938:	68c0      	ldr	r0, [r0, #12]
1a00093a:	f004 fb85 	bl	1a005048 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a00093e:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000940:	425b      	negs	r3, r3
1a000942:	68e2      	ldr	r2, [r4, #12]
1a000944:	441a      	add	r2, r3
1a000946:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000948:	6821      	ldr	r1, [r4, #0]
1a00094a:	428a      	cmp	r2, r1
1a00094c:	d202      	bcs.n	1a000954 <prvCopyDataToQueue+0x5a>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a00094e:	6862      	ldr	r2, [r4, #4]
1a000950:	4413      	add	r3, r2
1a000952:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a000954:	2e02      	cmp	r6, #2
1a000956:	d107      	bne.n	1a000968 <prvCopyDataToQueue+0x6e>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000958:	b145      	cbz	r5, 1a00096c <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a00095a:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a00095c:	2000      	movs	r0, #0
1a00095e:	e7d9      	b.n	1a000914 <prvCopyDataToQueue+0x1a>
1a000960:	2000      	movs	r0, #0
1a000962:	e7d7      	b.n	1a000914 <prvCopyDataToQueue+0x1a>
1a000964:	2000      	movs	r0, #0
1a000966:	e7d5      	b.n	1a000914 <prvCopyDataToQueue+0x1a>
1a000968:	2000      	movs	r0, #0
1a00096a:	e7d3      	b.n	1a000914 <prvCopyDataToQueue+0x1a>
1a00096c:	2000      	movs	r0, #0
1a00096e:	e7d1      	b.n	1a000914 <prvCopyDataToQueue+0x1a>

1a000970 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a000970:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000972:	b172      	cbz	r2, 1a000992 <prvCopyDataFromQueue+0x22>
{
1a000974:	b510      	push	{r4, lr}
1a000976:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a000978:	68c4      	ldr	r4, [r0, #12]
1a00097a:	4414      	add	r4, r2
1a00097c:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a00097e:	6840      	ldr	r0, [r0, #4]
1a000980:	4284      	cmp	r4, r0
1a000982:	d301      	bcc.n	1a000988 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a000984:	6818      	ldr	r0, [r3, #0]
1a000986:	60d8      	str	r0, [r3, #12]
1a000988:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a00098a:	68d9      	ldr	r1, [r3, #12]
1a00098c:	f004 fb5c 	bl	1a005048 <memcpy>
1a000990:	bd10      	pop	{r4, pc}
1a000992:	4770      	bx	lr

1a000994 <prvUnlockQueue>:
{
1a000994:	b538      	push	{r3, r4, r5, lr}
1a000996:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a000998:	f001 fd2c 	bl	1a0023f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a00099c:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a0009a0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a0009a2:	e001      	b.n	1a0009a8 <prvUnlockQueue+0x14>
			--cTxLock;
1a0009a4:	3c01      	subs	r4, #1
1a0009a6:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a0009a8:	2c00      	cmp	r4, #0
1a0009aa:	dd0a      	ble.n	1a0009c2 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0009ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a0009ae:	b143      	cbz	r3, 1a0009c2 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0009b0:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a0009b4:	f001 f8bc 	bl	1a001b30 <xTaskRemoveFromEventList>
1a0009b8:	2800      	cmp	r0, #0
1a0009ba:	d0f3      	beq.n	1a0009a4 <prvUnlockQueue+0x10>
						vTaskMissedYield();
1a0009bc:	f001 f94a 	bl	1a001c54 <vTaskMissedYield>
1a0009c0:	e7f0      	b.n	1a0009a4 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a0009c2:	23ff      	movs	r3, #255	; 0xff
1a0009c4:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a0009c8:	f001 fd36 	bl	1a002438 <vPortExitCritical>
	taskENTER_CRITICAL();
1a0009cc:	f001 fd12 	bl	1a0023f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a0009d0:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a0009d4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a0009d6:	e001      	b.n	1a0009dc <prvUnlockQueue+0x48>
				--cRxLock;
1a0009d8:	3c01      	subs	r4, #1
1a0009da:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a0009dc:	2c00      	cmp	r4, #0
1a0009de:	dd0a      	ble.n	1a0009f6 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0009e0:	692b      	ldr	r3, [r5, #16]
1a0009e2:	b143      	cbz	r3, 1a0009f6 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0009e4:	f105 0010 	add.w	r0, r5, #16
1a0009e8:	f001 f8a2 	bl	1a001b30 <xTaskRemoveFromEventList>
1a0009ec:	2800      	cmp	r0, #0
1a0009ee:	d0f3      	beq.n	1a0009d8 <prvUnlockQueue+0x44>
					vTaskMissedYield();
1a0009f0:	f001 f930 	bl	1a001c54 <vTaskMissedYield>
1a0009f4:	e7f0      	b.n	1a0009d8 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a0009f6:	23ff      	movs	r3, #255	; 0xff
1a0009f8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a0009fc:	f001 fd1c 	bl	1a002438 <vPortExitCritical>
1a000a00:	bd38      	pop	{r3, r4, r5, pc}
1a000a02:	Address 0x000000001a000a02 is out of bounds.


1a000a04 <xQueueGenericReset>:
{
1a000a04:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a000a06:	b330      	cbz	r0, 1a000a56 <xQueueGenericReset+0x52>
1a000a08:	4604      	mov	r4, r0
1a000a0a:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a000a0c:	f001 fcf2 	bl	1a0023f4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a000a10:	6821      	ldr	r1, [r4, #0]
1a000a12:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000a14:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000a16:	fb03 1002 	mla	r0, r3, r2, r1
1a000a1a:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a000a1c:	2000      	movs	r0, #0
1a000a1e:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a000a20:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a000a22:	3a01      	subs	r2, #1
1a000a24:	fb02 1303 	mla	r3, r2, r3, r1
1a000a28:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a000a2a:	23ff      	movs	r3, #255	; 0xff
1a000a2c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a000a30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a000a34:	b9c5      	cbnz	r5, 1a000a68 <xQueueGenericReset+0x64>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000a36:	6923      	ldr	r3, [r4, #16]
1a000a38:	b1f3      	cbz	r3, 1a000a78 <xQueueGenericReset+0x74>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000a3a:	f104 0010 	add.w	r0, r4, #16
1a000a3e:	f001 f877 	bl	1a001b30 <xTaskRemoveFromEventList>
1a000a42:	b1c8      	cbz	r0, 1a000a78 <xQueueGenericReset+0x74>
					queueYIELD_IF_USING_PREEMPTION();
1a000a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000a48:	4b0d      	ldr	r3, [pc, #52]	; (1a000a80 <xQueueGenericReset+0x7c>)
1a000a4a:	601a      	str	r2, [r3, #0]
1a000a4c:	f3bf 8f4f 	dsb	sy
1a000a50:	f3bf 8f6f 	isb	sy
1a000a54:	e010      	b.n	1a000a78 <xQueueGenericReset+0x74>
1a000a56:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a5a:	f383 8811 	msr	BASEPRI, r3
1a000a5e:	f3bf 8f6f 	isb	sy
1a000a62:	f3bf 8f4f 	dsb	sy
1a000a66:	e7fe      	b.n	1a000a66 <xQueueGenericReset+0x62>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a000a68:	f104 0010 	add.w	r0, r4, #16
1a000a6c:	f000 fba3 	bl	1a0011b6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a000a70:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000a74:	f000 fb9f 	bl	1a0011b6 <vListInitialise>
	taskEXIT_CRITICAL();
1a000a78:	f001 fcde 	bl	1a002438 <vPortExitCritical>
}
1a000a7c:	2001      	movs	r0, #1
1a000a7e:	bd38      	pop	{r3, r4, r5, pc}
1a000a80:	e000ed04 	.word	0xe000ed04

1a000a84 <prvInitialiseNewQueue>:
{
1a000a84:	b538      	push	{r3, r4, r5, lr}
1a000a86:	461d      	mov	r5, r3
1a000a88:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a000a8a:	460b      	mov	r3, r1
1a000a8c:	b149      	cbz	r1, 1a000aa2 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a000a8e:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a000a90:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a000a92:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a000a94:	2101      	movs	r1, #1
1a000a96:	4620      	mov	r0, r4
1a000a98:	f7ff ffb4 	bl	1a000a04 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a000a9c:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
1a000aa0:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a000aa2:	6024      	str	r4, [r4, #0]
1a000aa4:	e7f4      	b.n	1a000a90 <prvInitialiseNewQueue+0xc>

1a000aa6 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000aa6:	b940      	cbnz	r0, 1a000aba <xQueueGenericCreateStatic+0x14>
1a000aa8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000aac:	f383 8811 	msr	BASEPRI, r3
1a000ab0:	f3bf 8f6f 	isb	sy
1a000ab4:	f3bf 8f4f 	dsb	sy
1a000ab8:	e7fe      	b.n	1a000ab8 <xQueueGenericCreateStatic+0x12>
	{
1a000aba:	b510      	push	{r4, lr}
1a000abc:	b084      	sub	sp, #16
1a000abe:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a000ac0:	b163      	cbz	r3, 1a000adc <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a000ac2:	b1a2      	cbz	r2, 1a000aee <xQueueGenericCreateStatic+0x48>
1a000ac4:	b1a9      	cbz	r1, 1a000af2 <xQueueGenericCreateStatic+0x4c>
1a000ac6:	2001      	movs	r0, #1
1a000ac8:	b9a8      	cbnz	r0, 1a000af6 <xQueueGenericCreateStatic+0x50>
1a000aca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ace:	f383 8811 	msr	BASEPRI, r3
1a000ad2:	f3bf 8f6f 	isb	sy
1a000ad6:	f3bf 8f4f 	dsb	sy
1a000ada:	e7fe      	b.n	1a000ada <xQueueGenericCreateStatic+0x34>
1a000adc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ae0:	f383 8811 	msr	BASEPRI, r3
1a000ae4:	f3bf 8f6f 	isb	sy
1a000ae8:	f3bf 8f4f 	dsb	sy
1a000aec:	e7fe      	b.n	1a000aec <xQueueGenericCreateStatic+0x46>
1a000aee:	2001      	movs	r0, #1
1a000af0:	e7ea      	b.n	1a000ac8 <xQueueGenericCreateStatic+0x22>
1a000af2:	2000      	movs	r0, #0
1a000af4:	e7e8      	b.n	1a000ac8 <xQueueGenericCreateStatic+0x22>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a000af6:	b90a      	cbnz	r2, 1a000afc <xQueueGenericCreateStatic+0x56>
1a000af8:	b101      	cbz	r1, 1a000afc <xQueueGenericCreateStatic+0x56>
1a000afa:	2000      	movs	r0, #0
1a000afc:	b940      	cbnz	r0, 1a000b10 <xQueueGenericCreateStatic+0x6a>
1a000afe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b02:	f383 8811 	msr	BASEPRI, r3
1a000b06:	f3bf 8f6f 	isb	sy
1a000b0a:	f3bf 8f4f 	dsb	sy
1a000b0e:	e7fe      	b.n	1a000b0e <xQueueGenericCreateStatic+0x68>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a000b10:	2050      	movs	r0, #80	; 0x50
1a000b12:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a000b14:	9803      	ldr	r0, [sp, #12]
1a000b16:	2850      	cmp	r0, #80	; 0x50
1a000b18:	d008      	beq.n	1a000b2c <xQueueGenericCreateStatic+0x86>
1a000b1a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b1e:	f383 8811 	msr	BASEPRI, r3
1a000b22:	f3bf 8f6f 	isb	sy
1a000b26:	f3bf 8f4f 	dsb	sy
1a000b2a:	e7fe      	b.n	1a000b2a <xQueueGenericCreateStatic+0x84>
1a000b2c:	4620      	mov	r0, r4
1a000b2e:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a000b30:	2301      	movs	r3, #1
1a000b32:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000b36:	9400      	str	r4, [sp, #0]
1a000b38:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000b3c:	f7ff ffa2 	bl	1a000a84 <prvInitialiseNewQueue>
	}
1a000b40:	4620      	mov	r0, r4
1a000b42:	b004      	add	sp, #16
1a000b44:	bd10      	pop	{r4, pc}

1a000b46 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000b46:	b940      	cbnz	r0, 1a000b5a <xQueueGenericCreate+0x14>
1a000b48:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b4c:	f383 8811 	msr	BASEPRI, r3
1a000b50:	f3bf 8f6f 	isb	sy
1a000b54:	f3bf 8f4f 	dsb	sy
1a000b58:	e7fe      	b.n	1a000b58 <xQueueGenericCreate+0x12>
	{
1a000b5a:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000b5c:	b083      	sub	sp, #12
1a000b5e:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a000b60:	b111      	cbz	r1, 1a000b68 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000b62:	fb01 f000 	mul.w	r0, r1, r0
1a000b66:	e000      	b.n	1a000b6a <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
1a000b68:	2000      	movs	r0, #0
1a000b6a:	4617      	mov	r7, r2
1a000b6c:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a000b6e:	3050      	adds	r0, #80	; 0x50
1a000b70:	f7ff fdde 	bl	1a000730 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a000b74:	4605      	mov	r5, r0
1a000b76:	b150      	cbz	r0, 1a000b8e <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a000b78:	2300      	movs	r3, #0
1a000b7a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000b7e:	9000      	str	r0, [sp, #0]
1a000b80:	463b      	mov	r3, r7
1a000b82:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a000b86:	4621      	mov	r1, r4
1a000b88:	4630      	mov	r0, r6
1a000b8a:	f7ff ff7b 	bl	1a000a84 <prvInitialiseNewQueue>
	}
1a000b8e:	4628      	mov	r0, r5
1a000b90:	b003      	add	sp, #12
1a000b92:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a000b94 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
1a000b94:	b940      	cbnz	r0, 1a000ba8 <xQueueCreateCountingSemaphore+0x14>
1a000b96:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b9a:	f383 8811 	msr	BASEPRI, r3
1a000b9e:	f3bf 8f6f 	isb	sy
1a000ba2:	f3bf 8f4f 	dsb	sy
1a000ba6:	e7fe      	b.n	1a000ba6 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
1a000ba8:	4288      	cmp	r0, r1
1a000baa:	d208      	bcs.n	1a000bbe <xQueueCreateCountingSemaphore+0x2a>
1a000bac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000bb0:	f383 8811 	msr	BASEPRI, r3
1a000bb4:	f3bf 8f6f 	isb	sy
1a000bb8:	f3bf 8f4f 	dsb	sy
1a000bbc:	e7fe      	b.n	1a000bbc <xQueueCreateCountingSemaphore+0x28>
	{
1a000bbe:	b510      	push	{r4, lr}
1a000bc0:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
1a000bc2:	2202      	movs	r2, #2
1a000bc4:	2100      	movs	r1, #0
1a000bc6:	f7ff ffbe 	bl	1a000b46 <xQueueGenericCreate>
		if( xHandle != NULL )
1a000bca:	4603      	mov	r3, r0
1a000bcc:	b100      	cbz	r0, 1a000bd0 <xQueueCreateCountingSemaphore+0x3c>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
1a000bce:	6384      	str	r4, [r0, #56]	; 0x38
	}
1a000bd0:	4618      	mov	r0, r3
1a000bd2:	bd10      	pop	{r4, pc}

1a000bd4 <xQueueGenericSend>:
{
1a000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000bd6:	b085      	sub	sp, #20
1a000bd8:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a000bda:	b160      	cbz	r0, 1a000bf6 <xQueueGenericSend+0x22>
1a000bdc:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000bde:	b199      	cbz	r1, 1a000c08 <xQueueGenericSend+0x34>
1a000be0:	2501      	movs	r5, #1
1a000be2:	b9bd      	cbnz	r5, 1a000c14 <xQueueGenericSend+0x40>
1a000be4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000be8:	f383 8811 	msr	BASEPRI, r3
1a000bec:	f3bf 8f6f 	isb	sy
1a000bf0:	f3bf 8f4f 	dsb	sy
1a000bf4:	e7fe      	b.n	1a000bf4 <xQueueGenericSend+0x20>
1a000bf6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000bfa:	f383 8811 	msr	BASEPRI, r3
1a000bfe:	f3bf 8f6f 	isb	sy
1a000c02:	f3bf 8f4f 	dsb	sy
1a000c06:	e7fe      	b.n	1a000c06 <xQueueGenericSend+0x32>
1a000c08:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000c0a:	b90a      	cbnz	r2, 1a000c10 <xQueueGenericSend+0x3c>
1a000c0c:	2501      	movs	r5, #1
1a000c0e:	e7e8      	b.n	1a000be2 <xQueueGenericSend+0xe>
1a000c10:	2500      	movs	r5, #0
1a000c12:	e7e6      	b.n	1a000be2 <xQueueGenericSend+0xe>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000c14:	2b02      	cmp	r3, #2
1a000c16:	d009      	beq.n	1a000c2c <xQueueGenericSend+0x58>
1a000c18:	b96d      	cbnz	r5, 1a000c36 <xQueueGenericSend+0x62>
1a000c1a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c1e:	f383 8811 	msr	BASEPRI, r3
1a000c22:	f3bf 8f6f 	isb	sy
1a000c26:	f3bf 8f4f 	dsb	sy
1a000c2a:	e7fe      	b.n	1a000c2a <xQueueGenericSend+0x56>
1a000c2c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000c2e:	2a01      	cmp	r2, #1
1a000c30:	d0f2      	beq.n	1a000c18 <xQueueGenericSend+0x44>
1a000c32:	2500      	movs	r5, #0
1a000c34:	e7f0      	b.n	1a000c18 <xQueueGenericSend+0x44>
1a000c36:	461e      	mov	r6, r3
1a000c38:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000c3a:	f001 f811 	bl	1a001c60 <xTaskGetSchedulerState>
1a000c3e:	b910      	cbnz	r0, 1a000c46 <xQueueGenericSend+0x72>
1a000c40:	9b01      	ldr	r3, [sp, #4]
1a000c42:	b103      	cbz	r3, 1a000c46 <xQueueGenericSend+0x72>
1a000c44:	2500      	movs	r5, #0
1a000c46:	b945      	cbnz	r5, 1a000c5a <xQueueGenericSend+0x86>
1a000c48:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c4c:	f383 8811 	msr	BASEPRI, r3
1a000c50:	f3bf 8f6f 	isb	sy
1a000c54:	f3bf 8f4f 	dsb	sy
1a000c58:	e7fe      	b.n	1a000c58 <xQueueGenericSend+0x84>
1a000c5a:	2500      	movs	r5, #0
1a000c5c:	e02c      	b.n	1a000cb8 <xQueueGenericSend+0xe4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000c5e:	4632      	mov	r2, r6
1a000c60:	4639      	mov	r1, r7
1a000c62:	4620      	mov	r0, r4
1a000c64:	f7ff fe49 	bl	1a0008fa <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000c68:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000c6a:	b18b      	cbz	r3, 1a000c90 <xQueueGenericSend+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000c6c:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000c70:	f000 ff5e 	bl	1a001b30 <xTaskRemoveFromEventList>
1a000c74:	b138      	cbz	r0, 1a000c86 <xQueueGenericSend+0xb2>
							queueYIELD_IF_USING_PREEMPTION();
1a000c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000c7a:	4b37      	ldr	r3, [pc, #220]	; (1a000d58 <xQueueGenericSend+0x184>)
1a000c7c:	601a      	str	r2, [r3, #0]
1a000c7e:	f3bf 8f4f 	dsb	sy
1a000c82:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a000c86:	f001 fbd7 	bl	1a002438 <vPortExitCritical>
				return pdPASS;
1a000c8a:	2001      	movs	r0, #1
}
1a000c8c:	b005      	add	sp, #20
1a000c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					else if( xYieldRequired != pdFALSE )
1a000c90:	2800      	cmp	r0, #0
1a000c92:	d0f8      	beq.n	1a000c86 <xQueueGenericSend+0xb2>
						queueYIELD_IF_USING_PREEMPTION();
1a000c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000c98:	4b2f      	ldr	r3, [pc, #188]	; (1a000d58 <xQueueGenericSend+0x184>)
1a000c9a:	601a      	str	r2, [r3, #0]
1a000c9c:	f3bf 8f4f 	dsb	sy
1a000ca0:	f3bf 8f6f 	isb	sy
1a000ca4:	e7ef      	b.n	1a000c86 <xQueueGenericSend+0xb2>
					taskEXIT_CRITICAL();
1a000ca6:	f001 fbc7 	bl	1a002438 <vPortExitCritical>
					return errQUEUE_FULL;
1a000caa:	2000      	movs	r0, #0
1a000cac:	e7ee      	b.n	1a000c8c <xQueueGenericSend+0xb8>
				prvUnlockQueue( pxQueue );
1a000cae:	4620      	mov	r0, r4
1a000cb0:	f7ff fe70 	bl	1a000994 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000cb4:	f000 fdfc 	bl	1a0018b0 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a000cb8:	f001 fb9c 	bl	1a0023f4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000cbc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000cbe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000cc0:	429a      	cmp	r2, r3
1a000cc2:	d3cc      	bcc.n	1a000c5e <xQueueGenericSend+0x8a>
1a000cc4:	2e02      	cmp	r6, #2
1a000cc6:	d0ca      	beq.n	1a000c5e <xQueueGenericSend+0x8a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000cc8:	9b01      	ldr	r3, [sp, #4]
1a000cca:	2b00      	cmp	r3, #0
1a000ccc:	d0eb      	beq.n	1a000ca6 <xQueueGenericSend+0xd2>
				else if( xEntryTimeSet == pdFALSE )
1a000cce:	b91d      	cbnz	r5, 1a000cd8 <xQueueGenericSend+0x104>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000cd0:	a802      	add	r0, sp, #8
1a000cd2:	f000 ff73 	bl	1a001bbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000cd6:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
1a000cd8:	f001 fbae 	bl	1a002438 <vPortExitCritical>
		vTaskSuspendAll();
1a000cdc:	f000 fd4a 	bl	1a001774 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000ce0:	f001 fb88 	bl	1a0023f4 <vPortEnterCritical>
1a000ce4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000ce8:	b25b      	sxtb	r3, r3
1a000cea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000cee:	d102      	bne.n	1a000cf6 <xQueueGenericSend+0x122>
1a000cf0:	2300      	movs	r3, #0
1a000cf2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000cf6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000cfa:	b25b      	sxtb	r3, r3
1a000cfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000d00:	d102      	bne.n	1a000d08 <xQueueGenericSend+0x134>
1a000d02:	2300      	movs	r3, #0
1a000d04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000d08:	f001 fb96 	bl	1a002438 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000d0c:	a901      	add	r1, sp, #4
1a000d0e:	a802      	add	r0, sp, #8
1a000d10:	f000 ff60 	bl	1a001bd4 <xTaskCheckForTimeOut>
1a000d14:	b9c8      	cbnz	r0, 1a000d4a <xQueueGenericSend+0x176>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a000d16:	4620      	mov	r0, r4
1a000d18:	f7ff fdd3 	bl	1a0008c2 <prvIsQueueFull>
1a000d1c:	2800      	cmp	r0, #0
1a000d1e:	d0c6      	beq.n	1a000cae <xQueueGenericSend+0xda>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a000d20:	9901      	ldr	r1, [sp, #4]
1a000d22:	f104 0010 	add.w	r0, r4, #16
1a000d26:	f000 fecf 	bl	1a001ac8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000d2a:	4620      	mov	r0, r4
1a000d2c:	f7ff fe32 	bl	1a000994 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000d30:	f000 fdbe 	bl	1a0018b0 <xTaskResumeAll>
1a000d34:	2800      	cmp	r0, #0
1a000d36:	d1bf      	bne.n	1a000cb8 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
1a000d38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000d3c:	4b06      	ldr	r3, [pc, #24]	; (1a000d58 <xQueueGenericSend+0x184>)
1a000d3e:	601a      	str	r2, [r3, #0]
1a000d40:	f3bf 8f4f 	dsb	sy
1a000d44:	f3bf 8f6f 	isb	sy
1a000d48:	e7b6      	b.n	1a000cb8 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
1a000d4a:	4620      	mov	r0, r4
1a000d4c:	f7ff fe22 	bl	1a000994 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000d50:	f000 fdae 	bl	1a0018b0 <xTaskResumeAll>
			return errQUEUE_FULL;
1a000d54:	2000      	movs	r0, #0
1a000d56:	e799      	b.n	1a000c8c <xQueueGenericSend+0xb8>
1a000d58:	e000ed04 	.word	0xe000ed04

1a000d5c <xQueueGenericSendFromISR>:
{
1a000d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a000d60:	b160      	cbz	r0, 1a000d7c <xQueueGenericSendFromISR+0x20>
1a000d62:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000d64:	b199      	cbz	r1, 1a000d8e <xQueueGenericSendFromISR+0x32>
1a000d66:	2001      	movs	r0, #1
1a000d68:	b9b8      	cbnz	r0, 1a000d9a <xQueueGenericSendFromISR+0x3e>
1a000d6a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d6e:	f383 8811 	msr	BASEPRI, r3
1a000d72:	f3bf 8f6f 	isb	sy
1a000d76:	f3bf 8f4f 	dsb	sy
1a000d7a:	e7fe      	b.n	1a000d7a <xQueueGenericSendFromISR+0x1e>
1a000d7c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d80:	f383 8811 	msr	BASEPRI, r3
1a000d84:	f3bf 8f6f 	isb	sy
1a000d88:	f3bf 8f4f 	dsb	sy
1a000d8c:	e7fe      	b.n	1a000d8c <xQueueGenericSendFromISR+0x30>
1a000d8e:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a000d90:	b908      	cbnz	r0, 1a000d96 <xQueueGenericSendFromISR+0x3a>
1a000d92:	2001      	movs	r0, #1
1a000d94:	e7e8      	b.n	1a000d68 <xQueueGenericSendFromISR+0xc>
1a000d96:	2000      	movs	r0, #0
1a000d98:	e7e6      	b.n	1a000d68 <xQueueGenericSendFromISR+0xc>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000d9a:	2b02      	cmp	r3, #2
1a000d9c:	d009      	beq.n	1a000db2 <xQueueGenericSendFromISR+0x56>
1a000d9e:	b968      	cbnz	r0, 1a000dbc <xQueueGenericSendFromISR+0x60>
1a000da0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000da4:	f383 8811 	msr	BASEPRI, r3
1a000da8:	f3bf 8f6f 	isb	sy
1a000dac:	f3bf 8f4f 	dsb	sy
1a000db0:	e7fe      	b.n	1a000db0 <xQueueGenericSendFromISR+0x54>
1a000db2:	6be5      	ldr	r5, [r4, #60]	; 0x3c
1a000db4:	2d01      	cmp	r5, #1
1a000db6:	d0f2      	beq.n	1a000d9e <xQueueGenericSendFromISR+0x42>
1a000db8:	2000      	movs	r0, #0
1a000dba:	e7f0      	b.n	1a000d9e <xQueueGenericSendFromISR+0x42>
1a000dbc:	461f      	mov	r7, r3
1a000dbe:	4690      	mov	r8, r2
1a000dc0:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a000dc2:	f001 fc41 	bl	1a002648 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a000dc6:	f3ef 8611 	mrs	r6, BASEPRI
1a000dca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000dce:	f383 8811 	msr	BASEPRI, r3
1a000dd2:	f3bf 8f6f 	isb	sy
1a000dd6:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000dda:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000ddc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000dde:	429a      	cmp	r2, r3
1a000de0:	d301      	bcc.n	1a000de6 <xQueueGenericSendFromISR+0x8a>
1a000de2:	2f02      	cmp	r7, #2
1a000de4:	d121      	bne.n	1a000e2a <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
1a000de6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a000dea:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000dec:	463a      	mov	r2, r7
1a000dee:	4649      	mov	r1, r9
1a000df0:	4620      	mov	r0, r4
1a000df2:	f7ff fd82 	bl	1a0008fa <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a000df6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000dfa:	d110      	bne.n	1a000e1e <xQueueGenericSendFromISR+0xc2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000dfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000dfe:	b1b3      	cbz	r3, 1a000e2e <xQueueGenericSendFromISR+0xd2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000e00:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000e04:	f000 fe94 	bl	1a001b30 <xTaskRemoveFromEventList>
1a000e08:	b198      	cbz	r0, 1a000e32 <xQueueGenericSendFromISR+0xd6>
							if( pxHigherPriorityTaskWoken != NULL )
1a000e0a:	f1b8 0f00 	cmp.w	r8, #0
1a000e0e:	d012      	beq.n	1a000e36 <xQueueGenericSendFromISR+0xda>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a000e10:	2001      	movs	r0, #1
1a000e12:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a000e16:	f386 8811 	msr	BASEPRI, r6
}
1a000e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a000e1e:	1c6b      	adds	r3, r5, #1
1a000e20:	b25b      	sxtb	r3, r3
1a000e22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a000e26:	2001      	movs	r0, #1
1a000e28:	e7f5      	b.n	1a000e16 <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
1a000e2a:	2000      	movs	r0, #0
1a000e2c:	e7f3      	b.n	1a000e16 <xQueueGenericSendFromISR+0xba>
			xReturn = pdPASS;
1a000e2e:	2001      	movs	r0, #1
1a000e30:	e7f1      	b.n	1a000e16 <xQueueGenericSendFromISR+0xba>
1a000e32:	2001      	movs	r0, #1
1a000e34:	e7ef      	b.n	1a000e16 <xQueueGenericSendFromISR+0xba>
1a000e36:	2001      	movs	r0, #1
1a000e38:	e7ed      	b.n	1a000e16 <xQueueGenericSendFromISR+0xba>
1a000e3a:	Address 0x000000001a000e3a is out of bounds.


1a000e3c <xQueueReceive>:
{
1a000e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000e3e:	b085      	sub	sp, #20
1a000e40:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a000e42:	b160      	cbz	r0, 1a000e5e <xQueueReceive+0x22>
1a000e44:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000e46:	b199      	cbz	r1, 1a000e70 <xQueueReceive+0x34>
1a000e48:	2501      	movs	r5, #1
1a000e4a:	b9bd      	cbnz	r5, 1a000e7c <xQueueReceive+0x40>
	__asm volatile
1a000e4c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e50:	f383 8811 	msr	BASEPRI, r3
1a000e54:	f3bf 8f6f 	isb	sy
1a000e58:	f3bf 8f4f 	dsb	sy
1a000e5c:	e7fe      	b.n	1a000e5c <xQueueReceive+0x20>
1a000e5e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e62:	f383 8811 	msr	BASEPRI, r3
1a000e66:	f3bf 8f6f 	isb	sy
1a000e6a:	f3bf 8f4f 	dsb	sy
1a000e6e:	e7fe      	b.n	1a000e6e <xQueueReceive+0x32>
1a000e70:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000e72:	b90b      	cbnz	r3, 1a000e78 <xQueueReceive+0x3c>
1a000e74:	2501      	movs	r5, #1
1a000e76:	e7e8      	b.n	1a000e4a <xQueueReceive+0xe>
1a000e78:	2500      	movs	r5, #0
1a000e7a:	e7e6      	b.n	1a000e4a <xQueueReceive+0xe>
1a000e7c:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000e7e:	f000 feef 	bl	1a001c60 <xTaskGetSchedulerState>
1a000e82:	b910      	cbnz	r0, 1a000e8a <xQueueReceive+0x4e>
1a000e84:	9b01      	ldr	r3, [sp, #4]
1a000e86:	b103      	cbz	r3, 1a000e8a <xQueueReceive+0x4e>
1a000e88:	2500      	movs	r5, #0
1a000e8a:	b945      	cbnz	r5, 1a000e9e <xQueueReceive+0x62>
1a000e8c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e90:	f383 8811 	msr	BASEPRI, r3
1a000e94:	f3bf 8f6f 	isb	sy
1a000e98:	f3bf 8f4f 	dsb	sy
1a000e9c:	e7fe      	b.n	1a000e9c <xQueueReceive+0x60>
1a000e9e:	2700      	movs	r7, #0
1a000ea0:	e02f      	b.n	1a000f02 <xQueueReceive+0xc6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a000ea2:	4631      	mov	r1, r6
1a000ea4:	4620      	mov	r0, r4
1a000ea6:	f7ff fd63 	bl	1a000970 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a000eaa:	3d01      	subs	r5, #1
1a000eac:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000eae:	6923      	ldr	r3, [r4, #16]
1a000eb0:	b163      	cbz	r3, 1a000ecc <xQueueReceive+0x90>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000eb2:	f104 0010 	add.w	r0, r4, #16
1a000eb6:	f000 fe3b 	bl	1a001b30 <xTaskRemoveFromEventList>
1a000eba:	b138      	cbz	r0, 1a000ecc <xQueueReceive+0x90>
						queueYIELD_IF_USING_PREEMPTION();
1a000ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000ec0:	4b34      	ldr	r3, [pc, #208]	; (1a000f94 <xQueueReceive+0x158>)
1a000ec2:	601a      	str	r2, [r3, #0]
1a000ec4:	f3bf 8f4f 	dsb	sy
1a000ec8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a000ecc:	f001 fab4 	bl	1a002438 <vPortExitCritical>
				return pdPASS;
1a000ed0:	2001      	movs	r0, #1
}
1a000ed2:	b005      	add	sp, #20
1a000ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a000ed6:	f001 faaf 	bl	1a002438 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a000eda:	2000      	movs	r0, #0
1a000edc:	e7f9      	b.n	1a000ed2 <xQueueReceive+0x96>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000ede:	a802      	add	r0, sp, #8
1a000ee0:	f000 fe6c 	bl	1a001bbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000ee4:	2701      	movs	r7, #1
1a000ee6:	e016      	b.n	1a000f16 <xQueueReceive+0xda>
		prvLockQueue( pxQueue );
1a000ee8:	2300      	movs	r3, #0
1a000eea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000eee:	e01e      	b.n	1a000f2e <xQueueReceive+0xf2>
1a000ef0:	2300      	movs	r3, #0
1a000ef2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000ef6:	e020      	b.n	1a000f3a <xQueueReceive+0xfe>
				prvUnlockQueue( pxQueue );
1a000ef8:	4620      	mov	r0, r4
1a000efa:	f7ff fd4b 	bl	1a000994 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000efe:	f000 fcd7 	bl	1a0018b0 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a000f02:	f001 fa77 	bl	1a0023f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000f06:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000f08:	2d00      	cmp	r5, #0
1a000f0a:	d1ca      	bne.n	1a000ea2 <xQueueReceive+0x66>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000f0c:	9b01      	ldr	r3, [sp, #4]
1a000f0e:	2b00      	cmp	r3, #0
1a000f10:	d0e1      	beq.n	1a000ed6 <xQueueReceive+0x9a>
				else if( xEntryTimeSet == pdFALSE )
1a000f12:	2f00      	cmp	r7, #0
1a000f14:	d0e3      	beq.n	1a000ede <xQueueReceive+0xa2>
		taskEXIT_CRITICAL();
1a000f16:	f001 fa8f 	bl	1a002438 <vPortExitCritical>
		vTaskSuspendAll();
1a000f1a:	f000 fc2b 	bl	1a001774 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000f1e:	f001 fa69 	bl	1a0023f4 <vPortEnterCritical>
1a000f22:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000f26:	b25b      	sxtb	r3, r3
1a000f28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000f2c:	d0dc      	beq.n	1a000ee8 <xQueueReceive+0xac>
1a000f2e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000f32:	b25b      	sxtb	r3, r3
1a000f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000f38:	d0da      	beq.n	1a000ef0 <xQueueReceive+0xb4>
1a000f3a:	f001 fa7d 	bl	1a002438 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000f3e:	a901      	add	r1, sp, #4
1a000f40:	a802      	add	r0, sp, #8
1a000f42:	f000 fe47 	bl	1a001bd4 <xTaskCheckForTimeOut>
1a000f46:	b9c8      	cbnz	r0, 1a000f7c <xQueueReceive+0x140>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000f48:	4620      	mov	r0, r4
1a000f4a:	f7ff fcc9 	bl	1a0008e0 <prvIsQueueEmpty>
1a000f4e:	2800      	cmp	r0, #0
1a000f50:	d0d2      	beq.n	1a000ef8 <xQueueReceive+0xbc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a000f52:	9901      	ldr	r1, [sp, #4]
1a000f54:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000f58:	f000 fdb6 	bl	1a001ac8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000f5c:	4620      	mov	r0, r4
1a000f5e:	f7ff fd19 	bl	1a000994 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000f62:	f000 fca5 	bl	1a0018b0 <xTaskResumeAll>
1a000f66:	2800      	cmp	r0, #0
1a000f68:	d1cb      	bne.n	1a000f02 <xQueueReceive+0xc6>
					portYIELD_WITHIN_API();
1a000f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000f6e:	4b09      	ldr	r3, [pc, #36]	; (1a000f94 <xQueueReceive+0x158>)
1a000f70:	601a      	str	r2, [r3, #0]
1a000f72:	f3bf 8f4f 	dsb	sy
1a000f76:	f3bf 8f6f 	isb	sy
1a000f7a:	e7c2      	b.n	1a000f02 <xQueueReceive+0xc6>
			prvUnlockQueue( pxQueue );
1a000f7c:	4620      	mov	r0, r4
1a000f7e:	f7ff fd09 	bl	1a000994 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000f82:	f000 fc95 	bl	1a0018b0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000f86:	4620      	mov	r0, r4
1a000f88:	f7ff fcaa 	bl	1a0008e0 <prvIsQueueEmpty>
1a000f8c:	2800      	cmp	r0, #0
1a000f8e:	d0b8      	beq.n	1a000f02 <xQueueReceive+0xc6>
				return errQUEUE_EMPTY;
1a000f90:	2000      	movs	r0, #0
1a000f92:	e79e      	b.n	1a000ed2 <xQueueReceive+0x96>
1a000f94:	e000ed04 	.word	0xe000ed04

1a000f98 <xQueueSemaphoreTake>:
{
1a000f98:	b570      	push	{r4, r5, r6, lr}
1a000f9a:	b084      	sub	sp, #16
1a000f9c:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
1a000f9e:	b158      	cbz	r0, 1a000fb8 <xQueueSemaphoreTake+0x20>
1a000fa0:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
1a000fa2:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000fa4:	b18b      	cbz	r3, 1a000fca <xQueueSemaphoreTake+0x32>
1a000fa6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000faa:	f383 8811 	msr	BASEPRI, r3
1a000fae:	f3bf 8f6f 	isb	sy
1a000fb2:	f3bf 8f4f 	dsb	sy
1a000fb6:	e7fe      	b.n	1a000fb6 <xQueueSemaphoreTake+0x1e>
1a000fb8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000fbc:	f383 8811 	msr	BASEPRI, r3
1a000fc0:	f3bf 8f6f 	isb	sy
1a000fc4:	f3bf 8f4f 	dsb	sy
1a000fc8:	e7fe      	b.n	1a000fc8 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000fca:	f000 fe49 	bl	1a001c60 <xTaskGetSchedulerState>
1a000fce:	b960      	cbnz	r0, 1a000fea <xQueueSemaphoreTake+0x52>
1a000fd0:	9b01      	ldr	r3, [sp, #4]
1a000fd2:	b963      	cbnz	r3, 1a000fee <xQueueSemaphoreTake+0x56>
1a000fd4:	2301      	movs	r3, #1
1a000fd6:	b963      	cbnz	r3, 1a000ff2 <xQueueSemaphoreTake+0x5a>
1a000fd8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000fdc:	f383 8811 	msr	BASEPRI, r3
1a000fe0:	f3bf 8f6f 	isb	sy
1a000fe4:	f3bf 8f4f 	dsb	sy
1a000fe8:	e7fe      	b.n	1a000fe8 <xQueueSemaphoreTake+0x50>
1a000fea:	2301      	movs	r3, #1
1a000fec:	e7f3      	b.n	1a000fd6 <xQueueSemaphoreTake+0x3e>
1a000fee:	2300      	movs	r3, #0
1a000ff0:	e7f1      	b.n	1a000fd6 <xQueueSemaphoreTake+0x3e>
1a000ff2:	2500      	movs	r5, #0
1a000ff4:	462e      	mov	r6, r5
1a000ff6:	e04e      	b.n	1a001096 <xQueueSemaphoreTake+0xfe>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1a000ff8:	3b01      	subs	r3, #1
1a000ffa:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000ffc:	6823      	ldr	r3, [r4, #0]
1a000ffe:	b913      	cbnz	r3, 1a001006 <xQueueSemaphoreTake+0x6e>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
1a001000:	f000 ff5e 	bl	1a001ec0 <pvTaskIncrementMutexHeldCount>
1a001004:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001006:	6923      	ldr	r3, [r4, #16]
1a001008:	b163      	cbz	r3, 1a001024 <xQueueSemaphoreTake+0x8c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a00100a:	f104 0010 	add.w	r0, r4, #16
1a00100e:	f000 fd8f 	bl	1a001b30 <xTaskRemoveFromEventList>
1a001012:	b138      	cbz	r0, 1a001024 <xQueueSemaphoreTake+0x8c>
						queueYIELD_IF_USING_PREEMPTION();
1a001014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001018:	4b47      	ldr	r3, [pc, #284]	; (1a001138 <xQueueSemaphoreTake+0x1a0>)
1a00101a:	601a      	str	r2, [r3, #0]
1a00101c:	f3bf 8f4f 	dsb	sy
1a001020:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a001024:	f001 fa08 	bl	1a002438 <vPortExitCritical>
				return pdPASS;
1a001028:	2501      	movs	r5, #1
}
1a00102a:	4628      	mov	r0, r5
1a00102c:	b004      	add	sp, #16
1a00102e:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
1a001030:	b145      	cbz	r5, 1a001044 <xQueueSemaphoreTake+0xac>
1a001032:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001036:	f383 8811 	msr	BASEPRI, r3
1a00103a:	f3bf 8f6f 	isb	sy
1a00103e:	f3bf 8f4f 	dsb	sy
1a001042:	e7fe      	b.n	1a001042 <xQueueSemaphoreTake+0xaa>
					taskEXIT_CRITICAL();
1a001044:	f001 f9f8 	bl	1a002438 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a001048:	e7ef      	b.n	1a00102a <xQueueSemaphoreTake+0x92>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a00104a:	a802      	add	r0, sp, #8
1a00104c:	f000 fdb6 	bl	1a001bbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001050:	2601      	movs	r6, #1
1a001052:	e02a      	b.n	1a0010aa <xQueueSemaphoreTake+0x112>
		prvLockQueue( pxQueue );
1a001054:	2300      	movs	r3, #0
1a001056:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a00105a:	e032      	b.n	1a0010c2 <xQueueSemaphoreTake+0x12a>
1a00105c:	2300      	movs	r3, #0
1a00105e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001062:	e034      	b.n	1a0010ce <xQueueSemaphoreTake+0x136>
						taskENTER_CRITICAL();
1a001064:	f001 f9c6 	bl	1a0023f4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1a001068:	6860      	ldr	r0, [r4, #4]
1a00106a:	f000 fe09 	bl	1a001c80 <xTaskPriorityInherit>
1a00106e:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
1a001070:	f001 f9e2 	bl	1a002438 <vPortExitCritical>
1a001074:	e03b      	b.n	1a0010ee <xQueueSemaphoreTake+0x156>
				prvUnlockQueue( pxQueue );
1a001076:	4620      	mov	r0, r4
1a001078:	f7ff fc8c 	bl	1a000994 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a00107c:	f000 fc18 	bl	1a0018b0 <xTaskResumeAll>
1a001080:	e009      	b.n	1a001096 <xQueueSemaphoreTake+0xfe>
			prvUnlockQueue( pxQueue );
1a001082:	4620      	mov	r0, r4
1a001084:	f7ff fc86 	bl	1a000994 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001088:	f000 fc12 	bl	1a0018b0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a00108c:	4620      	mov	r0, r4
1a00108e:	f7ff fc27 	bl	1a0008e0 <prvIsQueueEmpty>
1a001092:	2800      	cmp	r0, #0
1a001094:	d140      	bne.n	1a001118 <xQueueSemaphoreTake+0x180>
		taskENTER_CRITICAL();
1a001096:	f001 f9ad 	bl	1a0023f4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1a00109a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1a00109c:	2b00      	cmp	r3, #0
1a00109e:	d1ab      	bne.n	1a000ff8 <xQueueSemaphoreTake+0x60>
				if( xTicksToWait == ( TickType_t ) 0 )
1a0010a0:	9b01      	ldr	r3, [sp, #4]
1a0010a2:	2b00      	cmp	r3, #0
1a0010a4:	d0c4      	beq.n	1a001030 <xQueueSemaphoreTake+0x98>
				else if( xEntryTimeSet == pdFALSE )
1a0010a6:	2e00      	cmp	r6, #0
1a0010a8:	d0cf      	beq.n	1a00104a <xQueueSemaphoreTake+0xb2>
		taskEXIT_CRITICAL();
1a0010aa:	f001 f9c5 	bl	1a002438 <vPortExitCritical>
		vTaskSuspendAll();
1a0010ae:	f000 fb61 	bl	1a001774 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a0010b2:	f001 f99f 	bl	1a0023f4 <vPortEnterCritical>
1a0010b6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0010ba:	b25b      	sxtb	r3, r3
1a0010bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0010c0:	d0c8      	beq.n	1a001054 <xQueueSemaphoreTake+0xbc>
1a0010c2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0010c6:	b25b      	sxtb	r3, r3
1a0010c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0010cc:	d0c6      	beq.n	1a00105c <xQueueSemaphoreTake+0xc4>
1a0010ce:	f001 f9b3 	bl	1a002438 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a0010d2:	a901      	add	r1, sp, #4
1a0010d4:	a802      	add	r0, sp, #8
1a0010d6:	f000 fd7d 	bl	1a001bd4 <xTaskCheckForTimeOut>
1a0010da:	2800      	cmp	r0, #0
1a0010dc:	d1d1      	bne.n	1a001082 <xQueueSemaphoreTake+0xea>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0010de:	4620      	mov	r0, r4
1a0010e0:	f7ff fbfe 	bl	1a0008e0 <prvIsQueueEmpty>
1a0010e4:	2800      	cmp	r0, #0
1a0010e6:	d0c6      	beq.n	1a001076 <xQueueSemaphoreTake+0xde>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a0010e8:	6823      	ldr	r3, [r4, #0]
1a0010ea:	2b00      	cmp	r3, #0
1a0010ec:	d0ba      	beq.n	1a001064 <xQueueSemaphoreTake+0xcc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a0010ee:	9901      	ldr	r1, [sp, #4]
1a0010f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0010f4:	f000 fce8 	bl	1a001ac8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a0010f8:	4620      	mov	r0, r4
1a0010fa:	f7ff fc4b 	bl	1a000994 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a0010fe:	f000 fbd7 	bl	1a0018b0 <xTaskResumeAll>
1a001102:	2800      	cmp	r0, #0
1a001104:	d1c7      	bne.n	1a001096 <xQueueSemaphoreTake+0xfe>
					portYIELD_WITHIN_API();
1a001106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00110a:	4b0b      	ldr	r3, [pc, #44]	; (1a001138 <xQueueSemaphoreTake+0x1a0>)
1a00110c:	601a      	str	r2, [r3, #0]
1a00110e:	f3bf 8f4f 	dsb	sy
1a001112:	f3bf 8f6f 	isb	sy
1a001116:	e7be      	b.n	1a001096 <xQueueSemaphoreTake+0xfe>
					if( xInheritanceOccurred != pdFALSE )
1a001118:	2d00      	cmp	r5, #0
1a00111a:	d086      	beq.n	1a00102a <xQueueSemaphoreTake+0x92>
						taskENTER_CRITICAL();
1a00111c:	f001 f96a 	bl	1a0023f4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1a001120:	4620      	mov	r0, r4
1a001122:	f7ff fbc5 	bl	1a0008b0 <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
1a001126:	4601      	mov	r1, r0
1a001128:	6860      	ldr	r0, [r4, #4]
1a00112a:	f000 fe63 	bl	1a001df4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
1a00112e:	f001 f983 	bl	1a002438 <vPortExitCritical>
				return errQUEUE_EMPTY;
1a001132:	2500      	movs	r5, #0
1a001134:	e779      	b.n	1a00102a <xQueueSemaphoreTake+0x92>
1a001136:	bf00      	nop
1a001138:	e000ed04 	.word	0xe000ed04

1a00113c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a00113c:	2300      	movs	r3, #0
1a00113e:	2b07      	cmp	r3, #7
1a001140:	d80c      	bhi.n	1a00115c <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a001142:	4a07      	ldr	r2, [pc, #28]	; (1a001160 <vQueueAddToRegistry+0x24>)
1a001144:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a001148:	b10a      	cbz	r2, 1a00114e <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a00114a:	3301      	adds	r3, #1
1a00114c:	e7f7      	b.n	1a00113e <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a00114e:	4a04      	ldr	r2, [pc, #16]	; (1a001160 <vQueueAddToRegistry+0x24>)
1a001150:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a001154:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a001158:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a00115a:	4770      	bx	lr
1a00115c:	4770      	bx	lr
1a00115e:	bf00      	nop
1a001160:	100033b0 	.word	0x100033b0

1a001164 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a001164:	b570      	push	{r4, r5, r6, lr}
1a001166:	4604      	mov	r4, r0
1a001168:	460d      	mov	r5, r1
1a00116a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a00116c:	f001 f942 	bl	1a0023f4 <vPortEnterCritical>
1a001170:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001174:	b25b      	sxtb	r3, r3
1a001176:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00117a:	d00d      	beq.n	1a001198 <vQueueWaitForMessageRestricted+0x34>
1a00117c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001180:	b25b      	sxtb	r3, r3
1a001182:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001186:	d00b      	beq.n	1a0011a0 <vQueueWaitForMessageRestricted+0x3c>
1a001188:	f001 f956 	bl	1a002438 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a00118c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a00118e:	b15b      	cbz	r3, 1a0011a8 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a001190:	4620      	mov	r0, r4
1a001192:	f7ff fbff 	bl	1a000994 <prvUnlockQueue>
1a001196:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a001198:	2300      	movs	r3, #0
1a00119a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a00119e:	e7ed      	b.n	1a00117c <vQueueWaitForMessageRestricted+0x18>
1a0011a0:	2300      	movs	r3, #0
1a0011a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0011a6:	e7ef      	b.n	1a001188 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a0011a8:	4632      	mov	r2, r6
1a0011aa:	4629      	mov	r1, r5
1a0011ac:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0011b0:	f000 fca2 	bl	1a001af8 <vTaskPlaceOnEventListRestricted>
1a0011b4:	e7ec      	b.n	1a001190 <vQueueWaitForMessageRestricted+0x2c>

1a0011b6 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0011b6:	f100 0308 	add.w	r3, r0, #8
1a0011ba:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a0011bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0011c0:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0011c2:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0011c4:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a0011c6:	2300      	movs	r3, #0
1a0011c8:	6003      	str	r3, [r0, #0]
1a0011ca:	4770      	bx	lr

1a0011cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a0011cc:	2300      	movs	r3, #0
1a0011ce:	6103      	str	r3, [r0, #16]
1a0011d0:	4770      	bx	lr

1a0011d2 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a0011d2:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a0011d4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a0011d6:	689a      	ldr	r2, [r3, #8]
1a0011d8:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a0011da:	689a      	ldr	r2, [r3, #8]
1a0011dc:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a0011de:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a0011e0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a0011e2:	6803      	ldr	r3, [r0, #0]
1a0011e4:	3301      	adds	r3, #1
1a0011e6:	6003      	str	r3, [r0, #0]
1a0011e8:	4770      	bx	lr

1a0011ea <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a0011ea:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a0011ec:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a0011ee:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a0011f2:	d002      	beq.n	1a0011fa <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0011f4:	f100 0208 	add.w	r2, r0, #8
1a0011f8:	e002      	b.n	1a001200 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a0011fa:	6902      	ldr	r2, [r0, #16]
1a0011fc:	e004      	b.n	1a001208 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0011fe:	461a      	mov	r2, r3
1a001200:	6853      	ldr	r3, [r2, #4]
1a001202:	681c      	ldr	r4, [r3, #0]
1a001204:	42a5      	cmp	r5, r4
1a001206:	d2fa      	bcs.n	1a0011fe <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a001208:	6853      	ldr	r3, [r2, #4]
1a00120a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a00120c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a00120e:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a001210:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001212:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001214:	6803      	ldr	r3, [r0, #0]
1a001216:	3301      	adds	r3, #1
1a001218:	6003      	str	r3, [r0, #0]
}
1a00121a:	bc30      	pop	{r4, r5}
1a00121c:	4770      	bx	lr

1a00121e <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a00121e:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a001220:	6842      	ldr	r2, [r0, #4]
1a001222:	6881      	ldr	r1, [r0, #8]
1a001224:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a001226:	6882      	ldr	r2, [r0, #8]
1a001228:	6841      	ldr	r1, [r0, #4]
1a00122a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a00122c:	685a      	ldr	r2, [r3, #4]
1a00122e:	4290      	cmp	r0, r2
1a001230:	d006      	beq.n	1a001240 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a001232:	2200      	movs	r2, #0
1a001234:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a001236:	681a      	ldr	r2, [r3, #0]
1a001238:	3a01      	subs	r2, #1
1a00123a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a00123c:	6818      	ldr	r0, [r3, #0]
}
1a00123e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a001240:	6882      	ldr	r2, [r0, #8]
1a001242:	605a      	str	r2, [r3, #4]
1a001244:	e7f5      	b.n	1a001232 <uxListRemove+0x14>
1a001246:	Address 0x000000001a001246 is out of bounds.


1a001248 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a001248:	4b03      	ldr	r3, [pc, #12]	; (1a001258 <vApplicationGetIdleTaskMemory+0x10>)
1a00124a:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a00124c:	4b03      	ldr	r3, [pc, #12]	; (1a00125c <vApplicationGetIdleTaskMemory+0x14>)
1a00124e:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a001250:	235a      	movs	r3, #90	; 0x5a
1a001252:	6013      	str	r3, [r2, #0]
1a001254:	4770      	bx	lr
1a001256:	bf00      	nop
1a001258:	10003028 	.word	0x10003028
1a00125c:	10002920 	.word	0x10002920

1a001260 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a001260:	4b03      	ldr	r3, [pc, #12]	; (1a001270 <vApplicationGetTimerTaskMemory+0x10>)
1a001262:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a001264:	4b03      	ldr	r3, [pc, #12]	; (1a001274 <vApplicationGetTimerTaskMemory+0x14>)
1a001266:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a001268:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a00126c:	6013      	str	r3, [r2, #0]
1a00126e:	4770      	bx	lr
1a001270:	10003088 	.word	0x10003088
1a001274:	10002a88 	.word	0x10002a88

1a001278 <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a001278:	b510      	push	{r4, lr}
1a00127a:	b082      	sub	sp, #8
1a00127c:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a00127e:	9001      	str	r0, [sp, #4]
1a001280:	2300      	movs	r3, #0
1a001282:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a001284:	f001 f8b6 	bl	1a0023f4 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a001288:	9901      	ldr	r1, [sp, #4]
1a00128a:	4622      	mov	r2, r4
1a00128c:	4804      	ldr	r0, [pc, #16]	; (1a0012a0 <vAssertCalled+0x28>)
1a00128e:	f003 ffd7 	bl	1a005240 <printf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a001292:	9b00      	ldr	r3, [sp, #0]
1a001294:	2b00      	cmp	r3, #0
1a001296:	d0fc      	beq.n	1a001292 <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a001298:	f001 f8ce 	bl	1a002438 <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a00129c:	b002      	add	sp, #8
1a00129e:	bd10      	pop	{r4, pc}
1a0012a0:	1a009ff0 	.word	0x1a009ff0

1a0012a4 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

WEAK void vApplicationMallocFailedHook( void )
{
1a0012a4:	b508      	push	{r3, lr}
   // parts of the demo application.  If heap_1.c, heap_2.c or heap_4.c are used,
   // then the size of the heap available to pvPortMalloc() is defined by
   // configTOTAL_HEAP_SIZE in FreeRTOSConfig.h, and the xPortGetFreeHeapSize()
   // API function can be used to query the size of free heap space that remains.
   // More information is provided in the book text.
   printf( "Application Malloc Failed Hook!\r\n" );
1a0012a6:	4804      	ldr	r0, [pc, #16]	; (1a0012b8 <vApplicationMallocFailedHook+0x14>)
1a0012a8:	f004 f812 	bl	1a0052d0 <puts>
   vAssertCalled( __LINE__, __FILE__ );
1a0012ac:	4903      	ldr	r1, [pc, #12]	; (1a0012bc <vApplicationMallocFailedHook+0x18>)
1a0012ae:	202c      	movs	r0, #44	; 0x2c
1a0012b0:	f7ff ffe2 	bl	1a001278 <vAssertCalled>
1a0012b4:	bd08      	pop	{r3, pc}
1a0012b6:	bf00      	nop
1a0012b8:	1a009f7c 	.word	0x1a009f7c
1a0012bc:	1a009fa0 	.word	0x1a009fa0

1a0012c0 <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a0012c0:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a0012c2:	4804      	ldr	r0, [pc, #16]	; (1a0012d4 <vApplicationStackOverflowHook+0x14>)
1a0012c4:	f003 ffbc 	bl	1a005240 <printf>
   vAssertCalled( __LINE__, __FILE__ );
1a0012c8:	4903      	ldr	r1, [pc, #12]	; (1a0012d8 <vApplicationStackOverflowHook+0x18>)
1a0012ca:	2050      	movs	r0, #80	; 0x50
1a0012cc:	f7ff ffd4 	bl	1a001278 <vAssertCalled>
1a0012d0:	bd08      	pop	{r3, pc}
1a0012d2:	bf00      	nop
1a0012d4:	1a009fc0 	.word	0x1a009fc0
1a0012d8:	1a009fa0 	.word	0x1a009fa0

1a0012dc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a0012dc:	4b0a      	ldr	r3, [pc, #40]	; (1a001308 <prvResetNextTaskUnblockTime+0x2c>)
1a0012de:	681b      	ldr	r3, [r3, #0]
1a0012e0:	681b      	ldr	r3, [r3, #0]
1a0012e2:	b94b      	cbnz	r3, 1a0012f8 <prvResetNextTaskUnblockTime+0x1c>
1a0012e4:	2301      	movs	r3, #1
1a0012e6:	b94b      	cbnz	r3, 1a0012fc <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0012e8:	4b07      	ldr	r3, [pc, #28]	; (1a001308 <prvResetNextTaskUnblockTime+0x2c>)
1a0012ea:	681b      	ldr	r3, [r3, #0]
1a0012ec:	68db      	ldr	r3, [r3, #12]
1a0012ee:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a0012f0:	685a      	ldr	r2, [r3, #4]
1a0012f2:	4b06      	ldr	r3, [pc, #24]	; (1a00130c <prvResetNextTaskUnblockTime+0x30>)
1a0012f4:	601a      	str	r2, [r3, #0]
1a0012f6:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a0012f8:	2300      	movs	r3, #0
1a0012fa:	e7f4      	b.n	1a0012e6 <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
1a0012fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001300:	4b02      	ldr	r3, [pc, #8]	; (1a00130c <prvResetNextTaskUnblockTime+0x30>)
1a001302:	601a      	str	r2, [r3, #0]
1a001304:	4770      	bx	lr
1a001306:	bf00      	nop
1a001308:	100030ec 	.word	0x100030ec
1a00130c:	100031c0 	.word	0x100031c0

1a001310 <prvInitialiseNewTask>:
{
1a001310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001314:	4681      	mov	r9, r0
1a001316:	460d      	mov	r5, r1
1a001318:	4617      	mov	r7, r2
1a00131a:	469a      	mov	sl, r3
1a00131c:	9e08      	ldr	r6, [sp, #32]
1a00131e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a001322:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a001324:	0092      	lsls	r2, r2, #2
1a001326:	21a5      	movs	r1, #165	; 0xa5
1a001328:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a00132a:	f003 ff27 	bl	1a00517c <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a00132e:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a001330:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a001334:	3a01      	subs	r2, #1
1a001336:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a00133a:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a00133e:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001340:	2300      	movs	r3, #0
1a001342:	2b0f      	cmp	r3, #15
1a001344:	d807      	bhi.n	1a001356 <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a001346:	5ce9      	ldrb	r1, [r5, r3]
1a001348:	18e2      	adds	r2, r4, r3
1a00134a:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a00134e:	5cea      	ldrb	r2, [r5, r3]
1a001350:	b10a      	cbz	r2, 1a001356 <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001352:	3301      	adds	r3, #1
1a001354:	e7f5      	b.n	1a001342 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a001356:	2300      	movs	r3, #0
1a001358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a00135c:	2e06      	cmp	r6, #6
1a00135e:	d900      	bls.n	1a001362 <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a001360:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a001362:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a001364:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a001366:	2500      	movs	r5, #0
1a001368:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a00136a:	1d20      	adds	r0, r4, #4
1a00136c:	f7ff ff2e 	bl	1a0011cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a001370:	f104 0018 	add.w	r0, r4, #24
1a001374:	f7ff ff2a 	bl	1a0011cc <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a001378:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00137a:	f1c6 0607 	rsb	r6, r6, #7
1a00137e:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a001380:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a001382:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a001384:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a001388:	4652      	mov	r2, sl
1a00138a:	4649      	mov	r1, r9
1a00138c:	4638      	mov	r0, r7
1a00138e:	f001 f803 	bl	1a002398 <pxPortInitialiseStack>
1a001392:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a001394:	f1b8 0f00 	cmp.w	r8, #0
1a001398:	d001      	beq.n	1a00139e <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a00139a:	f8c8 4000 	str.w	r4, [r8]
1a00139e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0013a2:	Address 0x000000001a0013a2 is out of bounds.


1a0013a4 <prvInitialiseTaskLists>:
{
1a0013a4:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a0013a6:	2400      	movs	r4, #0
1a0013a8:	e007      	b.n	1a0013ba <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a0013aa:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a0013ae:	0093      	lsls	r3, r2, #2
1a0013b0:	480e      	ldr	r0, [pc, #56]	; (1a0013ec <prvInitialiseTaskLists+0x48>)
1a0013b2:	4418      	add	r0, r3
1a0013b4:	f7ff feff 	bl	1a0011b6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a0013b8:	3401      	adds	r4, #1
1a0013ba:	2c06      	cmp	r4, #6
1a0013bc:	d9f5      	bls.n	1a0013aa <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a0013be:	4d0c      	ldr	r5, [pc, #48]	; (1a0013f0 <prvInitialiseTaskLists+0x4c>)
1a0013c0:	4628      	mov	r0, r5
1a0013c2:	f7ff fef8 	bl	1a0011b6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a0013c6:	4c0b      	ldr	r4, [pc, #44]	; (1a0013f4 <prvInitialiseTaskLists+0x50>)
1a0013c8:	4620      	mov	r0, r4
1a0013ca:	f7ff fef4 	bl	1a0011b6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a0013ce:	480a      	ldr	r0, [pc, #40]	; (1a0013f8 <prvInitialiseTaskLists+0x54>)
1a0013d0:	f7ff fef1 	bl	1a0011b6 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a0013d4:	4809      	ldr	r0, [pc, #36]	; (1a0013fc <prvInitialiseTaskLists+0x58>)
1a0013d6:	f7ff feee 	bl	1a0011b6 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a0013da:	4809      	ldr	r0, [pc, #36]	; (1a001400 <prvInitialiseTaskLists+0x5c>)
1a0013dc:	f7ff feeb 	bl	1a0011b6 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a0013e0:	4b08      	ldr	r3, [pc, #32]	; (1a001404 <prvInitialiseTaskLists+0x60>)
1a0013e2:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a0013e4:	4b08      	ldr	r3, [pc, #32]	; (1a001408 <prvInitialiseTaskLists+0x64>)
1a0013e6:	601c      	str	r4, [r3, #0]
1a0013e8:	bd38      	pop	{r3, r4, r5, pc}
1a0013ea:	bf00      	nop
1a0013ec:	100030f4 	.word	0x100030f4
1a0013f0:	10003198 	.word	0x10003198
1a0013f4:	100031ac 	.word	0x100031ac
1a0013f8:	100031c8 	.word	0x100031c8
1a0013fc:	100031f4 	.word	0x100031f4
1a001400:	100031e0 	.word	0x100031e0
1a001404:	100030ec 	.word	0x100030ec
1a001408:	100030f0 	.word	0x100030f0

1a00140c <prvAddNewTaskToReadyList>:
{
1a00140c:	b510      	push	{r4, lr}
1a00140e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a001410:	f000 fff0 	bl	1a0023f4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a001414:	4a21      	ldr	r2, [pc, #132]	; (1a00149c <prvAddNewTaskToReadyList+0x90>)
1a001416:	6813      	ldr	r3, [r2, #0]
1a001418:	3301      	adds	r3, #1
1a00141a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a00141c:	4b20      	ldr	r3, [pc, #128]	; (1a0014a0 <prvAddNewTaskToReadyList+0x94>)
1a00141e:	681b      	ldr	r3, [r3, #0]
1a001420:	2b00      	cmp	r3, #0
1a001422:	d032      	beq.n	1a00148a <prvAddNewTaskToReadyList+0x7e>
			if( xSchedulerRunning == pdFALSE )
1a001424:	4b1f      	ldr	r3, [pc, #124]	; (1a0014a4 <prvAddNewTaskToReadyList+0x98>)
1a001426:	681b      	ldr	r3, [r3, #0]
1a001428:	b93b      	cbnz	r3, 1a00143a <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a00142a:	4b1d      	ldr	r3, [pc, #116]	; (1a0014a0 <prvAddNewTaskToReadyList+0x94>)
1a00142c:	681b      	ldr	r3, [r3, #0]
1a00142e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001430:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001432:	429a      	cmp	r2, r3
1a001434:	d801      	bhi.n	1a00143a <prvAddNewTaskToReadyList+0x2e>
					pxCurrentTCB = pxNewTCB;
1a001436:	4b1a      	ldr	r3, [pc, #104]	; (1a0014a0 <prvAddNewTaskToReadyList+0x94>)
1a001438:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
1a00143a:	4a1b      	ldr	r2, [pc, #108]	; (1a0014a8 <prvAddNewTaskToReadyList+0x9c>)
1a00143c:	6813      	ldr	r3, [r2, #0]
1a00143e:	3301      	adds	r3, #1
1a001440:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a001442:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a001444:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001446:	2201      	movs	r2, #1
1a001448:	409a      	lsls	r2, r3
1a00144a:	4918      	ldr	r1, [pc, #96]	; (1a0014ac <prvAddNewTaskToReadyList+0xa0>)
1a00144c:	6808      	ldr	r0, [r1, #0]
1a00144e:	4302      	orrs	r2, r0
1a001450:	600a      	str	r2, [r1, #0]
1a001452:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001456:	009a      	lsls	r2, r3, #2
1a001458:	1d21      	adds	r1, r4, #4
1a00145a:	4815      	ldr	r0, [pc, #84]	; (1a0014b0 <prvAddNewTaskToReadyList+0xa4>)
1a00145c:	4410      	add	r0, r2
1a00145e:	f7ff feb8 	bl	1a0011d2 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a001462:	f000 ffe9 	bl	1a002438 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a001466:	4b0f      	ldr	r3, [pc, #60]	; (1a0014a4 <prvAddNewTaskToReadyList+0x98>)
1a001468:	681b      	ldr	r3, [r3, #0]
1a00146a:	b16b      	cbz	r3, 1a001488 <prvAddNewTaskToReadyList+0x7c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a00146c:	4b0c      	ldr	r3, [pc, #48]	; (1a0014a0 <prvAddNewTaskToReadyList+0x94>)
1a00146e:	681b      	ldr	r3, [r3, #0]
1a001470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001472:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001474:	429a      	cmp	r2, r3
1a001476:	d207      	bcs.n	1a001488 <prvAddNewTaskToReadyList+0x7c>
			taskYIELD_IF_USING_PREEMPTION();
1a001478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00147c:	4b0d      	ldr	r3, [pc, #52]	; (1a0014b4 <prvAddNewTaskToReadyList+0xa8>)
1a00147e:	601a      	str	r2, [r3, #0]
1a001480:	f3bf 8f4f 	dsb	sy
1a001484:	f3bf 8f6f 	isb	sy
1a001488:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
1a00148a:	4b05      	ldr	r3, [pc, #20]	; (1a0014a0 <prvAddNewTaskToReadyList+0x94>)
1a00148c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a00148e:	6813      	ldr	r3, [r2, #0]
1a001490:	2b01      	cmp	r3, #1
1a001492:	d1d2      	bne.n	1a00143a <prvAddNewTaskToReadyList+0x2e>
				prvInitialiseTaskLists();
1a001494:	f7ff ff86 	bl	1a0013a4 <prvInitialiseTaskLists>
1a001498:	e7cf      	b.n	1a00143a <prvAddNewTaskToReadyList+0x2e>
1a00149a:	bf00      	nop
1a00149c:	10003180 	.word	0x10003180
1a0014a0:	100030e8 	.word	0x100030e8
1a0014a4:	100031dc 	.word	0x100031dc
1a0014a8:	10003190 	.word	0x10003190
1a0014ac:	10003194 	.word	0x10003194
1a0014b0:	100030f4 	.word	0x100030f4
1a0014b4:	e000ed04 	.word	0xe000ed04

1a0014b8 <prvDeleteTCB>:
	{
1a0014b8:	b510      	push	{r4, lr}
1a0014ba:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a0014bc:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a0014c0:	b163      	cbz	r3, 1a0014dc <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a0014c2:	2b01      	cmp	r3, #1
1a0014c4:	d011      	beq.n	1a0014ea <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a0014c6:	2b02      	cmp	r3, #2
1a0014c8:	d012      	beq.n	1a0014f0 <prvDeleteTCB+0x38>
1a0014ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014ce:	f383 8811 	msr	BASEPRI, r3
1a0014d2:	f3bf 8f6f 	isb	sy
1a0014d6:	f3bf 8f4f 	dsb	sy
1a0014da:	e7fe      	b.n	1a0014da <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
1a0014dc:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a0014de:	f7ff f9af 	bl	1a000840 <vPortFree>
				vPortFree( pxTCB );
1a0014e2:	4620      	mov	r0, r4
1a0014e4:	f7ff f9ac 	bl	1a000840 <vPortFree>
1a0014e8:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
1a0014ea:	f7ff f9a9 	bl	1a000840 <vPortFree>
1a0014ee:	bd10      	pop	{r4, pc}
1a0014f0:	bd10      	pop	{r4, pc}
1a0014f2:	Address 0x000000001a0014f2 is out of bounds.


1a0014f4 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a0014f4:	4b0f      	ldr	r3, [pc, #60]	; (1a001534 <prvCheckTasksWaitingTermination+0x40>)
1a0014f6:	681b      	ldr	r3, [r3, #0]
1a0014f8:	b1d3      	cbz	r3, 1a001530 <prvCheckTasksWaitingTermination+0x3c>
{
1a0014fa:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a0014fc:	f000 ff7a 	bl	1a0023f4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a001500:	4b0d      	ldr	r3, [pc, #52]	; (1a001538 <prvCheckTasksWaitingTermination+0x44>)
1a001502:	68db      	ldr	r3, [r3, #12]
1a001504:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001506:	1d20      	adds	r0, r4, #4
1a001508:	f7ff fe89 	bl	1a00121e <uxListRemove>
				--uxCurrentNumberOfTasks;
1a00150c:	4a0b      	ldr	r2, [pc, #44]	; (1a00153c <prvCheckTasksWaitingTermination+0x48>)
1a00150e:	6813      	ldr	r3, [r2, #0]
1a001510:	3b01      	subs	r3, #1
1a001512:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a001514:	4a07      	ldr	r2, [pc, #28]	; (1a001534 <prvCheckTasksWaitingTermination+0x40>)
1a001516:	6813      	ldr	r3, [r2, #0]
1a001518:	3b01      	subs	r3, #1
1a00151a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a00151c:	f000 ff8c 	bl	1a002438 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a001520:	4620      	mov	r0, r4
1a001522:	f7ff ffc9 	bl	1a0014b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001526:	4b03      	ldr	r3, [pc, #12]	; (1a001534 <prvCheckTasksWaitingTermination+0x40>)
1a001528:	681b      	ldr	r3, [r3, #0]
1a00152a:	2b00      	cmp	r3, #0
1a00152c:	d1e6      	bne.n	1a0014fc <prvCheckTasksWaitingTermination+0x8>
}
1a00152e:	bd10      	pop	{r4, pc}
1a001530:	4770      	bx	lr
1a001532:	bf00      	nop
1a001534:	10003184 	.word	0x10003184
1a001538:	100031f4 	.word	0x100031f4
1a00153c:	10003180 	.word	0x10003180

1a001540 <prvIdleTask>:
{
1a001540:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a001542:	f7ff ffd7 	bl	1a0014f4 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a001546:	4b06      	ldr	r3, [pc, #24]	; (1a001560 <prvIdleTask+0x20>)
1a001548:	681b      	ldr	r3, [r3, #0]
1a00154a:	2b01      	cmp	r3, #1
1a00154c:	d9f9      	bls.n	1a001542 <prvIdleTask+0x2>
				taskYIELD();
1a00154e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001552:	4b04      	ldr	r3, [pc, #16]	; (1a001564 <prvIdleTask+0x24>)
1a001554:	601a      	str	r2, [r3, #0]
1a001556:	f3bf 8f4f 	dsb	sy
1a00155a:	f3bf 8f6f 	isb	sy
1a00155e:	e7f0      	b.n	1a001542 <prvIdleTask+0x2>
1a001560:	100030f4 	.word	0x100030f4
1a001564:	e000ed04 	.word	0xe000ed04

1a001568 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a001568:	b570      	push	{r4, r5, r6, lr}
1a00156a:	4604      	mov	r4, r0
1a00156c:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a00156e:	4b1d      	ldr	r3, [pc, #116]	; (1a0015e4 <prvAddCurrentTaskToDelayedList+0x7c>)
1a001570:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001572:	4b1d      	ldr	r3, [pc, #116]	; (1a0015e8 <prvAddCurrentTaskToDelayedList+0x80>)
1a001574:	6818      	ldr	r0, [r3, #0]
1a001576:	3004      	adds	r0, #4
1a001578:	f7ff fe51 	bl	1a00121e <uxListRemove>
1a00157c:	b950      	cbnz	r0, 1a001594 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a00157e:	4b1a      	ldr	r3, [pc, #104]	; (1a0015e8 <prvAddCurrentTaskToDelayedList+0x80>)
1a001580:	681b      	ldr	r3, [r3, #0]
1a001582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001584:	2301      	movs	r3, #1
1a001586:	fa03 f202 	lsl.w	r2, r3, r2
1a00158a:	4918      	ldr	r1, [pc, #96]	; (1a0015ec <prvAddCurrentTaskToDelayedList+0x84>)
1a00158c:	680b      	ldr	r3, [r1, #0]
1a00158e:	ea23 0302 	bic.w	r3, r3, r2
1a001592:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001594:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a001598:	d013      	beq.n	1a0015c2 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a00159a:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a00159c:	4b12      	ldr	r3, [pc, #72]	; (1a0015e8 <prvAddCurrentTaskToDelayedList+0x80>)
1a00159e:	681b      	ldr	r3, [r3, #0]
1a0015a0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a0015a2:	42a5      	cmp	r5, r4
1a0015a4:	d816      	bhi.n	1a0015d4 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0015a6:	4b12      	ldr	r3, [pc, #72]	; (1a0015f0 <prvAddCurrentTaskToDelayedList+0x88>)
1a0015a8:	6818      	ldr	r0, [r3, #0]
1a0015aa:	4b0f      	ldr	r3, [pc, #60]	; (1a0015e8 <prvAddCurrentTaskToDelayedList+0x80>)
1a0015ac:	6819      	ldr	r1, [r3, #0]
1a0015ae:	3104      	adds	r1, #4
1a0015b0:	f7ff fe1b 	bl	1a0011ea <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a0015b4:	4b0f      	ldr	r3, [pc, #60]	; (1a0015f4 <prvAddCurrentTaskToDelayedList+0x8c>)
1a0015b6:	681b      	ldr	r3, [r3, #0]
1a0015b8:	429c      	cmp	r4, r3
1a0015ba:	d201      	bcs.n	1a0015c0 <prvAddCurrentTaskToDelayedList+0x58>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a0015bc:	4b0d      	ldr	r3, [pc, #52]	; (1a0015f4 <prvAddCurrentTaskToDelayedList+0x8c>)
1a0015be:	601c      	str	r4, [r3, #0]
1a0015c0:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a0015c2:	2e00      	cmp	r6, #0
1a0015c4:	d0e9      	beq.n	1a00159a <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0015c6:	4b08      	ldr	r3, [pc, #32]	; (1a0015e8 <prvAddCurrentTaskToDelayedList+0x80>)
1a0015c8:	6819      	ldr	r1, [r3, #0]
1a0015ca:	3104      	adds	r1, #4
1a0015cc:	480a      	ldr	r0, [pc, #40]	; (1a0015f8 <prvAddCurrentTaskToDelayedList+0x90>)
1a0015ce:	f7ff fe00 	bl	1a0011d2 <vListInsertEnd>
1a0015d2:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0015d4:	4b09      	ldr	r3, [pc, #36]	; (1a0015fc <prvAddCurrentTaskToDelayedList+0x94>)
1a0015d6:	6818      	ldr	r0, [r3, #0]
1a0015d8:	4b03      	ldr	r3, [pc, #12]	; (1a0015e8 <prvAddCurrentTaskToDelayedList+0x80>)
1a0015da:	6819      	ldr	r1, [r3, #0]
1a0015dc:	3104      	adds	r1, #4
1a0015de:	f7ff fe04 	bl	1a0011ea <vListInsert>
1a0015e2:	bd70      	pop	{r4, r5, r6, pc}
1a0015e4:	10003208 	.word	0x10003208
1a0015e8:	100030e8 	.word	0x100030e8
1a0015ec:	10003194 	.word	0x10003194
1a0015f0:	100030ec 	.word	0x100030ec
1a0015f4:	100031c0 	.word	0x100031c0
1a0015f8:	100031e0 	.word	0x100031e0
1a0015fc:	100030f0 	.word	0x100030f0

1a001600 <xTaskCreateStatic>:
	{
1a001600:	b570      	push	{r4, r5, r6, lr}
1a001602:	b086      	sub	sp, #24
1a001604:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a001606:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a001608:	b175      	cbz	r5, 1a001628 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
1a00160a:	b1b4      	cbz	r4, 1a00163a <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
1a00160c:	2660      	movs	r6, #96	; 0x60
1a00160e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a001610:	9e04      	ldr	r6, [sp, #16]
1a001612:	2e60      	cmp	r6, #96	; 0x60
1a001614:	d01a      	beq.n	1a00164c <xTaskCreateStatic+0x4c>
1a001616:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00161a:	f383 8811 	msr	BASEPRI, r3
1a00161e:	f3bf 8f6f 	isb	sy
1a001622:	f3bf 8f4f 	dsb	sy
1a001626:	e7fe      	b.n	1a001626 <xTaskCreateStatic+0x26>
1a001628:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00162c:	f383 8811 	msr	BASEPRI, r3
1a001630:	f3bf 8f6f 	isb	sy
1a001634:	f3bf 8f4f 	dsb	sy
1a001638:	e7fe      	b.n	1a001638 <xTaskCreateStatic+0x38>
1a00163a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00163e:	f383 8811 	msr	BASEPRI, r3
1a001642:	f3bf 8f6f 	isb	sy
1a001646:	f3bf 8f4f 	dsb	sy
1a00164a:	e7fe      	b.n	1a00164a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a00164c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a00164e:	2502      	movs	r5, #2
1a001650:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a001654:	2500      	movs	r5, #0
1a001656:	9503      	str	r5, [sp, #12]
1a001658:	9402      	str	r4, [sp, #8]
1a00165a:	ad05      	add	r5, sp, #20
1a00165c:	9501      	str	r5, [sp, #4]
1a00165e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a001660:	9500      	str	r5, [sp, #0]
1a001662:	f7ff fe55 	bl	1a001310 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001666:	4620      	mov	r0, r4
1a001668:	f7ff fed0 	bl	1a00140c <prvAddNewTaskToReadyList>
	}
1a00166c:	9805      	ldr	r0, [sp, #20]
1a00166e:	b006      	add	sp, #24
1a001670:	bd70      	pop	{r4, r5, r6, pc}

1a001672 <xTaskCreate>:
	{
1a001672:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001676:	b085      	sub	sp, #20
1a001678:	4606      	mov	r6, r0
1a00167a:	460f      	mov	r7, r1
1a00167c:	4615      	mov	r5, r2
1a00167e:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001680:	0090      	lsls	r0, r2, #2
1a001682:	f7ff f855 	bl	1a000730 <pvPortMalloc>
			if( pxStack != NULL )
1a001686:	b310      	cbz	r0, 1a0016ce <xTaskCreate+0x5c>
1a001688:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a00168a:	2060      	movs	r0, #96	; 0x60
1a00168c:	f7ff f850 	bl	1a000730 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a001690:	4604      	mov	r4, r0
1a001692:	b1c0      	cbz	r0, 1a0016c6 <xTaskCreate+0x54>
					pxNewTCB->pxStack = pxStack;
1a001694:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a001698:	b1dc      	cbz	r4, 1a0016d2 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a00169a:	2300      	movs	r3, #0
1a00169c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a0016a0:	9303      	str	r3, [sp, #12]
1a0016a2:	9402      	str	r4, [sp, #8]
1a0016a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0016a6:	9301      	str	r3, [sp, #4]
1a0016a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0016aa:	9300      	str	r3, [sp, #0]
1a0016ac:	4643      	mov	r3, r8
1a0016ae:	462a      	mov	r2, r5
1a0016b0:	4639      	mov	r1, r7
1a0016b2:	4630      	mov	r0, r6
1a0016b4:	f7ff fe2c 	bl	1a001310 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a0016b8:	4620      	mov	r0, r4
1a0016ba:	f7ff fea7 	bl	1a00140c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a0016be:	2001      	movs	r0, #1
	}
1a0016c0:	b005      	add	sp, #20
1a0016c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a0016c6:	4648      	mov	r0, r9
1a0016c8:	f7ff f8ba 	bl	1a000840 <vPortFree>
1a0016cc:	e7e4      	b.n	1a001698 <xTaskCreate+0x26>
				pxNewTCB = NULL;
1a0016ce:	2400      	movs	r4, #0
1a0016d0:	e7e2      	b.n	1a001698 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a0016d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a0016d6:	e7f3      	b.n	1a0016c0 <xTaskCreate+0x4e>

1a0016d8 <vTaskStartScheduler>:
{
1a0016d8:	b510      	push	{r4, lr}
1a0016da:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a0016dc:	2400      	movs	r4, #0
1a0016de:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a0016e0:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a0016e2:	aa07      	add	r2, sp, #28
1a0016e4:	a906      	add	r1, sp, #24
1a0016e6:	a805      	add	r0, sp, #20
1a0016e8:	f7ff fdae 	bl	1a001248 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a0016ec:	9b05      	ldr	r3, [sp, #20]
1a0016ee:	9302      	str	r3, [sp, #8]
1a0016f0:	9b06      	ldr	r3, [sp, #24]
1a0016f2:	9301      	str	r3, [sp, #4]
1a0016f4:	9400      	str	r4, [sp, #0]
1a0016f6:	4623      	mov	r3, r4
1a0016f8:	9a07      	ldr	r2, [sp, #28]
1a0016fa:	4919      	ldr	r1, [pc, #100]	; (1a001760 <vTaskStartScheduler+0x88>)
1a0016fc:	4819      	ldr	r0, [pc, #100]	; (1a001764 <vTaskStartScheduler+0x8c>)
1a0016fe:	f7ff ff7f 	bl	1a001600 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a001702:	b148      	cbz	r0, 1a001718 <vTaskStartScheduler+0x40>
			xReturn = pdPASS;
1a001704:	2001      	movs	r0, #1
		if( xReturn == pdPASS )
1a001706:	2801      	cmp	r0, #1
1a001708:	d008      	beq.n	1a00171c <vTaskStartScheduler+0x44>
	if( xReturn == pdPASS )
1a00170a:	2801      	cmp	r0, #1
1a00170c:	d009      	beq.n	1a001722 <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a00170e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001712:	d01b      	beq.n	1a00174c <vTaskStartScheduler+0x74>
}
1a001714:	b008      	add	sp, #32
1a001716:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a001718:	2000      	movs	r0, #0
1a00171a:	e7f4      	b.n	1a001706 <vTaskStartScheduler+0x2e>
			xReturn = xTimerCreateTimerTask();
1a00171c:	f000 fc4a 	bl	1a001fb4 <xTimerCreateTimerTask>
1a001720:	e7f3      	b.n	1a00170a <vTaskStartScheduler+0x32>
1a001722:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001726:	f383 8811 	msr	BASEPRI, r3
1a00172a:	f3bf 8f6f 	isb	sy
1a00172e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a001732:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001736:	4b0c      	ldr	r3, [pc, #48]	; (1a001768 <vTaskStartScheduler+0x90>)
1a001738:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a00173a:	2201      	movs	r2, #1
1a00173c:	4b0b      	ldr	r3, [pc, #44]	; (1a00176c <vTaskStartScheduler+0x94>)
1a00173e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a001740:	2200      	movs	r2, #0
1a001742:	4b0b      	ldr	r3, [pc, #44]	; (1a001770 <vTaskStartScheduler+0x98>)
1a001744:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a001746:	f000 fef7 	bl	1a002538 <xPortStartScheduler>
1a00174a:	e7e3      	b.n	1a001714 <vTaskStartScheduler+0x3c>
1a00174c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001750:	f383 8811 	msr	BASEPRI, r3
1a001754:	f3bf 8f6f 	isb	sy
1a001758:	f3bf 8f4f 	dsb	sy
1a00175c:	e7fe      	b.n	1a00175c <vTaskStartScheduler+0x84>
1a00175e:	bf00      	nop
1a001760:	1a00a030 	.word	0x1a00a030
1a001764:	1a001541 	.word	0x1a001541
1a001768:	100031c0 	.word	0x100031c0
1a00176c:	100031dc 	.word	0x100031dc
1a001770:	10003208 	.word	0x10003208

1a001774 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a001774:	4a02      	ldr	r2, [pc, #8]	; (1a001780 <vTaskSuspendAll+0xc>)
1a001776:	6813      	ldr	r3, [r2, #0]
1a001778:	3301      	adds	r3, #1
1a00177a:	6013      	str	r3, [r2, #0]
1a00177c:	4770      	bx	lr
1a00177e:	bf00      	nop
1a001780:	1000318c 	.word	0x1000318c

1a001784 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a001784:	4b01      	ldr	r3, [pc, #4]	; (1a00178c <xTaskGetTickCount+0x8>)
1a001786:	6818      	ldr	r0, [r3, #0]
}
1a001788:	4770      	bx	lr
1a00178a:	bf00      	nop
1a00178c:	10003208 	.word	0x10003208

1a001790 <xTaskIncrementTick>:
{
1a001790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001792:	4b3c      	ldr	r3, [pc, #240]	; (1a001884 <xTaskIncrementTick+0xf4>)
1a001794:	681b      	ldr	r3, [r3, #0]
1a001796:	2b00      	cmp	r3, #0
1a001798:	d168      	bne.n	1a00186c <xTaskIncrementTick+0xdc>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a00179a:	4b3b      	ldr	r3, [pc, #236]	; (1a001888 <xTaskIncrementTick+0xf8>)
1a00179c:	681d      	ldr	r5, [r3, #0]
1a00179e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a0017a0:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a0017a2:	b9c5      	cbnz	r5, 1a0017d6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a0017a4:	4b39      	ldr	r3, [pc, #228]	; (1a00188c <xTaskIncrementTick+0xfc>)
1a0017a6:	681b      	ldr	r3, [r3, #0]
1a0017a8:	681b      	ldr	r3, [r3, #0]
1a0017aa:	b143      	cbz	r3, 1a0017be <xTaskIncrementTick+0x2e>
1a0017ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017b0:	f383 8811 	msr	BASEPRI, r3
1a0017b4:	f3bf 8f6f 	isb	sy
1a0017b8:	f3bf 8f4f 	dsb	sy
1a0017bc:	e7fe      	b.n	1a0017bc <xTaskIncrementTick+0x2c>
1a0017be:	4a33      	ldr	r2, [pc, #204]	; (1a00188c <xTaskIncrementTick+0xfc>)
1a0017c0:	6811      	ldr	r1, [r2, #0]
1a0017c2:	4b33      	ldr	r3, [pc, #204]	; (1a001890 <xTaskIncrementTick+0x100>)
1a0017c4:	6818      	ldr	r0, [r3, #0]
1a0017c6:	6010      	str	r0, [r2, #0]
1a0017c8:	6019      	str	r1, [r3, #0]
1a0017ca:	4a32      	ldr	r2, [pc, #200]	; (1a001894 <xTaskIncrementTick+0x104>)
1a0017cc:	6813      	ldr	r3, [r2, #0]
1a0017ce:	3301      	adds	r3, #1
1a0017d0:	6013      	str	r3, [r2, #0]
1a0017d2:	f7ff fd83 	bl	1a0012dc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a0017d6:	4b30      	ldr	r3, [pc, #192]	; (1a001898 <xTaskIncrementTick+0x108>)
1a0017d8:	681b      	ldr	r3, [r3, #0]
1a0017da:	429d      	cmp	r5, r3
1a0017dc:	d23a      	bcs.n	1a001854 <xTaskIncrementTick+0xc4>
BaseType_t xSwitchRequired = pdFALSE;
1a0017de:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a0017e0:	4b2e      	ldr	r3, [pc, #184]	; (1a00189c <xTaskIncrementTick+0x10c>)
1a0017e2:	681b      	ldr	r3, [r3, #0]
1a0017e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0017e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0017ea:	009a      	lsls	r2, r3, #2
1a0017ec:	4b2c      	ldr	r3, [pc, #176]	; (1a0018a0 <xTaskIncrementTick+0x110>)
1a0017ee:	589b      	ldr	r3, [r3, r2]
1a0017f0:	2b01      	cmp	r3, #1
1a0017f2:	d940      	bls.n	1a001876 <xTaskIncrementTick+0xe6>
				xSwitchRequired = pdTRUE;
1a0017f4:	2401      	movs	r4, #1
1a0017f6:	e03e      	b.n	1a001876 <xTaskIncrementTick+0xe6>
							xSwitchRequired = pdTRUE;
1a0017f8:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a0017fa:	4b24      	ldr	r3, [pc, #144]	; (1a00188c <xTaskIncrementTick+0xfc>)
1a0017fc:	681b      	ldr	r3, [r3, #0]
1a0017fe:	681b      	ldr	r3, [r3, #0]
1a001800:	b353      	cbz	r3, 1a001858 <xTaskIncrementTick+0xc8>
1a001802:	2300      	movs	r3, #0
1a001804:	bb53      	cbnz	r3, 1a00185c <xTaskIncrementTick+0xcc>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001806:	4b21      	ldr	r3, [pc, #132]	; (1a00188c <xTaskIncrementTick+0xfc>)
1a001808:	681b      	ldr	r3, [r3, #0]
1a00180a:	68db      	ldr	r3, [r3, #12]
1a00180c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a00180e:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a001810:	429d      	cmp	r5, r3
1a001812:	d328      	bcc.n	1a001866 <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001814:	1d37      	adds	r7, r6, #4
1a001816:	4638      	mov	r0, r7
1a001818:	f7ff fd01 	bl	1a00121e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a00181c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a00181e:	b11b      	cbz	r3, 1a001828 <xTaskIncrementTick+0x98>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001820:	f106 0018 	add.w	r0, r6, #24
1a001824:	f7ff fcfb 	bl	1a00121e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001828:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a00182a:	2201      	movs	r2, #1
1a00182c:	409a      	lsls	r2, r3
1a00182e:	491d      	ldr	r1, [pc, #116]	; (1a0018a4 <xTaskIncrementTick+0x114>)
1a001830:	6808      	ldr	r0, [r1, #0]
1a001832:	4302      	orrs	r2, r0
1a001834:	600a      	str	r2, [r1, #0]
1a001836:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00183a:	009a      	lsls	r2, r3, #2
1a00183c:	4639      	mov	r1, r7
1a00183e:	4818      	ldr	r0, [pc, #96]	; (1a0018a0 <xTaskIncrementTick+0x110>)
1a001840:	4410      	add	r0, r2
1a001842:	f7ff fcc6 	bl	1a0011d2 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001846:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001848:	4b14      	ldr	r3, [pc, #80]	; (1a00189c <xTaskIncrementTick+0x10c>)
1a00184a:	681b      	ldr	r3, [r3, #0]
1a00184c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00184e:	429a      	cmp	r2, r3
1a001850:	d2d2      	bcs.n	1a0017f8 <xTaskIncrementTick+0x68>
1a001852:	e7d2      	b.n	1a0017fa <xTaskIncrementTick+0x6a>
1a001854:	2400      	movs	r4, #0
1a001856:	e7d0      	b.n	1a0017fa <xTaskIncrementTick+0x6a>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001858:	2301      	movs	r3, #1
1a00185a:	e7d3      	b.n	1a001804 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00185c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001860:	4b0d      	ldr	r3, [pc, #52]	; (1a001898 <xTaskIncrementTick+0x108>)
1a001862:	601a      	str	r2, [r3, #0]
					break;
1a001864:	e7bc      	b.n	1a0017e0 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a001866:	4a0c      	ldr	r2, [pc, #48]	; (1a001898 <xTaskIncrementTick+0x108>)
1a001868:	6013      	str	r3, [r2, #0]
						break;
1a00186a:	e7b9      	b.n	1a0017e0 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a00186c:	4a0e      	ldr	r2, [pc, #56]	; (1a0018a8 <xTaskIncrementTick+0x118>)
1a00186e:	6813      	ldr	r3, [r2, #0]
1a001870:	3301      	adds	r3, #1
1a001872:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a001874:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a001876:	4b0d      	ldr	r3, [pc, #52]	; (1a0018ac <xTaskIncrementTick+0x11c>)
1a001878:	681b      	ldr	r3, [r3, #0]
1a00187a:	b103      	cbz	r3, 1a00187e <xTaskIncrementTick+0xee>
			xSwitchRequired = pdTRUE;
1a00187c:	2401      	movs	r4, #1
}
1a00187e:	4620      	mov	r0, r4
1a001880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001882:	bf00      	nop
1a001884:	1000318c 	.word	0x1000318c
1a001888:	10003208 	.word	0x10003208
1a00188c:	100030ec 	.word	0x100030ec
1a001890:	100030f0 	.word	0x100030f0
1a001894:	100031c4 	.word	0x100031c4
1a001898:	100031c0 	.word	0x100031c0
1a00189c:	100030e8 	.word	0x100030e8
1a0018a0:	100030f4 	.word	0x100030f4
1a0018a4:	10003194 	.word	0x10003194
1a0018a8:	10003188 	.word	0x10003188
1a0018ac:	1000320c 	.word	0x1000320c

1a0018b0 <xTaskResumeAll>:
{
1a0018b0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a0018b2:	4b35      	ldr	r3, [pc, #212]	; (1a001988 <xTaskResumeAll+0xd8>)
1a0018b4:	681b      	ldr	r3, [r3, #0]
1a0018b6:	b943      	cbnz	r3, 1a0018ca <xTaskResumeAll+0x1a>
1a0018b8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018bc:	f383 8811 	msr	BASEPRI, r3
1a0018c0:	f3bf 8f6f 	isb	sy
1a0018c4:	f3bf 8f4f 	dsb	sy
1a0018c8:	e7fe      	b.n	1a0018c8 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a0018ca:	f000 fd93 	bl	1a0023f4 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a0018ce:	4b2e      	ldr	r3, [pc, #184]	; (1a001988 <xTaskResumeAll+0xd8>)
1a0018d0:	681a      	ldr	r2, [r3, #0]
1a0018d2:	3a01      	subs	r2, #1
1a0018d4:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0018d6:	681b      	ldr	r3, [r3, #0]
1a0018d8:	2b00      	cmp	r3, #0
1a0018da:	d150      	bne.n	1a00197e <xTaskResumeAll+0xce>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a0018dc:	4b2b      	ldr	r3, [pc, #172]	; (1a00198c <xTaskResumeAll+0xdc>)
1a0018de:	681b      	ldr	r3, [r3, #0]
1a0018e0:	b923      	cbnz	r3, 1a0018ec <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a0018e2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0018e4:	f000 fda8 	bl	1a002438 <vPortExitCritical>
}
1a0018e8:	4620      	mov	r0, r4
1a0018ea:	bd38      	pop	{r3, r4, r5, pc}
1a0018ec:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a0018ee:	4b28      	ldr	r3, [pc, #160]	; (1a001990 <xTaskResumeAll+0xe0>)
1a0018f0:	681b      	ldr	r3, [r3, #0]
1a0018f2:	b31b      	cbz	r3, 1a00193c <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a0018f4:	4b26      	ldr	r3, [pc, #152]	; (1a001990 <xTaskResumeAll+0xe0>)
1a0018f6:	68db      	ldr	r3, [r3, #12]
1a0018f8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a0018fa:	f104 0018 	add.w	r0, r4, #24
1a0018fe:	f7ff fc8e 	bl	1a00121e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001902:	1d25      	adds	r5, r4, #4
1a001904:	4628      	mov	r0, r5
1a001906:	f7ff fc8a 	bl	1a00121e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a00190a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00190c:	2201      	movs	r2, #1
1a00190e:	409a      	lsls	r2, r3
1a001910:	4920      	ldr	r1, [pc, #128]	; (1a001994 <xTaskResumeAll+0xe4>)
1a001912:	6808      	ldr	r0, [r1, #0]
1a001914:	4302      	orrs	r2, r0
1a001916:	600a      	str	r2, [r1, #0]
1a001918:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00191c:	009a      	lsls	r2, r3, #2
1a00191e:	4629      	mov	r1, r5
1a001920:	481d      	ldr	r0, [pc, #116]	; (1a001998 <xTaskResumeAll+0xe8>)
1a001922:	4410      	add	r0, r2
1a001924:	f7ff fc55 	bl	1a0011d2 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001928:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00192a:	4b1c      	ldr	r3, [pc, #112]	; (1a00199c <xTaskResumeAll+0xec>)
1a00192c:	681b      	ldr	r3, [r3, #0]
1a00192e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001930:	429a      	cmp	r2, r3
1a001932:	d3dc      	bcc.n	1a0018ee <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a001934:	2201      	movs	r2, #1
1a001936:	4b1a      	ldr	r3, [pc, #104]	; (1a0019a0 <xTaskResumeAll+0xf0>)
1a001938:	601a      	str	r2, [r3, #0]
1a00193a:	e7d8      	b.n	1a0018ee <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a00193c:	b10c      	cbz	r4, 1a001942 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a00193e:	f7ff fccd 	bl	1a0012dc <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a001942:	4b18      	ldr	r3, [pc, #96]	; (1a0019a4 <xTaskResumeAll+0xf4>)
1a001944:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a001946:	b974      	cbnz	r4, 1a001966 <xTaskResumeAll+0xb6>
				if( xYieldPending != pdFALSE )
1a001948:	4b15      	ldr	r3, [pc, #84]	; (1a0019a0 <xTaskResumeAll+0xf0>)
1a00194a:	681b      	ldr	r3, [r3, #0]
1a00194c:	b1cb      	cbz	r3, 1a001982 <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
1a00194e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001952:	4b15      	ldr	r3, [pc, #84]	; (1a0019a8 <xTaskResumeAll+0xf8>)
1a001954:	601a      	str	r2, [r3, #0]
1a001956:	f3bf 8f4f 	dsb	sy
1a00195a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a00195e:	2401      	movs	r4, #1
1a001960:	e7c0      	b.n	1a0018e4 <xTaskResumeAll+0x34>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a001962:	3c01      	subs	r4, #1
1a001964:	d007      	beq.n	1a001976 <xTaskResumeAll+0xc6>
							if( xTaskIncrementTick() != pdFALSE )
1a001966:	f7ff ff13 	bl	1a001790 <xTaskIncrementTick>
1a00196a:	2800      	cmp	r0, #0
1a00196c:	d0f9      	beq.n	1a001962 <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
1a00196e:	2201      	movs	r2, #1
1a001970:	4b0b      	ldr	r3, [pc, #44]	; (1a0019a0 <xTaskResumeAll+0xf0>)
1a001972:	601a      	str	r2, [r3, #0]
1a001974:	e7f5      	b.n	1a001962 <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
1a001976:	2200      	movs	r2, #0
1a001978:	4b0a      	ldr	r3, [pc, #40]	; (1a0019a4 <xTaskResumeAll+0xf4>)
1a00197a:	601a      	str	r2, [r3, #0]
1a00197c:	e7e4      	b.n	1a001948 <xTaskResumeAll+0x98>
BaseType_t xAlreadyYielded = pdFALSE;
1a00197e:	2400      	movs	r4, #0
1a001980:	e7b0      	b.n	1a0018e4 <xTaskResumeAll+0x34>
1a001982:	2400      	movs	r4, #0
1a001984:	e7ae      	b.n	1a0018e4 <xTaskResumeAll+0x34>
1a001986:	bf00      	nop
1a001988:	1000318c 	.word	0x1000318c
1a00198c:	10003180 	.word	0x10003180
1a001990:	100031c8 	.word	0x100031c8
1a001994:	10003194 	.word	0x10003194
1a001998:	100030f4 	.word	0x100030f4
1a00199c:	100030e8 	.word	0x100030e8
1a0019a0:	1000320c 	.word	0x1000320c
1a0019a4:	10003188 	.word	0x10003188
1a0019a8:	e000ed04 	.word	0xe000ed04

1a0019ac <vTaskDelay>:
	{
1a0019ac:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a0019ae:	b1a8      	cbz	r0, 1a0019dc <vTaskDelay+0x30>
1a0019b0:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a0019b2:	4b10      	ldr	r3, [pc, #64]	; (1a0019f4 <vTaskDelay+0x48>)
1a0019b4:	681b      	ldr	r3, [r3, #0]
1a0019b6:	b143      	cbz	r3, 1a0019ca <vTaskDelay+0x1e>
1a0019b8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0019bc:	f383 8811 	msr	BASEPRI, r3
1a0019c0:	f3bf 8f6f 	isb	sy
1a0019c4:	f3bf 8f4f 	dsb	sy
1a0019c8:	e7fe      	b.n	1a0019c8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a0019ca:	f7ff fed3 	bl	1a001774 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a0019ce:	2100      	movs	r1, #0
1a0019d0:	4620      	mov	r0, r4
1a0019d2:	f7ff fdc9 	bl	1a001568 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a0019d6:	f7ff ff6b 	bl	1a0018b0 <xTaskResumeAll>
1a0019da:	e000      	b.n	1a0019de <vTaskDelay+0x32>
	BaseType_t xAlreadyYielded = pdFALSE;
1a0019dc:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
1a0019de:	b938      	cbnz	r0, 1a0019f0 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
1a0019e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0019e4:	4b04      	ldr	r3, [pc, #16]	; (1a0019f8 <vTaskDelay+0x4c>)
1a0019e6:	601a      	str	r2, [r3, #0]
1a0019e8:	f3bf 8f4f 	dsb	sy
1a0019ec:	f3bf 8f6f 	isb	sy
1a0019f0:	bd10      	pop	{r4, pc}
1a0019f2:	bf00      	nop
1a0019f4:	1000318c 	.word	0x1000318c
1a0019f8:	e000ed04 	.word	0xe000ed04

1a0019fc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a0019fc:	4b2d      	ldr	r3, [pc, #180]	; (1a001ab4 <vTaskSwitchContext+0xb8>)
1a0019fe:	681b      	ldr	r3, [r3, #0]
1a001a00:	bb53      	cbnz	r3, 1a001a58 <vTaskSwitchContext+0x5c>
{
1a001a02:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a001a04:	2200      	movs	r2, #0
1a001a06:	4b2c      	ldr	r3, [pc, #176]	; (1a001ab8 <vTaskSwitchContext+0xbc>)
1a001a08:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a001a0a:	4b2c      	ldr	r3, [pc, #176]	; (1a001abc <vTaskSwitchContext+0xc0>)
1a001a0c:	681b      	ldr	r3, [r3, #0]
1a001a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001a10:	681a      	ldr	r2, [r3, #0]
1a001a12:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001a16:	d103      	bne.n	1a001a20 <vTaskSwitchContext+0x24>
1a001a18:	685a      	ldr	r2, [r3, #4]
1a001a1a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001a1e:	d01f      	beq.n	1a001a60 <vTaskSwitchContext+0x64>
1a001a20:	4b26      	ldr	r3, [pc, #152]	; (1a001abc <vTaskSwitchContext+0xc0>)
1a001a22:	6818      	ldr	r0, [r3, #0]
1a001a24:	6819      	ldr	r1, [r3, #0]
1a001a26:	3134      	adds	r1, #52	; 0x34
1a001a28:	f7ff fc4a 	bl	1a0012c0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001a2c:	4b24      	ldr	r3, [pc, #144]	; (1a001ac0 <vTaskSwitchContext+0xc4>)
1a001a2e:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a001a30:	fab3 f383 	clz	r3, r3
1a001a34:	b2db      	uxtb	r3, r3
1a001a36:	f1c3 031f 	rsb	r3, r3, #31
1a001a3a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001a3e:	008a      	lsls	r2, r1, #2
1a001a40:	4920      	ldr	r1, [pc, #128]	; (1a001ac4 <vTaskSwitchContext+0xc8>)
1a001a42:	588a      	ldr	r2, [r1, r2]
1a001a44:	b9aa      	cbnz	r2, 1a001a72 <vTaskSwitchContext+0x76>
	__asm volatile
1a001a46:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a4a:	f383 8811 	msr	BASEPRI, r3
1a001a4e:	f3bf 8f6f 	isb	sy
1a001a52:	f3bf 8f4f 	dsb	sy
1a001a56:	e7fe      	b.n	1a001a56 <vTaskSwitchContext+0x5a>
		xYieldPending = pdTRUE;
1a001a58:	2201      	movs	r2, #1
1a001a5a:	4b17      	ldr	r3, [pc, #92]	; (1a001ab8 <vTaskSwitchContext+0xbc>)
1a001a5c:	601a      	str	r2, [r3, #0]
1a001a5e:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
1a001a60:	689a      	ldr	r2, [r3, #8]
1a001a62:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001a66:	d1db      	bne.n	1a001a20 <vTaskSwitchContext+0x24>
1a001a68:	68db      	ldr	r3, [r3, #12]
1a001a6a:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a001a6e:	d1d7      	bne.n	1a001a20 <vTaskSwitchContext+0x24>
1a001a70:	e7dc      	b.n	1a001a2c <vTaskSwitchContext+0x30>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001a72:	4814      	ldr	r0, [pc, #80]	; (1a001ac4 <vTaskSwitchContext+0xc8>)
1a001a74:	009a      	lsls	r2, r3, #2
1a001a76:	18d4      	adds	r4, r2, r3
1a001a78:	00a1      	lsls	r1, r4, #2
1a001a7a:	4401      	add	r1, r0
1a001a7c:	684c      	ldr	r4, [r1, #4]
1a001a7e:	6864      	ldr	r4, [r4, #4]
1a001a80:	604c      	str	r4, [r1, #4]
1a001a82:	441a      	add	r2, r3
1a001a84:	0091      	lsls	r1, r2, #2
1a001a86:	3108      	adds	r1, #8
1a001a88:	4408      	add	r0, r1
1a001a8a:	4284      	cmp	r4, r0
1a001a8c:	d009      	beq.n	1a001aa2 <vTaskSwitchContext+0xa6>
1a001a8e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001a92:	009a      	lsls	r2, r3, #2
1a001a94:	4b0b      	ldr	r3, [pc, #44]	; (1a001ac4 <vTaskSwitchContext+0xc8>)
1a001a96:	4413      	add	r3, r2
1a001a98:	685b      	ldr	r3, [r3, #4]
1a001a9a:	68da      	ldr	r2, [r3, #12]
1a001a9c:	4b07      	ldr	r3, [pc, #28]	; (1a001abc <vTaskSwitchContext+0xc0>)
1a001a9e:	601a      	str	r2, [r3, #0]
1a001aa0:	bd10      	pop	{r4, pc}
1a001aa2:	6860      	ldr	r0, [r4, #4]
1a001aa4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a001aa8:	0091      	lsls	r1, r2, #2
1a001aaa:	4a06      	ldr	r2, [pc, #24]	; (1a001ac4 <vTaskSwitchContext+0xc8>)
1a001aac:	440a      	add	r2, r1
1a001aae:	6050      	str	r0, [r2, #4]
1a001ab0:	e7ed      	b.n	1a001a8e <vTaskSwitchContext+0x92>
1a001ab2:	bf00      	nop
1a001ab4:	1000318c 	.word	0x1000318c
1a001ab8:	1000320c 	.word	0x1000320c
1a001abc:	100030e8 	.word	0x100030e8
1a001ac0:	10003194 	.word	0x10003194
1a001ac4:	100030f4 	.word	0x100030f4

1a001ac8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a001ac8:	b940      	cbnz	r0, 1a001adc <vTaskPlaceOnEventList+0x14>
1a001aca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ace:	f383 8811 	msr	BASEPRI, r3
1a001ad2:	f3bf 8f6f 	isb	sy
1a001ad6:	f3bf 8f4f 	dsb	sy
1a001ada:	e7fe      	b.n	1a001ada <vTaskPlaceOnEventList+0x12>
{
1a001adc:	b510      	push	{r4, lr}
1a001ade:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001ae0:	4b04      	ldr	r3, [pc, #16]	; (1a001af4 <vTaskPlaceOnEventList+0x2c>)
1a001ae2:	6819      	ldr	r1, [r3, #0]
1a001ae4:	3118      	adds	r1, #24
1a001ae6:	f7ff fb80 	bl	1a0011ea <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a001aea:	2101      	movs	r1, #1
1a001aec:	4620      	mov	r0, r4
1a001aee:	f7ff fd3b 	bl	1a001568 <prvAddCurrentTaskToDelayedList>
1a001af2:	bd10      	pop	{r4, pc}
1a001af4:	100030e8 	.word	0x100030e8

1a001af8 <vTaskPlaceOnEventListRestricted>:
	{
1a001af8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a001afa:	b170      	cbz	r0, 1a001b1a <vTaskPlaceOnEventListRestricted+0x22>
1a001afc:	460c      	mov	r4, r1
1a001afe:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001b00:	4a0a      	ldr	r2, [pc, #40]	; (1a001b2c <vTaskPlaceOnEventListRestricted+0x34>)
1a001b02:	6811      	ldr	r1, [r2, #0]
1a001b04:	3118      	adds	r1, #24
1a001b06:	f7ff fb64 	bl	1a0011d2 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a001b0a:	b10d      	cbz	r5, 1a001b10 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
1a001b0c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a001b10:	4629      	mov	r1, r5
1a001b12:	4620      	mov	r0, r4
1a001b14:	f7ff fd28 	bl	1a001568 <prvAddCurrentTaskToDelayedList>
1a001b18:	bd38      	pop	{r3, r4, r5, pc}
1a001b1a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b1e:	f383 8811 	msr	BASEPRI, r3
1a001b22:	f3bf 8f6f 	isb	sy
1a001b26:	f3bf 8f4f 	dsb	sy
1a001b2a:	e7fe      	b.n	1a001b2a <vTaskPlaceOnEventListRestricted+0x32>
1a001b2c:	100030e8 	.word	0x100030e8

1a001b30 <xTaskRemoveFromEventList>:
{
1a001b30:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a001b32:	68c3      	ldr	r3, [r0, #12]
1a001b34:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a001b36:	b324      	cbz	r4, 1a001b82 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a001b38:	f104 0518 	add.w	r5, r4, #24
1a001b3c:	4628      	mov	r0, r5
1a001b3e:	f7ff fb6e 	bl	1a00121e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001b42:	4b18      	ldr	r3, [pc, #96]	; (1a001ba4 <xTaskRemoveFromEventList+0x74>)
1a001b44:	681b      	ldr	r3, [r3, #0]
1a001b46:	bb2b      	cbnz	r3, 1a001b94 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a001b48:	1d25      	adds	r5, r4, #4
1a001b4a:	4628      	mov	r0, r5
1a001b4c:	f7ff fb67 	bl	1a00121e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a001b50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001b52:	2201      	movs	r2, #1
1a001b54:	409a      	lsls	r2, r3
1a001b56:	4914      	ldr	r1, [pc, #80]	; (1a001ba8 <xTaskRemoveFromEventList+0x78>)
1a001b58:	6808      	ldr	r0, [r1, #0]
1a001b5a:	4302      	orrs	r2, r0
1a001b5c:	600a      	str	r2, [r1, #0]
1a001b5e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001b62:	009a      	lsls	r2, r3, #2
1a001b64:	4629      	mov	r1, r5
1a001b66:	4811      	ldr	r0, [pc, #68]	; (1a001bac <xTaskRemoveFromEventList+0x7c>)
1a001b68:	4410      	add	r0, r2
1a001b6a:	f7ff fb32 	bl	1a0011d2 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a001b6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001b70:	4b0f      	ldr	r3, [pc, #60]	; (1a001bb0 <xTaskRemoveFromEventList+0x80>)
1a001b72:	681b      	ldr	r3, [r3, #0]
1a001b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001b76:	429a      	cmp	r2, r3
1a001b78:	d911      	bls.n	1a001b9e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a001b7a:	2001      	movs	r0, #1
1a001b7c:	4b0d      	ldr	r3, [pc, #52]	; (1a001bb4 <xTaskRemoveFromEventList+0x84>)
1a001b7e:	6018      	str	r0, [r3, #0]
1a001b80:	bd38      	pop	{r3, r4, r5, pc}
1a001b82:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b86:	f383 8811 	msr	BASEPRI, r3
1a001b8a:	f3bf 8f6f 	isb	sy
1a001b8e:	f3bf 8f4f 	dsb	sy
1a001b92:	e7fe      	b.n	1a001b92 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a001b94:	4629      	mov	r1, r5
1a001b96:	4808      	ldr	r0, [pc, #32]	; (1a001bb8 <xTaskRemoveFromEventList+0x88>)
1a001b98:	f7ff fb1b 	bl	1a0011d2 <vListInsertEnd>
1a001b9c:	e7e7      	b.n	1a001b6e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
1a001b9e:	2000      	movs	r0, #0
}
1a001ba0:	bd38      	pop	{r3, r4, r5, pc}
1a001ba2:	bf00      	nop
1a001ba4:	1000318c 	.word	0x1000318c
1a001ba8:	10003194 	.word	0x10003194
1a001bac:	100030f4 	.word	0x100030f4
1a001bb0:	100030e8 	.word	0x100030e8
1a001bb4:	1000320c 	.word	0x1000320c
1a001bb8:	100031c8 	.word	0x100031c8

1a001bbc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a001bbc:	4b03      	ldr	r3, [pc, #12]	; (1a001bcc <vTaskInternalSetTimeOutState+0x10>)
1a001bbe:	681b      	ldr	r3, [r3, #0]
1a001bc0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a001bc2:	4b03      	ldr	r3, [pc, #12]	; (1a001bd0 <vTaskInternalSetTimeOutState+0x14>)
1a001bc4:	681b      	ldr	r3, [r3, #0]
1a001bc6:	6043      	str	r3, [r0, #4]
1a001bc8:	4770      	bx	lr
1a001bca:	bf00      	nop
1a001bcc:	100031c4 	.word	0x100031c4
1a001bd0:	10003208 	.word	0x10003208

1a001bd4 <xTaskCheckForTimeOut>:
{
1a001bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a001bd6:	b1e0      	cbz	r0, 1a001c12 <xTaskCheckForTimeOut+0x3e>
1a001bd8:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a001bda:	b319      	cbz	r1, 1a001c24 <xTaskCheckForTimeOut+0x50>
1a001bdc:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a001bde:	f000 fc09 	bl	1a0023f4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a001be2:	4b1a      	ldr	r3, [pc, #104]	; (1a001c4c <xTaskCheckForTimeOut+0x78>)
1a001be4:	6818      	ldr	r0, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a001be6:	6869      	ldr	r1, [r5, #4]
1a001be8:	1a42      	subs	r2, r0, r1
			if( *pxTicksToWait == portMAX_DELAY )
1a001bea:	6823      	ldr	r3, [r4, #0]
1a001bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001bf0:	d028      	beq.n	1a001c44 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a001bf2:	682f      	ldr	r7, [r5, #0]
1a001bf4:	4e16      	ldr	r6, [pc, #88]	; (1a001c50 <xTaskCheckForTimeOut+0x7c>)
1a001bf6:	6836      	ldr	r6, [r6, #0]
1a001bf8:	42b7      	cmp	r7, r6
1a001bfa:	d001      	beq.n	1a001c00 <xTaskCheckForTimeOut+0x2c>
1a001bfc:	4288      	cmp	r0, r1
1a001bfe:	d223      	bcs.n	1a001c48 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a001c00:	429a      	cmp	r2, r3
1a001c02:	d318      	bcc.n	1a001c36 <xTaskCheckForTimeOut+0x62>
			*pxTicksToWait = 0;
1a001c04:	2300      	movs	r3, #0
1a001c06:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a001c08:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
1a001c0a:	f000 fc15 	bl	1a002438 <vPortExitCritical>
}
1a001c0e:	4620      	mov	r0, r4
1a001c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001c12:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c16:	f383 8811 	msr	BASEPRI, r3
1a001c1a:	f3bf 8f6f 	isb	sy
1a001c1e:	f3bf 8f4f 	dsb	sy
1a001c22:	e7fe      	b.n	1a001c22 <xTaskCheckForTimeOut+0x4e>
1a001c24:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c28:	f383 8811 	msr	BASEPRI, r3
1a001c2c:	f3bf 8f6f 	isb	sy
1a001c30:	f3bf 8f4f 	dsb	sy
1a001c34:	e7fe      	b.n	1a001c34 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= xElapsedTime;
1a001c36:	1a9b      	subs	r3, r3, r2
1a001c38:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a001c3a:	4628      	mov	r0, r5
1a001c3c:	f7ff ffbe 	bl	1a001bbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a001c40:	2400      	movs	r4, #0
1a001c42:	e7e2      	b.n	1a001c0a <xTaskCheckForTimeOut+0x36>
				xReturn = pdFALSE;
1a001c44:	2400      	movs	r4, #0
1a001c46:	e7e0      	b.n	1a001c0a <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
1a001c48:	2401      	movs	r4, #1
1a001c4a:	e7de      	b.n	1a001c0a <xTaskCheckForTimeOut+0x36>
1a001c4c:	10003208 	.word	0x10003208
1a001c50:	100031c4 	.word	0x100031c4

1a001c54 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a001c54:	2201      	movs	r2, #1
1a001c56:	4b01      	ldr	r3, [pc, #4]	; (1a001c5c <vTaskMissedYield+0x8>)
1a001c58:	601a      	str	r2, [r3, #0]
1a001c5a:	4770      	bx	lr
1a001c5c:	1000320c 	.word	0x1000320c

1a001c60 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a001c60:	4b05      	ldr	r3, [pc, #20]	; (1a001c78 <xTaskGetSchedulerState+0x18>)
1a001c62:	681b      	ldr	r3, [r3, #0]
1a001c64:	b123      	cbz	r3, 1a001c70 <xTaskGetSchedulerState+0x10>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001c66:	4b05      	ldr	r3, [pc, #20]	; (1a001c7c <xTaskGetSchedulerState+0x1c>)
1a001c68:	681b      	ldr	r3, [r3, #0]
1a001c6a:	b91b      	cbnz	r3, 1a001c74 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_RUNNING;
1a001c6c:	2002      	movs	r0, #2
1a001c6e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a001c70:	2001      	movs	r0, #1
1a001c72:	4770      	bx	lr
				xReturn = taskSCHEDULER_SUSPENDED;
1a001c74:	2000      	movs	r0, #0
	}
1a001c76:	4770      	bx	lr
1a001c78:	100031dc 	.word	0x100031dc
1a001c7c:	1000318c 	.word	0x1000318c

1a001c80 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
1a001c80:	2800      	cmp	r0, #0
1a001c82:	d054      	beq.n	1a001d2e <xTaskPriorityInherit+0xae>
	{
1a001c84:	b538      	push	{r3, r4, r5, lr}
1a001c86:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
1a001c88:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
1a001c8a:	492a      	ldr	r1, [pc, #168]	; (1a001d34 <xTaskPriorityInherit+0xb4>)
1a001c8c:	6809      	ldr	r1, [r1, #0]
1a001c8e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a001c90:	428a      	cmp	r2, r1
1a001c92:	d242      	bcs.n	1a001d1a <xTaskPriorityInherit+0x9a>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a001c94:	6981      	ldr	r1, [r0, #24]
1a001c96:	2900      	cmp	r1, #0
1a001c98:	db05      	blt.n	1a001ca6 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001c9a:	4926      	ldr	r1, [pc, #152]	; (1a001d34 <xTaskPriorityInherit+0xb4>)
1a001c9c:	6809      	ldr	r1, [r1, #0]
1a001c9e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a001ca0:	f1c1 0107 	rsb	r1, r1, #7
1a001ca4:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
1a001ca6:	6960      	ldr	r0, [r4, #20]
1a001ca8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a001cac:	0091      	lsls	r1, r2, #2
1a001cae:	4a22      	ldr	r2, [pc, #136]	; (1a001d38 <xTaskPriorityInherit+0xb8>)
1a001cb0:	440a      	add	r2, r1
1a001cb2:	4290      	cmp	r0, r2
1a001cb4:	d007      	beq.n	1a001cc6 <xTaskPriorityInherit+0x46>
1a001cb6:	2200      	movs	r2, #0
1a001cb8:	b93a      	cbnz	r2, 1a001cca <xTaskPriorityInherit+0x4a>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a001cba:	4a1e      	ldr	r2, [pc, #120]	; (1a001d34 <xTaskPriorityInherit+0xb4>)
1a001cbc:	6812      	ldr	r2, [r2, #0]
1a001cbe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a001cc0:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
1a001cc2:	2001      	movs	r0, #1
1a001cc4:	bd38      	pop	{r3, r4, r5, pc}
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
1a001cc6:	2201      	movs	r2, #1
1a001cc8:	e7f6      	b.n	1a001cb8 <xTaskPriorityInherit+0x38>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001cca:	1d25      	adds	r5, r4, #4
1a001ccc:	4628      	mov	r0, r5
1a001cce:	f7ff faa6 	bl	1a00121e <uxListRemove>
1a001cd2:	b968      	cbnz	r0, 1a001cf0 <xTaskPriorityInherit+0x70>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
1a001cd4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001cd6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001cda:	008a      	lsls	r2, r1, #2
1a001cdc:	4916      	ldr	r1, [pc, #88]	; (1a001d38 <xTaskPriorityInherit+0xb8>)
1a001cde:	588a      	ldr	r2, [r1, r2]
1a001ce0:	b932      	cbnz	r2, 1a001cf0 <xTaskPriorityInherit+0x70>
1a001ce2:	2201      	movs	r2, #1
1a001ce4:	409a      	lsls	r2, r3
1a001ce6:	4915      	ldr	r1, [pc, #84]	; (1a001d3c <xTaskPriorityInherit+0xbc>)
1a001ce8:	680b      	ldr	r3, [r1, #0]
1a001cea:	ea23 0302 	bic.w	r3, r3, r2
1a001cee:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a001cf0:	4b10      	ldr	r3, [pc, #64]	; (1a001d34 <xTaskPriorityInherit+0xb4>)
1a001cf2:	681b      	ldr	r3, [r3, #0]
1a001cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001cf6:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
1a001cf8:	2401      	movs	r4, #1
1a001cfa:	fa04 f203 	lsl.w	r2, r4, r3
1a001cfe:	490f      	ldr	r1, [pc, #60]	; (1a001d3c <xTaskPriorityInherit+0xbc>)
1a001d00:	6808      	ldr	r0, [r1, #0]
1a001d02:	4302      	orrs	r2, r0
1a001d04:	600a      	str	r2, [r1, #0]
1a001d06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001d0a:	009a      	lsls	r2, r3, #2
1a001d0c:	4629      	mov	r1, r5
1a001d0e:	480a      	ldr	r0, [pc, #40]	; (1a001d38 <xTaskPriorityInherit+0xb8>)
1a001d10:	4410      	add	r0, r2
1a001d12:	f7ff fa5e 	bl	1a0011d2 <vListInsertEnd>
				xReturn = pdTRUE;
1a001d16:	4620      	mov	r0, r4
1a001d18:	bd38      	pop	{r3, r4, r5, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
1a001d1a:	6d02      	ldr	r2, [r0, #80]	; 0x50
1a001d1c:	4b05      	ldr	r3, [pc, #20]	; (1a001d34 <xTaskPriorityInherit+0xb4>)
1a001d1e:	681b      	ldr	r3, [r3, #0]
1a001d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001d22:	429a      	cmp	r2, r3
1a001d24:	d201      	bcs.n	1a001d2a <xTaskPriorityInherit+0xaa>
					xReturn = pdTRUE;
1a001d26:	2001      	movs	r0, #1
	}
1a001d28:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a001d2a:	2000      	movs	r0, #0
1a001d2c:	bd38      	pop	{r3, r4, r5, pc}
1a001d2e:	2000      	movs	r0, #0
1a001d30:	4770      	bx	lr
1a001d32:	bf00      	nop
1a001d34:	100030e8 	.word	0x100030e8
1a001d38:	100030f4 	.word	0x100030f4
1a001d3c:	10003194 	.word	0x10003194

1a001d40 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a001d40:	2800      	cmp	r0, #0
1a001d42:	d04a      	beq.n	1a001dda <xTaskPriorityDisinherit+0x9a>
	{
1a001d44:	b538      	push	{r3, r4, r5, lr}
1a001d46:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a001d48:	4a27      	ldr	r2, [pc, #156]	; (1a001de8 <xTaskPriorityDisinherit+0xa8>)
1a001d4a:	6812      	ldr	r2, [r2, #0]
1a001d4c:	4290      	cmp	r0, r2
1a001d4e:	d008      	beq.n	1a001d62 <xTaskPriorityDisinherit+0x22>
1a001d50:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d54:	f383 8811 	msr	BASEPRI, r3
1a001d58:	f3bf 8f6f 	isb	sy
1a001d5c:	f3bf 8f4f 	dsb	sy
1a001d60:	e7fe      	b.n	1a001d60 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a001d62:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a001d64:	b942      	cbnz	r2, 1a001d78 <xTaskPriorityDisinherit+0x38>
1a001d66:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d6a:	f383 8811 	msr	BASEPRI, r3
1a001d6e:	f3bf 8f6f 	isb	sy
1a001d72:	f3bf 8f4f 	dsb	sy
1a001d76:	e7fe      	b.n	1a001d76 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a001d78:	3a01      	subs	r2, #1
1a001d7a:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a001d7c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a001d7e:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a001d80:	4288      	cmp	r0, r1
1a001d82:	d02c      	beq.n	1a001dde <xTaskPriorityDisinherit+0x9e>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a001d84:	bb6a      	cbnz	r2, 1a001de2 <xTaskPriorityDisinherit+0xa2>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001d86:	1d25      	adds	r5, r4, #4
1a001d88:	4628      	mov	r0, r5
1a001d8a:	f7ff fa48 	bl	1a00121e <uxListRemove>
1a001d8e:	b970      	cbnz	r0, 1a001dae <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001d90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001d92:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a001d96:	008b      	lsls	r3, r1, #2
1a001d98:	4914      	ldr	r1, [pc, #80]	; (1a001dec <xTaskPriorityDisinherit+0xac>)
1a001d9a:	58cb      	ldr	r3, [r1, r3]
1a001d9c:	b93b      	cbnz	r3, 1a001dae <xTaskPriorityDisinherit+0x6e>
1a001d9e:	2301      	movs	r3, #1
1a001da0:	fa03 f202 	lsl.w	r2, r3, r2
1a001da4:	4912      	ldr	r1, [pc, #72]	; (1a001df0 <xTaskPriorityDisinherit+0xb0>)
1a001da6:	680b      	ldr	r3, [r1, #0]
1a001da8:	ea23 0302 	bic.w	r3, r3, r2
1a001dac:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a001dae:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a001db0:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001db2:	f1c3 0207 	rsb	r2, r3, #7
1a001db6:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a001db8:	2401      	movs	r4, #1
1a001dba:	fa04 f203 	lsl.w	r2, r4, r3
1a001dbe:	490c      	ldr	r1, [pc, #48]	; (1a001df0 <xTaskPriorityDisinherit+0xb0>)
1a001dc0:	6808      	ldr	r0, [r1, #0]
1a001dc2:	4302      	orrs	r2, r0
1a001dc4:	600a      	str	r2, [r1, #0]
1a001dc6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001dca:	009a      	lsls	r2, r3, #2
1a001dcc:	4629      	mov	r1, r5
1a001dce:	4807      	ldr	r0, [pc, #28]	; (1a001dec <xTaskPriorityDisinherit+0xac>)
1a001dd0:	4410      	add	r0, r2
1a001dd2:	f7ff f9fe 	bl	1a0011d2 <vListInsertEnd>
					xReturn = pdTRUE;
1a001dd6:	4620      	mov	r0, r4
1a001dd8:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a001dda:	2000      	movs	r0, #0
1a001ddc:	4770      	bx	lr
1a001dde:	2000      	movs	r0, #0
1a001de0:	bd38      	pop	{r3, r4, r5, pc}
1a001de2:	2000      	movs	r0, #0
	}
1a001de4:	bd38      	pop	{r3, r4, r5, pc}
1a001de6:	bf00      	nop
1a001de8:	100030e8 	.word	0x100030e8
1a001dec:	100030f4 	.word	0x100030f4
1a001df0:	10003194 	.word	0x10003194

1a001df4 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
1a001df4:	2800      	cmp	r0, #0
1a001df6:	d05b      	beq.n	1a001eb0 <vTaskPriorityDisinheritAfterTimeout+0xbc>
	{
1a001df8:	b538      	push	{r3, r4, r5, lr}
1a001dfa:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
1a001dfc:	6d40      	ldr	r0, [r0, #84]	; 0x54
1a001dfe:	b940      	cbnz	r0, 1a001e12 <vTaskPriorityDisinheritAfterTimeout+0x1e>
1a001e00:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e04:	f383 8811 	msr	BASEPRI, r3
1a001e08:	f3bf 8f6f 	isb	sy
1a001e0c:	f3bf 8f4f 	dsb	sy
1a001e10:	e7fe      	b.n	1a001e10 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
1a001e12:	6d22      	ldr	r2, [r4, #80]	; 0x50
1a001e14:	428a      	cmp	r2, r1
1a001e16:	d200      	bcs.n	1a001e1a <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
1a001e18:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
1a001e1a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
1a001e1c:	428a      	cmp	r2, r1
1a001e1e:	d001      	beq.n	1a001e24 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
1a001e20:	2801      	cmp	r0, #1
1a001e22:	d000      	beq.n	1a001e26 <vTaskPriorityDisinheritAfterTimeout+0x32>
1a001e24:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
1a001e26:	4823      	ldr	r0, [pc, #140]	; (1a001eb4 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
1a001e28:	6800      	ldr	r0, [r0, #0]
1a001e2a:	4284      	cmp	r4, r0
1a001e2c:	d108      	bne.n	1a001e40 <vTaskPriorityDisinheritAfterTimeout+0x4c>
1a001e2e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e32:	f383 8811 	msr	BASEPRI, r3
1a001e36:	f3bf 8f6f 	isb	sy
1a001e3a:	f3bf 8f4f 	dsb	sy
1a001e3e:	e7fe      	b.n	1a001e3e <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
1a001e40:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a001e42:	69a0      	ldr	r0, [r4, #24]
1a001e44:	2800      	cmp	r0, #0
1a001e46:	db02      	blt.n	1a001e4e <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001e48:	f1c2 0207 	rsb	r2, r2, #7
1a001e4c:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
1a001e4e:	6963      	ldr	r3, [r4, #20]
1a001e50:	eb01 0181 	add.w	r1, r1, r1, lsl #2
1a001e54:	0088      	lsls	r0, r1, #2
1a001e56:	4a18      	ldr	r2, [pc, #96]	; (1a001eb8 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
1a001e58:	4402      	add	r2, r0
1a001e5a:	4293      	cmp	r3, r2
1a001e5c:	d126      	bne.n	1a001eac <vTaskPriorityDisinheritAfterTimeout+0xb8>
1a001e5e:	2201      	movs	r2, #1
1a001e60:	2a00      	cmp	r2, #0
1a001e62:	d0df      	beq.n	1a001e24 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001e64:	1d25      	adds	r5, r4, #4
1a001e66:	4628      	mov	r0, r5
1a001e68:	f7ff f9d9 	bl	1a00121e <uxListRemove>
1a001e6c:	b970      	cbnz	r0, 1a001e8c <vTaskPriorityDisinheritAfterTimeout+0x98>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001e6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001e70:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a001e74:	008b      	lsls	r3, r1, #2
1a001e76:	4910      	ldr	r1, [pc, #64]	; (1a001eb8 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
1a001e78:	58cb      	ldr	r3, [r1, r3]
1a001e7a:	b93b      	cbnz	r3, 1a001e8c <vTaskPriorityDisinheritAfterTimeout+0x98>
1a001e7c:	2301      	movs	r3, #1
1a001e7e:	fa03 f202 	lsl.w	r2, r3, r2
1a001e82:	490e      	ldr	r1, [pc, #56]	; (1a001ebc <vTaskPriorityDisinheritAfterTimeout+0xc8>)
1a001e84:	680b      	ldr	r3, [r1, #0]
1a001e86:	ea23 0302 	bic.w	r3, r3, r2
1a001e8a:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
1a001e8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001e8e:	2201      	movs	r2, #1
1a001e90:	409a      	lsls	r2, r3
1a001e92:	490a      	ldr	r1, [pc, #40]	; (1a001ebc <vTaskPriorityDisinheritAfterTimeout+0xc8>)
1a001e94:	6808      	ldr	r0, [r1, #0]
1a001e96:	4302      	orrs	r2, r0
1a001e98:	600a      	str	r2, [r1, #0]
1a001e9a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001e9e:	009a      	lsls	r2, r3, #2
1a001ea0:	4629      	mov	r1, r5
1a001ea2:	4805      	ldr	r0, [pc, #20]	; (1a001eb8 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
1a001ea4:	4410      	add	r0, r2
1a001ea6:	f7ff f994 	bl	1a0011d2 <vListInsertEnd>
	}
1a001eaa:	e7bb      	b.n	1a001e24 <vTaskPriorityDisinheritAfterTimeout+0x30>
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
1a001eac:	2200      	movs	r2, #0
1a001eae:	e7d7      	b.n	1a001e60 <vTaskPriorityDisinheritAfterTimeout+0x6c>
1a001eb0:	4770      	bx	lr
1a001eb2:	bf00      	nop
1a001eb4:	100030e8 	.word	0x100030e8
1a001eb8:	100030f4 	.word	0x100030f4
1a001ebc:	10003194 	.word	0x10003194

1a001ec0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
1a001ec0:	4b05      	ldr	r3, [pc, #20]	; (1a001ed8 <pvTaskIncrementMutexHeldCount+0x18>)
1a001ec2:	681b      	ldr	r3, [r3, #0]
1a001ec4:	b123      	cbz	r3, 1a001ed0 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
1a001ec6:	4b04      	ldr	r3, [pc, #16]	; (1a001ed8 <pvTaskIncrementMutexHeldCount+0x18>)
1a001ec8:	681a      	ldr	r2, [r3, #0]
1a001eca:	6d53      	ldr	r3, [r2, #84]	; 0x54
1a001ecc:	3301      	adds	r3, #1
1a001ece:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
1a001ed0:	4b01      	ldr	r3, [pc, #4]	; (1a001ed8 <pvTaskIncrementMutexHeldCount+0x18>)
1a001ed2:	6818      	ldr	r0, [r3, #0]
	}
1a001ed4:	4770      	bx	lr
1a001ed6:	bf00      	nop
1a001ed8:	100030e8 	.word	0x100030e8

1a001edc <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a001edc:	4b06      	ldr	r3, [pc, #24]	; (1a001ef8 <prvGetNextExpireTime+0x1c>)
1a001ede:	681a      	ldr	r2, [r3, #0]
1a001ee0:	6813      	ldr	r3, [r2, #0]
1a001ee2:	fab3 f383 	clz	r3, r3
1a001ee6:	095b      	lsrs	r3, r3, #5
1a001ee8:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a001eea:	b913      	cbnz	r3, 1a001ef2 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001eec:	68d3      	ldr	r3, [r2, #12]
1a001eee:	6818      	ldr	r0, [r3, #0]
1a001ef0:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a001ef2:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a001ef4:	4770      	bx	lr
1a001ef6:	bf00      	nop
1a001ef8:	10003210 	.word	0x10003210

1a001efc <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a001efc:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a001efe:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001f00:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a001f02:	4291      	cmp	r1, r2
1a001f04:	d80c      	bhi.n	1a001f20 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001f06:	1ad2      	subs	r2, r2, r3
1a001f08:	6983      	ldr	r3, [r0, #24]
1a001f0a:	429a      	cmp	r2, r3
1a001f0c:	d301      	bcc.n	1a001f12 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a001f0e:	2001      	movs	r0, #1
1a001f10:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a001f12:	1d01      	adds	r1, r0, #4
1a001f14:	4b09      	ldr	r3, [pc, #36]	; (1a001f3c <prvInsertTimerInActiveList+0x40>)
1a001f16:	6818      	ldr	r0, [r3, #0]
1a001f18:	f7ff f967 	bl	1a0011ea <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001f1c:	2000      	movs	r0, #0
1a001f1e:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a001f20:	429a      	cmp	r2, r3
1a001f22:	d201      	bcs.n	1a001f28 <prvInsertTimerInActiveList+0x2c>
1a001f24:	4299      	cmp	r1, r3
1a001f26:	d206      	bcs.n	1a001f36 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001f28:	1d01      	adds	r1, r0, #4
1a001f2a:	4b05      	ldr	r3, [pc, #20]	; (1a001f40 <prvInsertTimerInActiveList+0x44>)
1a001f2c:	6818      	ldr	r0, [r3, #0]
1a001f2e:	f7ff f95c 	bl	1a0011ea <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001f32:	2000      	movs	r0, #0
1a001f34:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a001f36:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
1a001f38:	bd08      	pop	{r3, pc}
1a001f3a:	bf00      	nop
1a001f3c:	10003214 	.word	0x10003214
1a001f40:	10003210 	.word	0x10003210

1a001f44 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a001f44:	b530      	push	{r4, r5, lr}
1a001f46:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a001f48:	f000 fa54 	bl	1a0023f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a001f4c:	4b11      	ldr	r3, [pc, #68]	; (1a001f94 <prvCheckForValidListAndQueue+0x50>)
1a001f4e:	681b      	ldr	r3, [r3, #0]
1a001f50:	b11b      	cbz	r3, 1a001f5a <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a001f52:	f000 fa71 	bl	1a002438 <vPortExitCritical>
}
1a001f56:	b003      	add	sp, #12
1a001f58:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a001f5a:	4d0f      	ldr	r5, [pc, #60]	; (1a001f98 <prvCheckForValidListAndQueue+0x54>)
1a001f5c:	4628      	mov	r0, r5
1a001f5e:	f7ff f92a 	bl	1a0011b6 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a001f62:	4c0e      	ldr	r4, [pc, #56]	; (1a001f9c <prvCheckForValidListAndQueue+0x58>)
1a001f64:	4620      	mov	r0, r4
1a001f66:	f7ff f926 	bl	1a0011b6 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a001f6a:	4b0d      	ldr	r3, [pc, #52]	; (1a001fa0 <prvCheckForValidListAndQueue+0x5c>)
1a001f6c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a001f6e:	4b0d      	ldr	r3, [pc, #52]	; (1a001fa4 <prvCheckForValidListAndQueue+0x60>)
1a001f70:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a001f72:	2300      	movs	r3, #0
1a001f74:	9300      	str	r3, [sp, #0]
1a001f76:	4b0c      	ldr	r3, [pc, #48]	; (1a001fa8 <prvCheckForValidListAndQueue+0x64>)
1a001f78:	4a0c      	ldr	r2, [pc, #48]	; (1a001fac <prvCheckForValidListAndQueue+0x68>)
1a001f7a:	2110      	movs	r1, #16
1a001f7c:	200a      	movs	r0, #10
1a001f7e:	f7fe fd92 	bl	1a000aa6 <xQueueGenericCreateStatic>
1a001f82:	4b04      	ldr	r3, [pc, #16]	; (1a001f94 <prvCheckForValidListAndQueue+0x50>)
1a001f84:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a001f86:	2800      	cmp	r0, #0
1a001f88:	d0e3      	beq.n	1a001f52 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a001f8a:	4909      	ldr	r1, [pc, #36]	; (1a001fb0 <prvCheckForValidListAndQueue+0x6c>)
1a001f8c:	f7ff f8d6 	bl	1a00113c <vQueueAddToRegistry>
1a001f90:	e7df      	b.n	1a001f52 <prvCheckForValidListAndQueue+0xe>
1a001f92:	bf00      	nop
1a001f94:	10003334 	.word	0x10003334
1a001f98:	100032b8 	.word	0x100032b8
1a001f9c:	100032cc 	.word	0x100032cc
1a001fa0:	10003210 	.word	0x10003210
1a001fa4:	10003214 	.word	0x10003214
1a001fa8:	100032e4 	.word	0x100032e4
1a001fac:	10003218 	.word	0x10003218
1a001fb0:	1a00a038 	.word	0x1a00a038

1a001fb4 <xTimerCreateTimerTask>:
{
1a001fb4:	b510      	push	{r4, lr}
1a001fb6:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a001fb8:	f7ff ffc4 	bl	1a001f44 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a001fbc:	4b15      	ldr	r3, [pc, #84]	; (1a002014 <xTimerCreateTimerTask+0x60>)
1a001fbe:	681b      	ldr	r3, [r3, #0]
1a001fc0:	b31b      	cbz	r3, 1a00200a <xTimerCreateTimerTask+0x56>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a001fc2:	2400      	movs	r4, #0
1a001fc4:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a001fc6:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a001fc8:	aa07      	add	r2, sp, #28
1a001fca:	a906      	add	r1, sp, #24
1a001fcc:	a805      	add	r0, sp, #20
1a001fce:	f7ff f947 	bl	1a001260 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a001fd2:	9b05      	ldr	r3, [sp, #20]
1a001fd4:	9302      	str	r3, [sp, #8]
1a001fd6:	9b06      	ldr	r3, [sp, #24]
1a001fd8:	9301      	str	r3, [sp, #4]
1a001fda:	2304      	movs	r3, #4
1a001fdc:	9300      	str	r3, [sp, #0]
1a001fde:	4623      	mov	r3, r4
1a001fe0:	9a07      	ldr	r2, [sp, #28]
1a001fe2:	490d      	ldr	r1, [pc, #52]	; (1a002018 <xTimerCreateTimerTask+0x64>)
1a001fe4:	480d      	ldr	r0, [pc, #52]	; (1a00201c <xTimerCreateTimerTask+0x68>)
1a001fe6:	f7ff fb0b 	bl	1a001600 <xTaskCreateStatic>
1a001fea:	4b0d      	ldr	r3, [pc, #52]	; (1a002020 <xTimerCreateTimerTask+0x6c>)
1a001fec:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a001fee:	b150      	cbz	r0, 1a002006 <xTimerCreateTimerTask+0x52>
				xReturn = pdPASS;
1a001ff0:	2001      	movs	r0, #1
	configASSERT( xReturn );
1a001ff2:	b960      	cbnz	r0, 1a00200e <xTimerCreateTimerTask+0x5a>
1a001ff4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ff8:	f383 8811 	msr	BASEPRI, r3
1a001ffc:	f3bf 8f6f 	isb	sy
1a002000:	f3bf 8f4f 	dsb	sy
1a002004:	e7fe      	b.n	1a002004 <xTimerCreateTimerTask+0x50>
BaseType_t xReturn = pdFAIL;
1a002006:	4620      	mov	r0, r4
1a002008:	e7f3      	b.n	1a001ff2 <xTimerCreateTimerTask+0x3e>
1a00200a:	2000      	movs	r0, #0
1a00200c:	e7f1      	b.n	1a001ff2 <xTimerCreateTimerTask+0x3e>
}
1a00200e:	b008      	add	sp, #32
1a002010:	bd10      	pop	{r4, pc}
1a002012:	bf00      	nop
1a002014:	10003334 	.word	0x10003334
1a002018:	1a00a040 	.word	0x1a00a040
1a00201c:	1a002305 	.word	0x1a002305
1a002020:	10003338 	.word	0x10003338

1a002024 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a002024:	b1c0      	cbz	r0, 1a002058 <xTimerGenericCommand+0x34>
{
1a002026:	b530      	push	{r4, r5, lr}
1a002028:	b085      	sub	sp, #20
1a00202a:	4615      	mov	r5, r2
1a00202c:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a00202e:	4a17      	ldr	r2, [pc, #92]	; (1a00208c <xTimerGenericCommand+0x68>)
1a002030:	6810      	ldr	r0, [r2, #0]
1a002032:	b340      	cbz	r0, 1a002086 <xTimerGenericCommand+0x62>
1a002034:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a002036:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a002038:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a00203a:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a00203c:	2905      	cmp	r1, #5
1a00203e:	dc1c      	bgt.n	1a00207a <xTimerGenericCommand+0x56>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a002040:	f7ff fe0e 	bl	1a001c60 <xTaskGetSchedulerState>
1a002044:	2802      	cmp	r0, #2
1a002046:	d010      	beq.n	1a00206a <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a002048:	2300      	movs	r3, #0
1a00204a:	461a      	mov	r2, r3
1a00204c:	4669      	mov	r1, sp
1a00204e:	480f      	ldr	r0, [pc, #60]	; (1a00208c <xTimerGenericCommand+0x68>)
1a002050:	6800      	ldr	r0, [r0, #0]
1a002052:	f7fe fdbf 	bl	1a000bd4 <xQueueGenericSend>
1a002056:	e014      	b.n	1a002082 <xTimerGenericCommand+0x5e>
1a002058:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00205c:	f383 8811 	msr	BASEPRI, r3
1a002060:	f3bf 8f6f 	isb	sy
1a002064:	f3bf 8f4f 	dsb	sy
1a002068:	e7fe      	b.n	1a002068 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a00206a:	2300      	movs	r3, #0
1a00206c:	9a08      	ldr	r2, [sp, #32]
1a00206e:	4669      	mov	r1, sp
1a002070:	4806      	ldr	r0, [pc, #24]	; (1a00208c <xTimerGenericCommand+0x68>)
1a002072:	6800      	ldr	r0, [r0, #0]
1a002074:	f7fe fdae 	bl	1a000bd4 <xQueueGenericSend>
1a002078:	e003      	b.n	1a002082 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a00207a:	2300      	movs	r3, #0
1a00207c:	4669      	mov	r1, sp
1a00207e:	f7fe fe6d 	bl	1a000d5c <xQueueGenericSendFromISR>
}
1a002082:	b005      	add	sp, #20
1a002084:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
1a002086:	2000      	movs	r0, #0
	return xReturn;
1a002088:	e7fb      	b.n	1a002082 <xTimerGenericCommand+0x5e>
1a00208a:	bf00      	nop
1a00208c:	10003334 	.word	0x10003334

1a002090 <prvSwitchTimerLists>:
{
1a002090:	b570      	push	{r4, r5, r6, lr}
1a002092:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a002094:	4b1a      	ldr	r3, [pc, #104]	; (1a002100 <prvSwitchTimerLists+0x70>)
1a002096:	681b      	ldr	r3, [r3, #0]
1a002098:	681a      	ldr	r2, [r3, #0]
1a00209a:	b352      	cbz	r2, 1a0020f2 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a00209c:	68db      	ldr	r3, [r3, #12]
1a00209e:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0020a0:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0020a2:	1d25      	adds	r5, r4, #4
1a0020a4:	4628      	mov	r0, r5
1a0020a6:	f7ff f8ba 	bl	1a00121e <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0020aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0020ac:	4620      	mov	r0, r4
1a0020ae:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0020b0:	69e3      	ldr	r3, [r4, #28]
1a0020b2:	2b01      	cmp	r3, #1
1a0020b4:	d1ee      	bne.n	1a002094 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a0020b6:	69a3      	ldr	r3, [r4, #24]
1a0020b8:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a0020ba:	429e      	cmp	r6, r3
1a0020bc:	d207      	bcs.n	1a0020ce <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a0020be:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a0020c0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a0020c2:	4629      	mov	r1, r5
1a0020c4:	4b0e      	ldr	r3, [pc, #56]	; (1a002100 <prvSwitchTimerLists+0x70>)
1a0020c6:	6818      	ldr	r0, [r3, #0]
1a0020c8:	f7ff f88f 	bl	1a0011ea <vListInsert>
1a0020cc:	e7e2      	b.n	1a002094 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a0020ce:	2100      	movs	r1, #0
1a0020d0:	9100      	str	r1, [sp, #0]
1a0020d2:	460b      	mov	r3, r1
1a0020d4:	4632      	mov	r2, r6
1a0020d6:	4620      	mov	r0, r4
1a0020d8:	f7ff ffa4 	bl	1a002024 <xTimerGenericCommand>
				configASSERT( xResult );
1a0020dc:	2800      	cmp	r0, #0
1a0020de:	d1d9      	bne.n	1a002094 <prvSwitchTimerLists+0x4>
1a0020e0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0020e4:	f383 8811 	msr	BASEPRI, r3
1a0020e8:	f3bf 8f6f 	isb	sy
1a0020ec:	f3bf 8f4f 	dsb	sy
1a0020f0:	e7fe      	b.n	1a0020f0 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a0020f2:	4a04      	ldr	r2, [pc, #16]	; (1a002104 <prvSwitchTimerLists+0x74>)
1a0020f4:	6810      	ldr	r0, [r2, #0]
1a0020f6:	4902      	ldr	r1, [pc, #8]	; (1a002100 <prvSwitchTimerLists+0x70>)
1a0020f8:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a0020fa:	6013      	str	r3, [r2, #0]
}
1a0020fc:	b002      	add	sp, #8
1a0020fe:	bd70      	pop	{r4, r5, r6, pc}
1a002100:	10003210 	.word	0x10003210
1a002104:	10003214 	.word	0x10003214

1a002108 <prvSampleTimeNow>:
{
1a002108:	b538      	push	{r3, r4, r5, lr}
1a00210a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a00210c:	f7ff fb3a 	bl	1a001784 <xTaskGetTickCount>
1a002110:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a002112:	4b07      	ldr	r3, [pc, #28]	; (1a002130 <prvSampleTimeNow+0x28>)
1a002114:	681b      	ldr	r3, [r3, #0]
1a002116:	4298      	cmp	r0, r3
1a002118:	d305      	bcc.n	1a002126 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a00211a:	2300      	movs	r3, #0
1a00211c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a00211e:	4b04      	ldr	r3, [pc, #16]	; (1a002130 <prvSampleTimeNow+0x28>)
1a002120:	601c      	str	r4, [r3, #0]
}
1a002122:	4620      	mov	r0, r4
1a002124:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a002126:	f7ff ffb3 	bl	1a002090 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a00212a:	2301      	movs	r3, #1
1a00212c:	602b      	str	r3, [r5, #0]
1a00212e:	e7f6      	b.n	1a00211e <prvSampleTimeNow+0x16>
1a002130:	100032e0 	.word	0x100032e0

1a002134 <prvProcessExpiredTimer>:
{
1a002134:	b570      	push	{r4, r5, r6, lr}
1a002136:	b082      	sub	sp, #8
1a002138:	4605      	mov	r5, r0
1a00213a:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a00213c:	4b14      	ldr	r3, [pc, #80]	; (1a002190 <prvProcessExpiredTimer+0x5c>)
1a00213e:	681b      	ldr	r3, [r3, #0]
1a002140:	68db      	ldr	r3, [r3, #12]
1a002142:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002144:	1d20      	adds	r0, r4, #4
1a002146:	f7ff f86a 	bl	1a00121e <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a00214a:	69e3      	ldr	r3, [r4, #28]
1a00214c:	2b01      	cmp	r3, #1
1a00214e:	d004      	beq.n	1a00215a <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002150:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002152:	4620      	mov	r0, r4
1a002154:	4798      	blx	r3
}
1a002156:	b002      	add	sp, #8
1a002158:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a00215a:	69a1      	ldr	r1, [r4, #24]
1a00215c:	462b      	mov	r3, r5
1a00215e:	4632      	mov	r2, r6
1a002160:	4429      	add	r1, r5
1a002162:	4620      	mov	r0, r4
1a002164:	f7ff feca 	bl	1a001efc <prvInsertTimerInActiveList>
1a002168:	2800      	cmp	r0, #0
1a00216a:	d0f1      	beq.n	1a002150 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a00216c:	2100      	movs	r1, #0
1a00216e:	9100      	str	r1, [sp, #0]
1a002170:	460b      	mov	r3, r1
1a002172:	462a      	mov	r2, r5
1a002174:	4620      	mov	r0, r4
1a002176:	f7ff ff55 	bl	1a002024 <xTimerGenericCommand>
			configASSERT( xResult );
1a00217a:	2800      	cmp	r0, #0
1a00217c:	d1e8      	bne.n	1a002150 <prvProcessExpiredTimer+0x1c>
1a00217e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002182:	f383 8811 	msr	BASEPRI, r3
1a002186:	f3bf 8f6f 	isb	sy
1a00218a:	f3bf 8f4f 	dsb	sy
1a00218e:	e7fe      	b.n	1a00218e <prvProcessExpiredTimer+0x5a>
1a002190:	10003210 	.word	0x10003210

1a002194 <prvProcessTimerOrBlockTask>:
{
1a002194:	b570      	push	{r4, r5, r6, lr}
1a002196:	b082      	sub	sp, #8
1a002198:	4606      	mov	r6, r0
1a00219a:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a00219c:	f7ff faea 	bl	1a001774 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a0021a0:	a801      	add	r0, sp, #4
1a0021a2:	f7ff ffb1 	bl	1a002108 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a0021a6:	9b01      	ldr	r3, [sp, #4]
1a0021a8:	bb23      	cbnz	r3, 1a0021f4 <prvProcessTimerOrBlockTask+0x60>
1a0021aa:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a0021ac:	b90c      	cbnz	r4, 1a0021b2 <prvProcessTimerOrBlockTask+0x1e>
1a0021ae:	42b0      	cmp	r0, r6
1a0021b0:	d219      	bcs.n	1a0021e6 <prvProcessTimerOrBlockTask+0x52>
				if( xListWasEmpty != pdFALSE )
1a0021b2:	b12c      	cbz	r4, 1a0021c0 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a0021b4:	4b11      	ldr	r3, [pc, #68]	; (1a0021fc <prvProcessTimerOrBlockTask+0x68>)
1a0021b6:	681b      	ldr	r3, [r3, #0]
1a0021b8:	681c      	ldr	r4, [r3, #0]
1a0021ba:	fab4 f484 	clz	r4, r4
1a0021be:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a0021c0:	4622      	mov	r2, r4
1a0021c2:	1b71      	subs	r1, r6, r5
1a0021c4:	4b0e      	ldr	r3, [pc, #56]	; (1a002200 <prvProcessTimerOrBlockTask+0x6c>)
1a0021c6:	6818      	ldr	r0, [r3, #0]
1a0021c8:	f7fe ffcc 	bl	1a001164 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a0021cc:	f7ff fb70 	bl	1a0018b0 <xTaskResumeAll>
1a0021d0:	b938      	cbnz	r0, 1a0021e2 <prvProcessTimerOrBlockTask+0x4e>
					portYIELD_WITHIN_API();
1a0021d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0021d6:	4b0b      	ldr	r3, [pc, #44]	; (1a002204 <prvProcessTimerOrBlockTask+0x70>)
1a0021d8:	601a      	str	r2, [r3, #0]
1a0021da:	f3bf 8f4f 	dsb	sy
1a0021de:	f3bf 8f6f 	isb	sy
}
1a0021e2:	b002      	add	sp, #8
1a0021e4:	bd70      	pop	{r4, r5, r6, pc}
				( void ) xTaskResumeAll();
1a0021e6:	f7ff fb63 	bl	1a0018b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a0021ea:	4629      	mov	r1, r5
1a0021ec:	4630      	mov	r0, r6
1a0021ee:	f7ff ffa1 	bl	1a002134 <prvProcessExpiredTimer>
1a0021f2:	e7f6      	b.n	1a0021e2 <prvProcessTimerOrBlockTask+0x4e>
			( void ) xTaskResumeAll();
1a0021f4:	f7ff fb5c 	bl	1a0018b0 <xTaskResumeAll>
}
1a0021f8:	e7f3      	b.n	1a0021e2 <prvProcessTimerOrBlockTask+0x4e>
1a0021fa:	bf00      	nop
1a0021fc:	10003214 	.word	0x10003214
1a002200:	10003334 	.word	0x10003334
1a002204:	e000ed04 	.word	0xe000ed04

1a002208 <prvProcessReceivedCommands>:
{
1a002208:	b530      	push	{r4, r5, lr}
1a00220a:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a00220c:	e002      	b.n	1a002214 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a00220e:	9b04      	ldr	r3, [sp, #16]
1a002210:	2b00      	cmp	r3, #0
1a002212:	da0f      	bge.n	1a002234 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002214:	2200      	movs	r2, #0
1a002216:	a904      	add	r1, sp, #16
1a002218:	4b39      	ldr	r3, [pc, #228]	; (1a002300 <prvProcessReceivedCommands+0xf8>)
1a00221a:	6818      	ldr	r0, [r3, #0]
1a00221c:	f7fe fe0e 	bl	1a000e3c <xQueueReceive>
1a002220:	2800      	cmp	r0, #0
1a002222:	d06a      	beq.n	1a0022fa <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a002224:	9b04      	ldr	r3, [sp, #16]
1a002226:	2b00      	cmp	r3, #0
1a002228:	daf1      	bge.n	1a00220e <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a00222a:	9907      	ldr	r1, [sp, #28]
1a00222c:	9806      	ldr	r0, [sp, #24]
1a00222e:	9b05      	ldr	r3, [sp, #20]
1a002230:	4798      	blx	r3
1a002232:	e7ec      	b.n	1a00220e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a002234:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a002236:	6963      	ldr	r3, [r4, #20]
1a002238:	b113      	cbz	r3, 1a002240 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a00223a:	1d20      	adds	r0, r4, #4
1a00223c:	f7fe ffef 	bl	1a00121e <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002240:	a803      	add	r0, sp, #12
1a002242:	f7ff ff61 	bl	1a002108 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a002246:	9b04      	ldr	r3, [sp, #16]
1a002248:	2b09      	cmp	r3, #9
1a00224a:	d8e3      	bhi.n	1a002214 <prvProcessReceivedCommands+0xc>
1a00224c:	a201      	add	r2, pc, #4	; (adr r2, 1a002254 <prvProcessReceivedCommands+0x4c>)
1a00224e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a002252:	bf00      	nop
1a002254:	1a00227d 	.word	0x1a00227d
1a002258:	1a00227d 	.word	0x1a00227d
1a00225c:	1a00227d 	.word	0x1a00227d
1a002260:	1a002215 	.word	0x1a002215
1a002264:	1a0022c5 	.word	0x1a0022c5
1a002268:	1a0022eb 	.word	0x1a0022eb
1a00226c:	1a00227d 	.word	0x1a00227d
1a002270:	1a00227d 	.word	0x1a00227d
1a002274:	1a002215 	.word	0x1a002215
1a002278:	1a0022c5 	.word	0x1a0022c5
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a00227c:	9905      	ldr	r1, [sp, #20]
1a00227e:	69a5      	ldr	r5, [r4, #24]
1a002280:	460b      	mov	r3, r1
1a002282:	4602      	mov	r2, r0
1a002284:	4429      	add	r1, r5
1a002286:	4620      	mov	r0, r4
1a002288:	f7ff fe38 	bl	1a001efc <prvInsertTimerInActiveList>
1a00228c:	2800      	cmp	r0, #0
1a00228e:	d0c1      	beq.n	1a002214 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002290:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002292:	4620      	mov	r0, r4
1a002294:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002296:	69e3      	ldr	r3, [r4, #28]
1a002298:	2b01      	cmp	r3, #1
1a00229a:	d1bb      	bne.n	1a002214 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a00229c:	69a2      	ldr	r2, [r4, #24]
1a00229e:	2100      	movs	r1, #0
1a0022a0:	9100      	str	r1, [sp, #0]
1a0022a2:	460b      	mov	r3, r1
1a0022a4:	9805      	ldr	r0, [sp, #20]
1a0022a6:	4402      	add	r2, r0
1a0022a8:	4620      	mov	r0, r4
1a0022aa:	f7ff febb 	bl	1a002024 <xTimerGenericCommand>
							configASSERT( xResult );
1a0022ae:	2800      	cmp	r0, #0
1a0022b0:	d1b0      	bne.n	1a002214 <prvProcessReceivedCommands+0xc>
1a0022b2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022b6:	f383 8811 	msr	BASEPRI, r3
1a0022ba:	f3bf 8f6f 	isb	sy
1a0022be:	f3bf 8f4f 	dsb	sy
1a0022c2:	e7fe      	b.n	1a0022c2 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a0022c4:	9905      	ldr	r1, [sp, #20]
1a0022c6:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a0022c8:	b131      	cbz	r1, 1a0022d8 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a0022ca:	4603      	mov	r3, r0
1a0022cc:	4602      	mov	r2, r0
1a0022ce:	4401      	add	r1, r0
1a0022d0:	4620      	mov	r0, r4
1a0022d2:	f7ff fe13 	bl	1a001efc <prvInsertTimerInActiveList>
					break;
1a0022d6:	e79d      	b.n	1a002214 <prvProcessReceivedCommands+0xc>
1a0022d8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022dc:	f383 8811 	msr	BASEPRI, r3
1a0022e0:	f3bf 8f6f 	isb	sy
1a0022e4:	f3bf 8f4f 	dsb	sy
1a0022e8:	e7fe      	b.n	1a0022e8 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a0022ea:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a0022ee:	2b00      	cmp	r3, #0
1a0022f0:	d190      	bne.n	1a002214 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a0022f2:	4620      	mov	r0, r4
1a0022f4:	f7fe faa4 	bl	1a000840 <vPortFree>
1a0022f8:	e78c      	b.n	1a002214 <prvProcessReceivedCommands+0xc>
}
1a0022fa:	b009      	add	sp, #36	; 0x24
1a0022fc:	bd30      	pop	{r4, r5, pc}
1a0022fe:	bf00      	nop
1a002300:	10003334 	.word	0x10003334

1a002304 <prvTimerTask>:
{
1a002304:	b500      	push	{lr}
1a002306:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a002308:	a801      	add	r0, sp, #4
1a00230a:	f7ff fde7 	bl	1a001edc <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a00230e:	9901      	ldr	r1, [sp, #4]
1a002310:	f7ff ff40 	bl	1a002194 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a002314:	f7ff ff78 	bl	1a002208 <prvProcessReceivedCommands>
1a002318:	e7f6      	b.n	1a002308 <prvTimerTask+0x4>
1a00231a:	Address 0x000000001a00231a is out of bounds.


1a00231c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a00231c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a00231e:	2300      	movs	r3, #0
1a002320:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a002322:	4b0d      	ldr	r3, [pc, #52]	; (1a002358 <prvTaskExitError+0x3c>)
1a002324:	681b      	ldr	r3, [r3, #0]
1a002326:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00232a:	d008      	beq.n	1a00233e <prvTaskExitError+0x22>
1a00232c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002330:	f383 8811 	msr	BASEPRI, r3
1a002334:	f3bf 8f6f 	isb	sy
1a002338:	f3bf 8f4f 	dsb	sy
1a00233c:	e7fe      	b.n	1a00233c <prvTaskExitError+0x20>
1a00233e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002342:	f383 8811 	msr	BASEPRI, r3
1a002346:	f3bf 8f6f 	isb	sy
1a00234a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a00234e:	9b01      	ldr	r3, [sp, #4]
1a002350:	2b00      	cmp	r3, #0
1a002352:	d0fc      	beq.n	1a00234e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a002354:	b002      	add	sp, #8
1a002356:	4770      	bx	lr
1a002358:	10000000 	.word	0x10000000

1a00235c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a00235c:	4808      	ldr	r0, [pc, #32]	; (1a002380 <prvPortStartFirstTask+0x24>)
1a00235e:	6800      	ldr	r0, [r0, #0]
1a002360:	6800      	ldr	r0, [r0, #0]
1a002362:	f380 8808 	msr	MSP, r0
1a002366:	f04f 0000 	mov.w	r0, #0
1a00236a:	f380 8814 	msr	CONTROL, r0
1a00236e:	b662      	cpsie	i
1a002370:	b661      	cpsie	f
1a002372:	f3bf 8f4f 	dsb	sy
1a002376:	f3bf 8f6f 	isb	sy
1a00237a:	df00      	svc	0
1a00237c:	bf00      	nop
1a00237e:	0000      	.short	0x0000
1a002380:	e000ed08 	.word	0xe000ed08

1a002384 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a002384:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a002394 <vPortEnableVFP+0x10>
1a002388:	6801      	ldr	r1, [r0, #0]
1a00238a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a00238e:	6001      	str	r1, [r0, #0]
1a002390:	4770      	bx	lr
1a002392:	0000      	.short	0x0000
1a002394:	e000ed88 	.word	0xe000ed88

1a002398 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a002398:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a00239c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a0023a0:	f021 0101 	bic.w	r1, r1, #1
1a0023a4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a0023a8:	4b05      	ldr	r3, [pc, #20]	; (1a0023c0 <pxPortInitialiseStack+0x28>)
1a0023aa:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a0023ae:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a0023b2:	f06f 0302 	mvn.w	r3, #2
1a0023b6:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a0023ba:	3844      	subs	r0, #68	; 0x44
1a0023bc:	4770      	bx	lr
1a0023be:	bf00      	nop
1a0023c0:	1a00231d 	.word	0x1a00231d
1a0023c4:	ffffffff 	.word	0xffffffff
1a0023c8:	ffffffff 	.word	0xffffffff
1a0023cc:	ffffffff 	.word	0xffffffff

1a0023d0 <SVC_Handler>:
	__asm volatile (
1a0023d0:	4b07      	ldr	r3, [pc, #28]	; (1a0023f0 <pxCurrentTCBConst2>)
1a0023d2:	6819      	ldr	r1, [r3, #0]
1a0023d4:	6808      	ldr	r0, [r1, #0]
1a0023d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0023da:	f380 8809 	msr	PSP, r0
1a0023de:	f3bf 8f6f 	isb	sy
1a0023e2:	f04f 0000 	mov.w	r0, #0
1a0023e6:	f380 8811 	msr	BASEPRI, r0
1a0023ea:	4770      	bx	lr
1a0023ec:	f3af 8000 	nop.w

1a0023f0 <pxCurrentTCBConst2>:
1a0023f0:	100030e8 	.word	0x100030e8

1a0023f4 <vPortEnterCritical>:
1a0023f4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023f8:	f383 8811 	msr	BASEPRI, r3
1a0023fc:	f3bf 8f6f 	isb	sy
1a002400:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a002404:	4a0a      	ldr	r2, [pc, #40]	; (1a002430 <vPortEnterCritical+0x3c>)
1a002406:	6813      	ldr	r3, [r2, #0]
1a002408:	3301      	adds	r3, #1
1a00240a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a00240c:	2b01      	cmp	r3, #1
1a00240e:	d10d      	bne.n	1a00242c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a002410:	4b08      	ldr	r3, [pc, #32]	; (1a002434 <vPortEnterCritical+0x40>)
1a002412:	681b      	ldr	r3, [r3, #0]
1a002414:	f013 0fff 	tst.w	r3, #255	; 0xff
1a002418:	d008      	beq.n	1a00242c <vPortEnterCritical+0x38>
1a00241a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00241e:	f383 8811 	msr	BASEPRI, r3
1a002422:	f3bf 8f6f 	isb	sy
1a002426:	f3bf 8f4f 	dsb	sy
1a00242a:	e7fe      	b.n	1a00242a <vPortEnterCritical+0x36>
1a00242c:	4770      	bx	lr
1a00242e:	bf00      	nop
1a002430:	10000000 	.word	0x10000000
1a002434:	e000ed04 	.word	0xe000ed04

1a002438 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a002438:	4b09      	ldr	r3, [pc, #36]	; (1a002460 <vPortExitCritical+0x28>)
1a00243a:	681b      	ldr	r3, [r3, #0]
1a00243c:	b943      	cbnz	r3, 1a002450 <vPortExitCritical+0x18>
1a00243e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002442:	f383 8811 	msr	BASEPRI, r3
1a002446:	f3bf 8f6f 	isb	sy
1a00244a:	f3bf 8f4f 	dsb	sy
1a00244e:	e7fe      	b.n	1a00244e <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a002450:	3b01      	subs	r3, #1
1a002452:	4a03      	ldr	r2, [pc, #12]	; (1a002460 <vPortExitCritical+0x28>)
1a002454:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a002456:	b90b      	cbnz	r3, 1a00245c <vPortExitCritical+0x24>
	__asm volatile
1a002458:	f383 8811 	msr	BASEPRI, r3
1a00245c:	4770      	bx	lr
1a00245e:	bf00      	nop
1a002460:	10000000 	.word	0x10000000
1a002464:	ffffffff 	.word	0xffffffff
1a002468:	ffffffff 	.word	0xffffffff
1a00246c:	ffffffff 	.word	0xffffffff

1a002470 <PendSV_Handler>:
	__asm volatile
1a002470:	f3ef 8009 	mrs	r0, PSP
1a002474:	f3bf 8f6f 	isb	sy
1a002478:	4b15      	ldr	r3, [pc, #84]	; (1a0024d0 <pxCurrentTCBConst>)
1a00247a:	681a      	ldr	r2, [r3, #0]
1a00247c:	f01e 0f10 	tst.w	lr, #16
1a002480:	bf08      	it	eq
1a002482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a002486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00248a:	6010      	str	r0, [r2, #0]
1a00248c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a002490:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a002494:	f380 8811 	msr	BASEPRI, r0
1a002498:	f3bf 8f4f 	dsb	sy
1a00249c:	f3bf 8f6f 	isb	sy
1a0024a0:	f7ff faac 	bl	1a0019fc <vTaskSwitchContext>
1a0024a4:	f04f 0000 	mov.w	r0, #0
1a0024a8:	f380 8811 	msr	BASEPRI, r0
1a0024ac:	bc09      	pop	{r0, r3}
1a0024ae:	6819      	ldr	r1, [r3, #0]
1a0024b0:	6808      	ldr	r0, [r1, #0]
1a0024b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0024b6:	f01e 0f10 	tst.w	lr, #16
1a0024ba:	bf08      	it	eq
1a0024bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a0024c0:	f380 8809 	msr	PSP, r0
1a0024c4:	f3bf 8f6f 	isb	sy
1a0024c8:	4770      	bx	lr
1a0024ca:	bf00      	nop
1a0024cc:	f3af 8000 	nop.w

1a0024d0 <pxCurrentTCBConst>:
1a0024d0:	100030e8 	.word	0x100030e8

1a0024d4 <SysTick_Handler>:
{
1a0024d4:	b508      	push	{r3, lr}
	__asm volatile
1a0024d6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024da:	f383 8811 	msr	BASEPRI, r3
1a0024de:	f3bf 8f6f 	isb	sy
1a0024e2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a0024e6:	f7ff f953 	bl	1a001790 <xTaskIncrementTick>
1a0024ea:	b118      	cbz	r0, 1a0024f4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a0024ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0024f0:	4b02      	ldr	r3, [pc, #8]	; (1a0024fc <SysTick_Handler+0x28>)
1a0024f2:	601a      	str	r2, [r3, #0]
	__asm volatile
1a0024f4:	2300      	movs	r3, #0
1a0024f6:	f383 8811 	msr	BASEPRI, r3
1a0024fa:	bd08      	pop	{r3, pc}
1a0024fc:	e000ed04 	.word	0xe000ed04

1a002500 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a002500:	4a08      	ldr	r2, [pc, #32]	; (1a002524 <vPortSetupTimerInterrupt+0x24>)
1a002502:	2300      	movs	r3, #0
1a002504:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002506:	4908      	ldr	r1, [pc, #32]	; (1a002528 <vPortSetupTimerInterrupt+0x28>)
1a002508:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a00250a:	4b08      	ldr	r3, [pc, #32]	; (1a00252c <vPortSetupTimerInterrupt+0x2c>)
1a00250c:	681b      	ldr	r3, [r3, #0]
1a00250e:	4908      	ldr	r1, [pc, #32]	; (1a002530 <vPortSetupTimerInterrupt+0x30>)
1a002510:	fba1 1303 	umull	r1, r3, r1, r3
1a002514:	099b      	lsrs	r3, r3, #6
1a002516:	3b01      	subs	r3, #1
1a002518:	4906      	ldr	r1, [pc, #24]	; (1a002534 <vPortSetupTimerInterrupt+0x34>)
1a00251a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a00251c:	2307      	movs	r3, #7
1a00251e:	6013      	str	r3, [r2, #0]
1a002520:	4770      	bx	lr
1a002522:	bf00      	nop
1a002524:	e000e010 	.word	0xe000e010
1a002528:	e000e018 	.word	0xe000e018
1a00252c:	100033f0 	.word	0x100033f0
1a002530:	10624dd3 	.word	0x10624dd3
1a002534:	e000e014 	.word	0xe000e014

1a002538 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002538:	4b3a      	ldr	r3, [pc, #232]	; (1a002624 <xPortStartScheduler+0xec>)
1a00253a:	681a      	ldr	r2, [r3, #0]
1a00253c:	4b3a      	ldr	r3, [pc, #232]	; (1a002628 <xPortStartScheduler+0xf0>)
1a00253e:	429a      	cmp	r2, r3
1a002540:	d108      	bne.n	1a002554 <xPortStartScheduler+0x1c>
	__asm volatile
1a002542:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002546:	f383 8811 	msr	BASEPRI, r3
1a00254a:	f3bf 8f6f 	isb	sy
1a00254e:	f3bf 8f4f 	dsb	sy
1a002552:	e7fe      	b.n	1a002552 <xPortStartScheduler+0x1a>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002554:	4b33      	ldr	r3, [pc, #204]	; (1a002624 <xPortStartScheduler+0xec>)
1a002556:	681a      	ldr	r2, [r3, #0]
1a002558:	4b34      	ldr	r3, [pc, #208]	; (1a00262c <xPortStartScheduler+0xf4>)
1a00255a:	429a      	cmp	r2, r3
1a00255c:	d108      	bne.n	1a002570 <xPortStartScheduler+0x38>
1a00255e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002562:	f383 8811 	msr	BASEPRI, r3
1a002566:	f3bf 8f6f 	isb	sy
1a00256a:	f3bf 8f4f 	dsb	sy
1a00256e:	e7fe      	b.n	1a00256e <xPortStartScheduler+0x36>
{
1a002570:	b510      	push	{r4, lr}
1a002572:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a002574:	4b2e      	ldr	r3, [pc, #184]	; (1a002630 <xPortStartScheduler+0xf8>)
1a002576:	781a      	ldrb	r2, [r3, #0]
1a002578:	b2d2      	uxtb	r2, r2
1a00257a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a00257c:	22ff      	movs	r2, #255	; 0xff
1a00257e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a002580:	781b      	ldrb	r3, [r3, #0]
1a002582:	b2db      	uxtb	r3, r3
1a002584:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a002588:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00258c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a002590:	4a28      	ldr	r2, [pc, #160]	; (1a002634 <xPortStartScheduler+0xfc>)
1a002592:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a002594:	2207      	movs	r2, #7
1a002596:	4b28      	ldr	r3, [pc, #160]	; (1a002638 <xPortStartScheduler+0x100>)
1a002598:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a00259a:	e009      	b.n	1a0025b0 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a00259c:	4a26      	ldr	r2, [pc, #152]	; (1a002638 <xPortStartScheduler+0x100>)
1a00259e:	6813      	ldr	r3, [r2, #0]
1a0025a0:	3b01      	subs	r3, #1
1a0025a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a0025a4:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0025a8:	005b      	lsls	r3, r3, #1
1a0025aa:	b2db      	uxtb	r3, r3
1a0025ac:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a0025b0:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0025b4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0025b8:	d1f0      	bne.n	1a00259c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a0025ba:	4b1f      	ldr	r3, [pc, #124]	; (1a002638 <xPortStartScheduler+0x100>)
1a0025bc:	681b      	ldr	r3, [r3, #0]
1a0025be:	2b04      	cmp	r3, #4
1a0025c0:	d008      	beq.n	1a0025d4 <xPortStartScheduler+0x9c>
1a0025c2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0025c6:	f383 8811 	msr	BASEPRI, r3
1a0025ca:	f3bf 8f6f 	isb	sy
1a0025ce:	f3bf 8f4f 	dsb	sy
1a0025d2:	e7fe      	b.n	1a0025d2 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a0025d4:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a0025d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a0025da:	4a17      	ldr	r2, [pc, #92]	; (1a002638 <xPortStartScheduler+0x100>)
1a0025dc:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a0025de:	9b01      	ldr	r3, [sp, #4]
1a0025e0:	b2db      	uxtb	r3, r3
1a0025e2:	4a13      	ldr	r2, [pc, #76]	; (1a002630 <xPortStartScheduler+0xf8>)
1a0025e4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a0025e6:	4b15      	ldr	r3, [pc, #84]	; (1a00263c <xPortStartScheduler+0x104>)
1a0025e8:	681a      	ldr	r2, [r3, #0]
1a0025ea:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a0025ee:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a0025f0:	681a      	ldr	r2, [r3, #0]
1a0025f2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a0025f6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a0025f8:	f7ff ff82 	bl	1a002500 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a0025fc:	2400      	movs	r4, #0
1a0025fe:	4b10      	ldr	r3, [pc, #64]	; (1a002640 <xPortStartScheduler+0x108>)
1a002600:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a002602:	f7ff febf 	bl	1a002384 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a002606:	4a0f      	ldr	r2, [pc, #60]	; (1a002644 <xPortStartScheduler+0x10c>)
1a002608:	6813      	ldr	r3, [r2, #0]
1a00260a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a00260e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a002610:	f7ff fea4 	bl	1a00235c <prvPortStartFirstTask>
	vTaskSwitchContext();
1a002614:	f7ff f9f2 	bl	1a0019fc <vTaskSwitchContext>
	prvTaskExitError();
1a002618:	f7ff fe80 	bl	1a00231c <prvTaskExitError>
}
1a00261c:	4620      	mov	r0, r4
1a00261e:	b002      	add	sp, #8
1a002620:	bd10      	pop	{r4, pc}
1a002622:	bf00      	nop
1a002624:	e000ed00 	.word	0xe000ed00
1a002628:	410fc271 	.word	0x410fc271
1a00262c:	410fc270 	.word	0x410fc270
1a002630:	e000e400 	.word	0xe000e400
1a002634:	1000333c 	.word	0x1000333c
1a002638:	10003340 	.word	0x10003340
1a00263c:	e000ed20 	.word	0xe000ed20
1a002640:	10000000 	.word	0x10000000
1a002644:	e000ef34 	.word	0xe000ef34

1a002648 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a002648:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a00264c:	2b0f      	cmp	r3, #15
1a00264e:	d90f      	bls.n	1a002670 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002650:	4a10      	ldr	r2, [pc, #64]	; (1a002694 <vPortValidateInterruptPriority+0x4c>)
1a002652:	5c9b      	ldrb	r3, [r3, r2]
1a002654:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002656:	4a10      	ldr	r2, [pc, #64]	; (1a002698 <vPortValidateInterruptPriority+0x50>)
1a002658:	7812      	ldrb	r2, [r2, #0]
1a00265a:	4293      	cmp	r3, r2
1a00265c:	d208      	bcs.n	1a002670 <vPortValidateInterruptPriority+0x28>
1a00265e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002662:	f383 8811 	msr	BASEPRI, r3
1a002666:	f3bf 8f6f 	isb	sy
1a00266a:	f3bf 8f4f 	dsb	sy
1a00266e:	e7fe      	b.n	1a00266e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a002670:	4b0a      	ldr	r3, [pc, #40]	; (1a00269c <vPortValidateInterruptPriority+0x54>)
1a002672:	681b      	ldr	r3, [r3, #0]
1a002674:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002678:	4a09      	ldr	r2, [pc, #36]	; (1a0026a0 <vPortValidateInterruptPriority+0x58>)
1a00267a:	6812      	ldr	r2, [r2, #0]
1a00267c:	4293      	cmp	r3, r2
1a00267e:	d908      	bls.n	1a002692 <vPortValidateInterruptPriority+0x4a>
1a002680:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002684:	f383 8811 	msr	BASEPRI, r3
1a002688:	f3bf 8f6f 	isb	sy
1a00268c:	f3bf 8f4f 	dsb	sy
1a002690:	e7fe      	b.n	1a002690 <vPortValidateInterruptPriority+0x48>
1a002692:	4770      	bx	lr
1a002694:	e000e3f0 	.word	0xe000e3f0
1a002698:	1000333c 	.word	0x1000333c
1a00269c:	e000ed0c 	.word	0xe000ed0c
1a0026a0:	10003340 	.word	0x10003340

1a0026a4 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0026a4:	2200      	movs	r2, #0
1a0026a6:	2a05      	cmp	r2, #5
1a0026a8:	d819      	bhi.n	1a0026de <Board_LED_Init+0x3a>
{
1a0026aa:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0026ac:	490c      	ldr	r1, [pc, #48]	; (1a0026e0 <Board_LED_Init+0x3c>)
1a0026ae:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a0026b2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a0026b6:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0026b8:	4b0a      	ldr	r3, [pc, #40]	; (1a0026e4 <Board_LED_Init+0x40>)
1a0026ba:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a0026be:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a0026c2:	2001      	movs	r0, #1
1a0026c4:	40a0      	lsls	r0, r4
1a0026c6:	4301      	orrs	r1, r0
1a0026c8:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a0026cc:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a0026d0:	2100      	movs	r1, #0
1a0026d2:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0026d4:	3201      	adds	r2, #1
1a0026d6:	2a05      	cmp	r2, #5
1a0026d8:	d9e8      	bls.n	1a0026ac <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a0026da:	bc70      	pop	{r4, r5, r6}
1a0026dc:	4770      	bx	lr
1a0026de:	4770      	bx	lr
1a0026e0:	1a00a054 	.word	0x1a00a054
1a0026e4:	400f4000 	.word	0x400f4000

1a0026e8 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0026e8:	2300      	movs	r3, #0
1a0026ea:	2b03      	cmp	r3, #3
1a0026ec:	d816      	bhi.n	1a00271c <Board_TEC_Init+0x34>
{
1a0026ee:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0026f0:	490b      	ldr	r1, [pc, #44]	; (1a002720 <Board_TEC_Init+0x38>)
1a0026f2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0026f6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0026fa:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0026fc:	4c09      	ldr	r4, [pc, #36]	; (1a002724 <Board_TEC_Init+0x3c>)
1a0026fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002702:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002706:	2001      	movs	r0, #1
1a002708:	40a8      	lsls	r0, r5
1a00270a:	ea21 0100 	bic.w	r1, r1, r0
1a00270e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002712:	3301      	adds	r3, #1
1a002714:	2b03      	cmp	r3, #3
1a002716:	d9eb      	bls.n	1a0026f0 <Board_TEC_Init+0x8>
   }
}
1a002718:	bc30      	pop	{r4, r5}
1a00271a:	4770      	bx	lr
1a00271c:	4770      	bx	lr
1a00271e:	bf00      	nop
1a002720:	1a00a04c 	.word	0x1a00a04c
1a002724:	400f4000 	.word	0x400f4000

1a002728 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002728:	2300      	movs	r3, #0
1a00272a:	2b08      	cmp	r3, #8
1a00272c:	d816      	bhi.n	1a00275c <Board_GPIO_Init+0x34>
{
1a00272e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002730:	490b      	ldr	r1, [pc, #44]	; (1a002760 <Board_GPIO_Init+0x38>)
1a002732:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002736:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00273a:	784d      	ldrb	r5, [r1, #1]
1a00273c:	4c09      	ldr	r4, [pc, #36]	; (1a002764 <Board_GPIO_Init+0x3c>)
1a00273e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002742:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002746:	2001      	movs	r0, #1
1a002748:	40a8      	lsls	r0, r5
1a00274a:	ea21 0100 	bic.w	r1, r1, r0
1a00274e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002752:	3301      	adds	r3, #1
1a002754:	2b08      	cmp	r3, #8
1a002756:	d9eb      	bls.n	1a002730 <Board_GPIO_Init+0x8>
   }
}
1a002758:	bc30      	pop	{r4, r5}
1a00275a:	4770      	bx	lr
1a00275c:	4770      	bx	lr
1a00275e:	bf00      	nop
1a002760:	1a00a060 	.word	0x1a00a060
1a002764:	400f4000 	.word	0x400f4000

1a002768 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a002768:	b510      	push	{r4, lr}
1a00276a:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a00276c:	4c08      	ldr	r4, [pc, #32]	; (1a002790 <Board_ADC_Init+0x28>)
1a00276e:	4669      	mov	r1, sp
1a002770:	4620      	mov	r0, r4
1a002772:	f000 f9bf 	bl	1a002af4 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a002776:	4a07      	ldr	r2, [pc, #28]	; (1a002794 <Board_ADC_Init+0x2c>)
1a002778:	4669      	mov	r1, sp
1a00277a:	4620      	mov	r0, r4
1a00277c:	f000 f9da 	bl	1a002b34 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002780:	2200      	movs	r2, #0
1a002782:	4669      	mov	r1, sp
1a002784:	4620      	mov	r0, r4
1a002786:	f000 f9ee 	bl	1a002b66 <Chip_ADC_SetResolution>
}
1a00278a:	b002      	add	sp, #8
1a00278c:	bd10      	pop	{r4, pc}
1a00278e:	bf00      	nop
1a002790:	400e3000 	.word	0x400e3000
1a002794:	00061a80 	.word	0x00061a80

1a002798 <Board_SPI_Init>:
{
1a002798:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a00279a:	4c0b      	ldr	r4, [pc, #44]	; (1a0027c8 <Board_SPI_Init+0x30>)
1a00279c:	4620      	mov	r0, r4
1a00279e:	f000 fda3 	bl	1a0032e8 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0027a2:	6863      	ldr	r3, [r4, #4]
1a0027a4:	f023 0304 	bic.w	r3, r3, #4
1a0027a8:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0027aa:	6823      	ldr	r3, [r4, #0]
1a0027ac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0027b0:	f043 0307 	orr.w	r3, r3, #7
1a0027b4:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a0027b6:	4905      	ldr	r1, [pc, #20]	; (1a0027cc <Board_SPI_Init+0x34>)
1a0027b8:	4620      	mov	r0, r4
1a0027ba:	f000 fd76 	bl	1a0032aa <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0027be:	6863      	ldr	r3, [r4, #4]
1a0027c0:	f043 0302 	orr.w	r3, r3, #2
1a0027c4:	6063      	str	r3, [r4, #4]
1a0027c6:	bd10      	pop	{r4, pc}
1a0027c8:	400c5000 	.word	0x400c5000
1a0027cc:	000186a0 	.word	0x000186a0

1a0027d0 <Board_I2C_Init>:
{
1a0027d0:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a0027d2:	2000      	movs	r0, #0
1a0027d4:	f000 fdb4 	bl	1a003340 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0027d8:	f640 0208 	movw	r2, #2056	; 0x808
1a0027dc:	4b03      	ldr	r3, [pc, #12]	; (1a0027ec <Board_I2C_Init+0x1c>)
1a0027de:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0027e2:	4903      	ldr	r1, [pc, #12]	; (1a0027f0 <Board_I2C_Init+0x20>)
1a0027e4:	2000      	movs	r0, #0
1a0027e6:	f000 fdbd 	bl	1a003364 <Chip_I2C_SetClockRate>
1a0027ea:	bd08      	pop	{r3, pc}
1a0027ec:	40086000 	.word	0x40086000
1a0027f0:	000f4240 	.word	0x000f4240

1a0027f4 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0027f4:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a0027f6:	4c07      	ldr	r4, [pc, #28]	; (1a002814 <Board_Debug_Init+0x20>)
1a0027f8:	4620      	mov	r0, r4
1a0027fa:	f000 f8b9 	bl	1a002970 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0027fe:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002802:	4620      	mov	r0, r4
1a002804:	f000 f8de 	bl	1a0029c4 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002808:	2303      	movs	r3, #3
1a00280a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a00280c:	2301      	movs	r3, #1
1a00280e:	65e3      	str	r3, [r4, #92]	; 0x5c
1a002810:	bd10      	pop	{r4, pc}
1a002812:	bf00      	nop
1a002814:	400c1000 	.word	0x400c1000

1a002818 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a002818:	4b03      	ldr	r3, [pc, #12]	; (1a002828 <Board_UARTPutChar+0x10>)
1a00281a:	695b      	ldr	r3, [r3, #20]
}


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a00281c:	f013 0f20 	tst.w	r3, #32
1a002820:	d0fa      	beq.n	1a002818 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a002822:	4b01      	ldr	r3, [pc, #4]	; (1a002828 <Board_UARTPutChar+0x10>)
1a002824:	6018      	str	r0, [r3, #0]
1a002826:	4770      	bx	lr
1a002828:	400c1000 	.word	0x400c1000

1a00282c <Board_UARTGetChar>:
	return pUART->LSR;
1a00282c:	4b05      	ldr	r3, [pc, #20]	; (1a002844 <Board_UARTGetChar+0x18>)
1a00282e:	695b      	ldr	r3, [r3, #20]
}


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a002830:	f013 0f01 	tst.w	r3, #1
1a002834:	d003      	beq.n	1a00283e <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002836:	4b03      	ldr	r3, [pc, #12]	; (1a002844 <Board_UARTGetChar+0x18>)
1a002838:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a00283a:	b2c0      	uxtb	r0, r0
1a00283c:	4770      	bx	lr
   }
   return EOF;
1a00283e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a002842:	4770      	bx	lr
1a002844:	400c1000 	.word	0x400c1000

1a002848 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002848:	b508      	push	{r3, lr}
   DEBUGINIT();
1a00284a:	f7ff ffd3 	bl	1a0027f4 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00284e:	4809      	ldr	r0, [pc, #36]	; (1a002874 <Board_Init+0x2c>)
1a002850:	f000 fd0a 	bl	1a003268 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a002854:	f7ff ff68 	bl	1a002728 <Board_GPIO_Init>
   Board_ADC_Init();
1a002858:	f7ff ff86 	bl	1a002768 <Board_ADC_Init>
   Board_SPI_Init();
1a00285c:	f7ff ff9c 	bl	1a002798 <Board_SPI_Init>
   Board_I2C_Init();
1a002860:	f7ff ffb6 	bl	1a0027d0 <Board_I2C_Init>

   Board_LED_Init();
1a002864:	f7ff ff1e 	bl	1a0026a4 <Board_LED_Init>
   Board_TEC_Init();
1a002868:	f7ff ff3e 	bl	1a0026e8 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a00286c:	f000 f982 	bl	1a002b74 <SystemCoreClockUpdate>
1a002870:	bd08      	pop	{r3, pc}
1a002872:	bf00      	nop
1a002874:	400f4000 	.word	0x400f4000

1a002878 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a002878:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a00287a:	b2c0      	uxtb	r0, r0
1a00287c:	f7ff ffcc 	bl	1a002818 <Board_UARTPutChar>
1a002880:	bd08      	pop	{r3, pc}

1a002882 <__stdio_getchar>:
}

int __stdio_getchar()
{
1a002882:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a002884:	f7ff ffd2 	bl	1a00282c <Board_UARTGetChar>
}
1a002888:	bd08      	pop	{r3, pc}

1a00288a <__stdio_init>:

void __stdio_init()
{
1a00288a:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a00288c:	f7ff ffb2 	bl	1a0027f4 <Board_Debug_Init>
1a002890:	bd08      	pop	{r3, pc}
1a002892:	Address 0x000000001a002892 is out of bounds.


1a002894 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002894:	2300      	movs	r3, #0
1a002896:	2b1c      	cmp	r3, #28
1a002898:	d812      	bhi.n	1a0028c0 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a00289a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a00289c:	4a09      	ldr	r2, [pc, #36]	; (1a0028c4 <Board_SetupMuxing+0x30>)
1a00289e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0028a2:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0028a6:	784a      	ldrb	r2, [r1, #1]
1a0028a8:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0028aa:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0028ae:	4906      	ldr	r1, [pc, #24]	; (1a0028c8 <Board_SetupMuxing+0x34>)
1a0028b0:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0028b4:	3301      	adds	r3, #1
1a0028b6:	2b1c      	cmp	r3, #28
1a0028b8:	d9f0      	bls.n	1a00289c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0028ba:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0028be:	4770      	bx	lr
1a0028c0:	4770      	bx	lr
1a0028c2:	bf00      	nop
1a0028c4:	1a00a07c 	.word	0x1a00a07c
1a0028c8:	40086000 	.word	0x40086000

1a0028cc <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a0028cc:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0028ce:	4a17      	ldr	r2, [pc, #92]	; (1a00292c <Board_SetupClocking+0x60>)
1a0028d0:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0028d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0028d8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0028dc:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0028e0:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0028e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0028e8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0028ec:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0028f0:	2201      	movs	r2, #1
1a0028f2:	490f      	ldr	r1, [pc, #60]	; (1a002930 <Board_SetupClocking+0x64>)
1a0028f4:	2006      	movs	r0, #6
1a0028f6:	f000 fc0d 	bl	1a003114 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0028fa:	2400      	movs	r4, #0
1a0028fc:	b14c      	cbz	r4, 1a002912 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0028fe:	4b0b      	ldr	r3, [pc, #44]	; (1a00292c <Board_SetupClocking+0x60>)
1a002900:	685a      	ldr	r2, [r3, #4]
1a002902:	f022 020c 	bic.w	r2, r2, #12
1a002906:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a002908:	685a      	ldr	r2, [r3, #4]
1a00290a:	f042 0203 	orr.w	r2, r2, #3
1a00290e:	605a      	str	r2, [r3, #4]
1a002910:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a002912:	4808      	ldr	r0, [pc, #32]	; (1a002934 <Board_SetupClocking+0x68>)
1a002914:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002918:	2301      	movs	r3, #1
1a00291a:	788a      	ldrb	r2, [r1, #2]
1a00291c:	7849      	ldrb	r1, [r1, #1]
1a00291e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002922:	f000 fb53 	bl	1a002fcc <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002926:	3401      	adds	r4, #1
1a002928:	e7e8      	b.n	1a0028fc <Board_SetupClocking+0x30>
1a00292a:	bf00      	nop
1a00292c:	40043000 	.word	0x40043000
1a002930:	0c28cb00 	.word	0x0c28cb00
1a002934:	1a00a078 	.word	0x1a00a078

1a002938 <Board_SystemInit>:
}


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a002938:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a00293a:	f7ff ffab 	bl	1a002894 <Board_SetupMuxing>
    Board_SetupClocking();
1a00293e:	f7ff ffc5 	bl	1a0028cc <Board_SetupClocking>
1a002942:	bd08      	pop	{r3, pc}

1a002944 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a002944:	4b09      	ldr	r3, [pc, #36]	; (1a00296c <Chip_UART_GetIndex+0x28>)
1a002946:	4298      	cmp	r0, r3
1a002948:	d009      	beq.n	1a00295e <Chip_UART_GetIndex+0x1a>
1a00294a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00294e:	4298      	cmp	r0, r3
1a002950:	d007      	beq.n	1a002962 <Chip_UART_GetIndex+0x1e>
1a002952:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a002956:	4298      	cmp	r0, r3
1a002958:	d005      	beq.n	1a002966 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a00295a:	2000      	movs	r0, #0
1a00295c:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00295e:	2002      	movs	r0, #2
1a002960:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a002962:	2003      	movs	r0, #3
1a002964:	4770      	bx	lr
			return 1;
1a002966:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a002968:	4770      	bx	lr
1a00296a:	bf00      	nop
1a00296c:	400c1000 	.word	0x400c1000

1a002970 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a002970:	b530      	push	{r4, r5, lr}
1a002972:	b083      	sub	sp, #12
1a002974:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a002976:	f7ff ffe5 	bl	1a002944 <Chip_UART_GetIndex>
1a00297a:	2301      	movs	r3, #1
1a00297c:	461a      	mov	r2, r3
1a00297e:	4619      	mov	r1, r3
1a002980:	4d0e      	ldr	r5, [pc, #56]	; (1a0029bc <Chip_UART_Init+0x4c>)
1a002982:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a002986:	f000 fb67 	bl	1a003058 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a00298a:	2307      	movs	r3, #7
1a00298c:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00298e:	2300      	movs	r3, #0
1a002990:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a002992:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a002994:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a002996:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a002998:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a00299a:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a00299c:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00299e:	4b08      	ldr	r3, [pc, #32]	; (1a0029c0 <Chip_UART_Init+0x50>)
1a0029a0:	429c      	cmp	r4, r3
1a0029a2:	d006      	beq.n	1a0029b2 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a0029a4:	2303      	movs	r3, #3
1a0029a6:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0029a8:	2310      	movs	r3, #16
1a0029aa:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a0029ac:	9b01      	ldr	r3, [sp, #4]
}
1a0029ae:	b003      	add	sp, #12
1a0029b0:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a0029b2:	2300      	movs	r3, #0
1a0029b4:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a0029b6:	69a3      	ldr	r3, [r4, #24]
1a0029b8:	9301      	str	r3, [sp, #4]
1a0029ba:	e7f3      	b.n	1a0029a4 <Chip_UART_Init+0x34>
1a0029bc:	1a00a0f8 	.word	0x1a00a0f8
1a0029c0:	40082000 	.word	0x40082000

1a0029c4 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0029c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0029c8:	b083      	sub	sp, #12
1a0029ca:	4683      	mov	fp, r0
1a0029cc:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0029ce:	f7ff ffb9 	bl	1a002944 <Chip_UART_GetIndex>
1a0029d2:	4b35      	ldr	r3, [pc, #212]	; (1a002aa8 <Chip_UART_SetBaudFDR+0xe4>)
1a0029d4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0029d8:	f000 fb76 	bl	1a0030c8 <Chip_Clock_GetRate>
1a0029dc:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0029de:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0029e2:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0029e4:	2300      	movs	r3, #0
1a0029e6:	9301      	str	r3, [sp, #4]
1a0029e8:	46a2      	mov	sl, r4
1a0029ea:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0029ec:	e02a      	b.n	1a002a44 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a0029ee:	4243      	negs	r3, r0
				div ++;
1a0029f0:	1c4a      	adds	r2, r1, #1
1a0029f2:	e017      	b.n	1a002a24 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0029f4:	b30b      	cbz	r3, 1a002a3a <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a0029f6:	461f      	mov	r7, r3
			sd = d;
1a0029f8:	9501      	str	r5, [sp, #4]
			sm = m;
1a0029fa:	46a2      	mov	sl, r4
			sdiv = div;
1a0029fc:	4691      	mov	r9, r2
		for (d = 0; d < m; d++) {
1a0029fe:	3501      	adds	r5, #1
1a002a00:	42ac      	cmp	r4, r5
1a002a02:	d91e      	bls.n	1a002a42 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a002a04:	0933      	lsrs	r3, r6, #4
1a002a06:	0730      	lsls	r0, r6, #28
1a002a08:	fba4 0100 	umull	r0, r1, r4, r0
1a002a0c:	fb04 1103 	mla	r1, r4, r3, r1
1a002a10:	1962      	adds	r2, r4, r5
1a002a12:	fb08 f202 	mul.w	r2, r8, r2
1a002a16:	2300      	movs	r3, #0
1a002a18:	f001 fb1c 	bl	1a004054 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a002a1c:	4603      	mov	r3, r0
			div = (uint32_t) (dval >> 32);
1a002a1e:	460a      	mov	r2, r1
			if ((int)diff < 0) {
1a002a20:	2800      	cmp	r0, #0
1a002a22:	dbe4      	blt.n	1a0029ee <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a002a24:	429f      	cmp	r7, r3
1a002a26:	d3ea      	bcc.n	1a0029fe <Chip_UART_SetBaudFDR+0x3a>
1a002a28:	2a00      	cmp	r2, #0
1a002a2a:	d0e8      	beq.n	1a0029fe <Chip_UART_SetBaudFDR+0x3a>
1a002a2c:	0c11      	lsrs	r1, r2, #16
1a002a2e:	d1e6      	bne.n	1a0029fe <Chip_UART_SetBaudFDR+0x3a>
1a002a30:	2a02      	cmp	r2, #2
1a002a32:	d8df      	bhi.n	1a0029f4 <Chip_UART_SetBaudFDR+0x30>
1a002a34:	2d00      	cmp	r5, #0
1a002a36:	d1e2      	bne.n	1a0029fe <Chip_UART_SetBaudFDR+0x3a>
1a002a38:	e7dc      	b.n	1a0029f4 <Chip_UART_SetBaudFDR+0x30>
			odiff = diff;
1a002a3a:	461f      	mov	r7, r3
			sd = d;
1a002a3c:	9501      	str	r5, [sp, #4]
			sm = m;
1a002a3e:	46a2      	mov	sl, r4
			sdiv = div;
1a002a40:	4691      	mov	r9, r2
	for (m = 1; odiff && m < 16; m++) {
1a002a42:	3401      	adds	r4, #1
1a002a44:	b11f      	cbz	r7, 1a002a4e <Chip_UART_SetBaudFDR+0x8a>
1a002a46:	2c0f      	cmp	r4, #15
1a002a48:	d801      	bhi.n	1a002a4e <Chip_UART_SetBaudFDR+0x8a>
1a002a4a:	2500      	movs	r5, #0
1a002a4c:	e7d8      	b.n	1a002a00 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a002a4e:	f1b9 0f00 	cmp.w	r9, #0
1a002a52:	d024      	beq.n	1a002a9e <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002a54:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002a5c:	f8cb 300c 	str.w	r3, [fp, #12]
1a002a60:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a002a64:	f8cb 3000 	str.w	r3, [fp]
1a002a68:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a002a6c:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002a70:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002a74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002a78:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a002a7c:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a002a80:	b2db      	uxtb	r3, r3
1a002a82:	9901      	ldr	r1, [sp, #4]
1a002a84:	f001 020f 	and.w	r2, r1, #15
1a002a88:	4313      	orrs	r3, r2
1a002a8a:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a002a8e:	0933      	lsrs	r3, r6, #4
1a002a90:	fb03 f30a 	mul.w	r3, r3, sl
1a002a94:	448a      	add	sl, r1
1a002a96:	fb0a f909 	mul.w	r9, sl, r9
1a002a9a:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a002a9e:	4648      	mov	r0, r9
1a002aa0:	b003      	add	sp, #12
1a002aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002aa6:	bf00      	nop
1a002aa8:	1a00a0f0 	.word	0x1a00a0f0

1a002aac <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a002aac:	4b03      	ldr	r3, [pc, #12]	; (1a002abc <Chip_ADC_GetClockIndex+0x10>)
1a002aae:	4298      	cmp	r0, r3
1a002ab0:	d001      	beq.n	1a002ab6 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a002ab2:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a002ab4:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a002ab6:	2004      	movs	r0, #4
1a002ab8:	4770      	bx	lr
1a002aba:	bf00      	nop
1a002abc:	400e4000 	.word	0x400e4000

1a002ac0 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a002ac0:	b570      	push	{r4, r5, r6, lr}
1a002ac2:	460d      	mov	r5, r1
1a002ac4:	4614      	mov	r4, r2
1a002ac6:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a002ac8:	f7ff fff0 	bl	1a002aac <Chip_ADC_GetClockIndex>
1a002acc:	f000 fafc 	bl	1a0030c8 <Chip_Clock_GetRate>
	if (burstMode) {
1a002ad0:	b965      	cbnz	r5, 1a002aec <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a002ad2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a002ad6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a002ada:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a002ade:	0064      	lsls	r4, r4, #1
1a002ae0:	fbb0 f0f4 	udiv	r0, r0, r4
1a002ae4:	b2c0      	uxtb	r0, r0
1a002ae6:	3801      	subs	r0, #1
	return div;
}
1a002ae8:	b2c0      	uxtb	r0, r0
1a002aea:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a002aec:	fb04 f406 	mul.w	r4, r4, r6
1a002af0:	e7f3      	b.n	1a002ada <getClkDiv+0x1a>
1a002af2:	Address 0x000000001a002af2 is out of bounds.


1a002af4 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a002af4:	b538      	push	{r3, r4, r5, lr}
1a002af6:	4605      	mov	r5, r0
1a002af8:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a002afa:	f7ff ffd7 	bl	1a002aac <Chip_ADC_GetClockIndex>
1a002afe:	2301      	movs	r3, #1
1a002b00:	461a      	mov	r2, r3
1a002b02:	4619      	mov	r1, r3
1a002b04:	f000 faa8 	bl	1a003058 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a002b08:	2100      	movs	r1, #0
1a002b0a:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a002b0c:	4a08      	ldr	r2, [pc, #32]	; (1a002b30 <Chip_ADC_Init+0x3c>)
1a002b0e:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a002b10:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a002b12:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a002b14:	230b      	movs	r3, #11
1a002b16:	4628      	mov	r0, r5
1a002b18:	f7ff ffd2 	bl	1a002ac0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002b1c:	0200      	lsls	r0, r0, #8
1a002b1e:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002b22:	7923      	ldrb	r3, [r4, #4]
1a002b24:	045b      	lsls	r3, r3, #17
1a002b26:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a002b2a:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a002b2c:	6028      	str	r0, [r5, #0]
1a002b2e:	bd38      	pop	{r3, r4, r5, pc}
1a002b30:	00061a80 	.word	0x00061a80

1a002b34 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a002b34:	b570      	push	{r4, r5, r6, lr}
1a002b36:	4605      	mov	r5, r0
1a002b38:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a002b3a:	6804      	ldr	r4, [r0, #0]
1a002b3c:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a002b40:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a002b44:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a002b46:	790b      	ldrb	r3, [r1, #4]
1a002b48:	f1c3 030b 	rsb	r3, r3, #11
1a002b4c:	b2db      	uxtb	r3, r3
1a002b4e:	7949      	ldrb	r1, [r1, #5]
1a002b50:	f7ff ffb6 	bl	1a002ac0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002b54:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002b58:	7934      	ldrb	r4, [r6, #4]
1a002b5a:	0464      	lsls	r4, r4, #17
1a002b5c:	f404 2460 	and.w	r4, r4, #917504	; 0xe0000
1a002b60:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a002b62:	6028      	str	r0, [r5, #0]
1a002b64:	bd70      	pop	{r4, r5, r6, pc}

1a002b66 <Chip_ADC_SetResolution>:
}

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a002b66:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a002b68:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a002b6a:	680a      	ldr	r2, [r1, #0]
1a002b6c:	f7ff ffe2 	bl	1a002b34 <Chip_ADC_SetSampleRate>
1a002b70:	bd08      	pop	{r3, pc}
1a002b72:	Address 0x000000001a002b72 is out of bounds.


1a002b74 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a002b74:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a002b76:	2069      	movs	r0, #105	; 0x69
1a002b78:	f000 faa6 	bl	1a0030c8 <Chip_Clock_GetRate>
1a002b7c:	4b01      	ldr	r3, [pc, #4]	; (1a002b84 <SystemCoreClockUpdate+0x10>)
1a002b7e:	6018      	str	r0, [r3, #0]
1a002b80:	bd08      	pop	{r3, pc}
1a002b82:	bf00      	nop
1a002b84:	100033f0 	.word	0x100033f0

1a002b88 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002b88:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a002b8a:	680b      	ldr	r3, [r1, #0]
1a002b8c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002b90:	d002      	beq.n	1a002b98 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a002b92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002b96:	600b      	str	r3, [r1, #0]
1a002b98:	4607      	mov	r7, r0
1a002b9a:	2501      	movs	r5, #1
1a002b9c:	e03b      	b.n	1a002c16 <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a002b9e:	694b      	ldr	r3, [r1, #20]
1a002ba0:	fb03 f302 	mul.w	r3, r3, r2
1a002ba4:	fbb3 f3f5 	udiv	r3, r3, r5
1a002ba8:	e014      	b.n	1a002bd4 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a002baa:	461c      	mov	r4, r3
1a002bac:	e020      	b.n	1a002bf0 <pll_calc_divs+0x68>
		return -val;
1a002bae:	f1ce 0e00 	rsb	lr, lr, #0
1a002bb2:	e020      	b.n	1a002bf6 <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a002bb4:	3201      	adds	r2, #1
1a002bb6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a002bba:	dc26      	bgt.n	1a002c0a <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a002bbc:	680c      	ldr	r4, [r1, #0]
1a002bbe:	f014 0f40 	tst.w	r4, #64	; 0x40
1a002bc2:	d0ec      	beq.n	1a002b9e <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a002bc4:	1c73      	adds	r3, r6, #1
1a002bc6:	fa02 fe03 	lsl.w	lr, r2, r3
1a002bca:	694b      	ldr	r3, [r1, #20]
1a002bcc:	fb03 f30e 	mul.w	r3, r3, lr
1a002bd0:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a002bd4:	f8df e048 	ldr.w	lr, [pc, #72]	; 1a002c20 <pll_calc_divs+0x98>
1a002bd8:	4573      	cmp	r3, lr
1a002bda:	d9eb      	bls.n	1a002bb4 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a002bdc:	f8df e044 	ldr.w	lr, [pc, #68]	; 1a002c24 <pll_calc_divs+0x9c>
1a002be0:	4573      	cmp	r3, lr
1a002be2:	d812      	bhi.n	1a002c0a <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a002be4:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002be8:	d1df      	bne.n	1a002baa <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a002bea:	1c74      	adds	r4, r6, #1
1a002bec:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a002bf0:	ebb0 0e04 	subs.w	lr, r0, r4
1a002bf4:	d4db      	bmi.n	1a002bae <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a002bf6:	4577      	cmp	r7, lr
1a002bf8:	d9dc      	bls.n	1a002bb4 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a002bfa:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a002bfc:	1c77      	adds	r7, r6, #1
1a002bfe:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a002c00:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a002c02:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a002c04:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a002c06:	4677      	mov	r7, lr
1a002c08:	e7d4      	b.n	1a002bb4 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a002c0a:	3601      	adds	r6, #1
1a002c0c:	2e03      	cmp	r6, #3
1a002c0e:	dc01      	bgt.n	1a002c14 <pll_calc_divs+0x8c>
1a002c10:	2201      	movs	r2, #1
1a002c12:	e7d0      	b.n	1a002bb6 <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a002c14:	3501      	adds	r5, #1
1a002c16:	2d04      	cmp	r5, #4
1a002c18:	dc01      	bgt.n	1a002c1e <pll_calc_divs+0x96>
1a002c1a:	2600      	movs	r6, #0
1a002c1c:	e7f6      	b.n	1a002c0c <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a002c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a002c20:	094c5eff 	.word	0x094c5eff
1a002c24:	1312d000 	.word	0x1312d000

1a002c28 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002c28:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002c2a:	b099      	sub	sp, #100	; 0x64
1a002c2c:	4605      	mov	r5, r0
1a002c2e:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a002c30:	2260      	movs	r2, #96	; 0x60
1a002c32:	2100      	movs	r1, #0
1a002c34:	4668      	mov	r0, sp
1a002c36:	f002 faa1 	bl	1a00517c <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a002c3a:	2380      	movs	r3, #128	; 0x80
1a002c3c:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a002c3e:	6963      	ldr	r3, [r4, #20]
1a002c40:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a002c42:	7923      	ldrb	r3, [r4, #4]
1a002c44:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a002c48:	4669      	mov	r1, sp
1a002c4a:	4628      	mov	r0, r5
1a002c4c:	f7ff ff9c 	bl	1a002b88 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a002c50:	9b06      	ldr	r3, [sp, #24]
1a002c52:	429d      	cmp	r5, r3
1a002c54:	d027      	beq.n	1a002ca6 <pll_get_frac+0x7e>
	if (val < 0)
1a002c56:	1aeb      	subs	r3, r5, r3
1a002c58:	d42e      	bmi.n	1a002cb8 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a002c5a:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a002c5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a002c5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002c62:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a002c64:	6963      	ldr	r3, [r4, #20]
1a002c66:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a002c68:	7923      	ldrb	r3, [r4, #4]
1a002c6a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a002c6e:	a910      	add	r1, sp, #64	; 0x40
1a002c70:	4628      	mov	r0, r5
1a002c72:	f7ff ff89 	bl	1a002b88 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a002c76:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a002c78:	429d      	cmp	r5, r3
1a002c7a:	d01f      	beq.n	1a002cbc <pll_get_frac+0x94>
	if (val < 0)
1a002c7c:	1aeb      	subs	r3, r5, r3
1a002c7e:	d425      	bmi.n	1a002ccc <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a002c80:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a002c82:	4b2b      	ldr	r3, [pc, #172]	; (1a002d30 <pll_get_frac+0x108>)
1a002c84:	429d      	cmp	r5, r3
1a002c86:	d923      	bls.n	1a002cd0 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a002c88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a002c8a:	1aed      	subs	r5, r5, r3
1a002c8c:	d433      	bmi.n	1a002cf6 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a002c8e:	42ae      	cmp	r6, r5
1a002c90:	dc3b      	bgt.n	1a002d0a <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a002c92:	42be      	cmp	r6, r7
1a002c94:	dc31      	bgt.n	1a002cfa <pll_get_frac+0xd2>
			*ppll = pll[0];
1a002c96:	466d      	mov	r5, sp
1a002c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c9c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002ca0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002ca4:	e006      	b.n	1a002cb4 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a002ca6:	466d      	mov	r5, sp
1a002ca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002cac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002cb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a002cb4:	b019      	add	sp, #100	; 0x64
1a002cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a002cb8:	425b      	negs	r3, r3
1a002cba:	e7ce      	b.n	1a002c5a <pll_get_frac+0x32>
		*ppll = pll[2];
1a002cbc:	ad10      	add	r5, sp, #64	; 0x40
1a002cbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002cc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002cc2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002cc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a002cca:	e7f3      	b.n	1a002cb4 <pll_get_frac+0x8c>
		return -val;
1a002ccc:	425b      	negs	r3, r3
1a002cce:	e7d7      	b.n	1a002c80 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a002cd0:	2340      	movs	r3, #64	; 0x40
1a002cd2:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a002cd4:	6963      	ldr	r3, [r4, #20]
1a002cd6:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a002cd8:	a908      	add	r1, sp, #32
1a002cda:	4628      	mov	r0, r5
1a002cdc:	f7ff ff54 	bl	1a002b88 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a002ce0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a002ce2:	429d      	cmp	r5, r3
1a002ce4:	d1d0      	bne.n	1a002c88 <pll_get_frac+0x60>
			*ppll = pll[1];
1a002ce6:	ad08      	add	r5, sp, #32
1a002ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002cec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002cf0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a002cf4:	e7de      	b.n	1a002cb4 <pll_get_frac+0x8c>
		return -val;
1a002cf6:	426d      	negs	r5, r5
1a002cf8:	e7c9      	b.n	1a002c8e <pll_get_frac+0x66>
			*ppll = pll[2];
1a002cfa:	ad10      	add	r5, sp, #64	; 0x40
1a002cfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002cfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002d00:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002d04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002d08:	e7d4      	b.n	1a002cb4 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a002d0a:	42af      	cmp	r7, r5
1a002d0c:	db07      	blt.n	1a002d1e <pll_get_frac+0xf6>
			*ppll = pll[1];
1a002d0e:	ad08      	add	r5, sp, #32
1a002d10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002d14:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002d18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002d1c:	e7ca      	b.n	1a002cb4 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a002d1e:	ad10      	add	r5, sp, #64	; 0x40
1a002d20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002d22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002d24:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002d28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002d2c:	e7c2      	b.n	1a002cb4 <pll_get_frac+0x8c>
1a002d2e:	bf00      	nop
1a002d30:	068e7780 	.word	0x068e7780

1a002d34 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a002d34:	b430      	push	{r4, r5}
1a002d36:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a002d38:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a002d3a:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002d3c:	e000      	b.n	1a002d40 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a002d3e:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002d40:	281c      	cmp	r0, #28
1a002d42:	d118      	bne.n	1a002d76 <Chip_Clock_FindBaseClock+0x42>
1a002d44:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002d48:	0051      	lsls	r1, r2, #1
1a002d4a:	4a0c      	ldr	r2, [pc, #48]	; (1a002d7c <Chip_Clock_FindBaseClock+0x48>)
1a002d4c:	440a      	add	r2, r1
1a002d4e:	7914      	ldrb	r4, [r2, #4]
1a002d50:	42a0      	cmp	r0, r4
1a002d52:	d010      	beq.n	1a002d76 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a002d54:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a002d58:	004a      	lsls	r2, r1, #1
1a002d5a:	4908      	ldr	r1, [pc, #32]	; (1a002d7c <Chip_Clock_FindBaseClock+0x48>)
1a002d5c:	5a8a      	ldrh	r2, [r1, r2]
1a002d5e:	42aa      	cmp	r2, r5
1a002d60:	d8ed      	bhi.n	1a002d3e <Chip_Clock_FindBaseClock+0xa>
1a002d62:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002d66:	0051      	lsls	r1, r2, #1
1a002d68:	4a04      	ldr	r2, [pc, #16]	; (1a002d7c <Chip_Clock_FindBaseClock+0x48>)
1a002d6a:	440a      	add	r2, r1
1a002d6c:	8852      	ldrh	r2, [r2, #2]
1a002d6e:	4295      	cmp	r5, r2
1a002d70:	d8e5      	bhi.n	1a002d3e <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a002d72:	4620      	mov	r0, r4
1a002d74:	e7e4      	b.n	1a002d40 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a002d76:	bc30      	pop	{r4, r5}
1a002d78:	4770      	bx	lr
1a002d7a:	bf00      	nop
1a002d7c:	1a00a10c 	.word	0x1a00a10c

1a002d80 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a002d80:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a002d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a002d86:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a002d88:	4a0d      	ldr	r2, [pc, #52]	; (1a002dc0 <Chip_Clock_EnableCrystal+0x40>)
1a002d8a:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a002d8c:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a002d90:	6992      	ldr	r2, [r2, #24]
1a002d92:	4291      	cmp	r1, r2
1a002d94:	d001      	beq.n	1a002d9a <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002d96:	4a0a      	ldr	r2, [pc, #40]	; (1a002dc0 <Chip_Clock_EnableCrystal+0x40>)
1a002d98:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a002d9a:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a002d9e:	4a09      	ldr	r2, [pc, #36]	; (1a002dc4 <Chip_Clock_EnableCrystal+0x44>)
1a002da0:	6811      	ldr	r1, [r2, #0]
1a002da2:	4a09      	ldr	r2, [pc, #36]	; (1a002dc8 <Chip_Clock_EnableCrystal+0x48>)
1a002da4:	4291      	cmp	r1, r2
1a002da6:	d901      	bls.n	1a002dac <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a002da8:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002dac:	4a04      	ldr	r2, [pc, #16]	; (1a002dc0 <Chip_Clock_EnableCrystal+0x40>)
1a002dae:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a002db0:	9b01      	ldr	r3, [sp, #4]
1a002db2:	1e5a      	subs	r2, r3, #1
1a002db4:	9201      	str	r2, [sp, #4]
1a002db6:	2b00      	cmp	r3, #0
1a002db8:	d1fa      	bne.n	1a002db0 <Chip_Clock_EnableCrystal+0x30>
}
1a002dba:	b002      	add	sp, #8
1a002dbc:	4770      	bx	lr
1a002dbe:	bf00      	nop
1a002dc0:	40050000 	.word	0x40050000
1a002dc4:	1a00a074 	.word	0x1a00a074
1a002dc8:	01312cff 	.word	0x01312cff

1a002dcc <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a002dcc:	3012      	adds	r0, #18
1a002dce:	4b05      	ldr	r3, [pc, #20]	; (1a002de4 <Chip_Clock_GetDividerSource+0x18>)
1a002dd0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a002dd4:	f010 0f01 	tst.w	r0, #1
1a002dd8:	d001      	beq.n	1a002dde <Chip_Clock_GetDividerSource+0x12>
		return CLKINPUT_PD;
1a002dda:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a002ddc:	4770      	bx	lr
	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002dde:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002de2:	4770      	bx	lr
1a002de4:	40050000 	.word	0x40050000

1a002de8 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a002de8:	f100 0212 	add.w	r2, r0, #18
1a002dec:	4b03      	ldr	r3, [pc, #12]	; (1a002dfc <Chip_Clock_GetDividerDivisor+0x14>)
1a002dee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a002df2:	4b03      	ldr	r3, [pc, #12]	; (1a002e00 <Chip_Clock_GetDividerDivisor+0x18>)
1a002df4:	5c18      	ldrb	r0, [r3, r0]
}
1a002df6:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a002dfa:	4770      	bx	lr
1a002dfc:	40050000 	.word	0x40050000
1a002e00:	1a00a104 	.word	0x1a00a104

1a002e04 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a002e04:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a002e06:	2810      	cmp	r0, #16
1a002e08:	d80a      	bhi.n	1a002e20 <Chip_Clock_GetClockInputHz+0x1c>
1a002e0a:	e8df f000 	tbb	[pc, r0]
1a002e0e:	0b44      	.short	0x0b44
1a002e10:	0921180d 	.word	0x0921180d
1a002e14:	2d2a2724 	.word	0x2d2a2724
1a002e18:	34300909 	.word	0x34300909
1a002e1c:	3c38      	.short	0x3c38
1a002e1e:	40          	.byte	0x40
1a002e1f:	00          	.byte	0x00
	uint32_t rate = 0;
1a002e20:	2000      	movs	r0, #0
1a002e22:	bd08      	pop	{r3, pc}
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a002e24:	481e      	ldr	r0, [pc, #120]	; (1a002ea0 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a002e26:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002e28:	4b1e      	ldr	r3, [pc, #120]	; (1a002ea4 <Chip_Clock_GetClockInputHz+0xa0>)
1a002e2a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002e2e:	f003 0307 	and.w	r3, r3, #7
1a002e32:	2b04      	cmp	r3, #4
1a002e34:	d001      	beq.n	1a002e3a <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a002e36:	481c      	ldr	r0, [pc, #112]	; (1a002ea8 <Chip_Clock_GetClockInputHz+0xa4>)
1a002e38:	bd08      	pop	{r3, pc}
	uint32_t rate = 0;
1a002e3a:	2000      	movs	r0, #0
1a002e3c:	bd08      	pop	{r3, pc}
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002e3e:	4b19      	ldr	r3, [pc, #100]	; (1a002ea4 <Chip_Clock_GetClockInputHz+0xa0>)
1a002e40:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002e44:	f003 0307 	and.w	r3, r3, #7
1a002e48:	2b04      	cmp	r3, #4
1a002e4a:	d027      	beq.n	1a002e9c <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a002e4c:	4816      	ldr	r0, [pc, #88]	; (1a002ea8 <Chip_Clock_GetClockInputHz+0xa4>)
1a002e4e:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a002e50:	4b16      	ldr	r3, [pc, #88]	; (1a002eac <Chip_Clock_GetClockInputHz+0xa8>)
1a002e52:	6818      	ldr	r0, [r3, #0]
		break;
1a002e54:	bd08      	pop	{r3, pc}

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a002e56:	4b16      	ldr	r3, [pc, #88]	; (1a002eb0 <Chip_Clock_GetClockInputHz+0xac>)
1a002e58:	6818      	ldr	r0, [r3, #0]
		break;
1a002e5a:	bd08      	pop	{r3, pc}

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a002e5c:	4b15      	ldr	r3, [pc, #84]	; (1a002eb4 <Chip_Clock_GetClockInputHz+0xb0>)
1a002e5e:	6818      	ldr	r0, [r3, #0]
		break;
1a002e60:	bd08      	pop	{r3, pc}

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a002e62:	4b14      	ldr	r3, [pc, #80]	; (1a002eb4 <Chip_Clock_GetClockInputHz+0xb0>)
1a002e64:	6858      	ldr	r0, [r3, #4]
		break;
1a002e66:	bd08      	pop	{r3, pc}

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a002e68:	f000 f868 	bl	1a002f3c <Chip_Clock_GetMainPLLHz>
		break;
1a002e6c:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a002e6e:	2100      	movs	r1, #0
1a002e70:	f000 f89a 	bl	1a002fa8 <Chip_Clock_GetDivRate>
		break;
1a002e74:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a002e76:	2101      	movs	r1, #1
1a002e78:	f000 f896 	bl	1a002fa8 <Chip_Clock_GetDivRate>
		break;
1a002e7c:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a002e7e:	2102      	movs	r1, #2
1a002e80:	f000 f892 	bl	1a002fa8 <Chip_Clock_GetDivRate>
		break;
1a002e84:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a002e86:	2103      	movs	r1, #3
1a002e88:	f000 f88e 	bl	1a002fa8 <Chip_Clock_GetDivRate>
		break;
1a002e8c:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a002e8e:	2104      	movs	r1, #4
1a002e90:	f000 f88a 	bl	1a002fa8 <Chip_Clock_GetDivRate>
		break;
1a002e94:	bd08      	pop	{r3, pc}
		rate = CRYSTAL_32K_FREQ_IN;
1a002e96:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a002e9a:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a002e9c:	4806      	ldr	r0, [pc, #24]	; (1a002eb8 <Chip_Clock_GetClockInputHz+0xb4>)
	default:
		break;
	}

	return rate;
}
1a002e9e:	bd08      	pop	{r3, pc}
1a002ea0:	00b71b00 	.word	0x00b71b00
1a002ea4:	40043000 	.word	0x40043000
1a002ea8:	017d7840 	.word	0x017d7840
1a002eac:	1a00a048 	.word	0x1a00a048
1a002eb0:	1a00a074 	.word	0x1a00a074
1a002eb4:	10003344 	.word	0x10003344
1a002eb8:	02faf080 	.word	0x02faf080

1a002ebc <Chip_Clock_CalcMainPLLValue>:
{
1a002ebc:	b538      	push	{r3, r4, r5, lr}
1a002ebe:	4605      	mov	r5, r0
1a002ec0:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a002ec2:	7908      	ldrb	r0, [r1, #4]
1a002ec4:	f7ff ff9e 	bl	1a002e04 <Chip_Clock_GetClockInputHz>
1a002ec8:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a002eca:	4b19      	ldr	r3, [pc, #100]	; (1a002f30 <Chip_Clock_CalcMainPLLValue+0x74>)
1a002ecc:	442b      	add	r3, r5
1a002ece:	4a19      	ldr	r2, [pc, #100]	; (1a002f34 <Chip_Clock_CalcMainPLLValue+0x78>)
1a002ed0:	4293      	cmp	r3, r2
1a002ed2:	d821      	bhi.n	1a002f18 <Chip_Clock_CalcMainPLLValue+0x5c>
1a002ed4:	b318      	cbz	r0, 1a002f1e <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a002ed6:	2380      	movs	r3, #128	; 0x80
1a002ed8:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a002eda:	2300      	movs	r3, #0
1a002edc:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a002ede:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a002ee0:	fbb5 f3f0 	udiv	r3, r5, r0
1a002ee4:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a002ee6:	4a14      	ldr	r2, [pc, #80]	; (1a002f38 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a002ee8:	4295      	cmp	r5, r2
1a002eea:	d903      	bls.n	1a002ef4 <Chip_Clock_CalcMainPLLValue+0x38>
1a002eec:	fb03 f000 	mul.w	r0, r3, r0
1a002ef0:	4285      	cmp	r5, r0
1a002ef2:	d007      	beq.n	1a002f04 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a002ef4:	4621      	mov	r1, r4
1a002ef6:	4628      	mov	r0, r5
1a002ef8:	f7ff fe96 	bl	1a002c28 <pll_get_frac>
		if (!ppll->nsel) {
1a002efc:	68a3      	ldr	r3, [r4, #8]
1a002efe:	b18b      	cbz	r3, 1a002f24 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a002f00:	3b01      	subs	r3, #1
1a002f02:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a002f04:	6923      	ldr	r3, [r4, #16]
1a002f06:	b183      	cbz	r3, 1a002f2a <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a002f08:	68e2      	ldr	r2, [r4, #12]
1a002f0a:	b10a      	cbz	r2, 1a002f10 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a002f0c:	3a01      	subs	r2, #1
1a002f0e:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a002f10:	3b01      	subs	r3, #1
1a002f12:	6123      	str	r3, [r4, #16]
	return 0;
1a002f14:	2000      	movs	r0, #0
1a002f16:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a002f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002f1c:	bd38      	pop	{r3, r4, r5, pc}
1a002f1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002f22:	bd38      	pop	{r3, r4, r5, pc}
			return -1;
1a002f24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002f28:	bd38      	pop	{r3, r4, r5, pc}
		return - 1;
1a002f2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a002f2e:	bd38      	pop	{r3, r4, r5, pc}
1a002f30:	ff6b3a10 	.word	0xff6b3a10
1a002f34:	0b940510 	.word	0x0b940510
1a002f38:	094c5eff 	.word	0x094c5eff

1a002f3c <Chip_Clock_GetMainPLLHz>:
{
1a002f3c:	b530      	push	{r4, r5, lr}
1a002f3e:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a002f40:	4d17      	ldr	r5, [pc, #92]	; (1a002fa0 <Chip_Clock_GetMainPLLHz+0x64>)
1a002f42:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a002f44:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a002f48:	f7ff ff5c 	bl	1a002e04 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a002f4c:	4b15      	ldr	r3, [pc, #84]	; (1a002fa4 <Chip_Clock_GetMainPLLHz+0x68>)
1a002f4e:	681b      	ldr	r3, [r3, #0]
1a002f50:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a002f52:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a002f54:	f013 0f01 	tst.w	r3, #1
1a002f58:	d01f      	beq.n	1a002f9a <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a002f5a:	f3c4 4207 	ubfx	r2, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a002f5e:	f3c4 3301 	ubfx	r3, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a002f62:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a002f66:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a002f6a:	3201      	adds	r2, #1
	n = nsel + 1;
1a002f6c:	3301      	adds	r3, #1
	p = ptab[psel];
1a002f6e:	f10d 0e08 	add.w	lr, sp, #8
1a002f72:	4471      	add	r1, lr
1a002f74:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a002f78:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002f7c:	d108      	bne.n	1a002f90 <Chip_Clock_GetMainPLLHz+0x54>
1a002f7e:	b93d      	cbnz	r5, 1a002f90 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a002f80:	0049      	lsls	r1, r1, #1
1a002f82:	fbb2 f2f1 	udiv	r2, r2, r1
1a002f86:	fbb0 f0f3 	udiv	r0, r0, r3
1a002f8a:	fb00 f002 	mul.w	r0, r0, r2
1a002f8e:	e005      	b.n	1a002f9c <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a002f90:	fbb0 f0f3 	udiv	r0, r0, r3
1a002f94:	fb00 f002 	mul.w	r0, r0, r2
1a002f98:	e000      	b.n	1a002f9c <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a002f9a:	2000      	movs	r0, #0
}
1a002f9c:	b003      	add	sp, #12
1a002f9e:	bd30      	pop	{r4, r5, pc}
1a002fa0:	40050000 	.word	0x40050000
1a002fa4:	1a00a100 	.word	0x1a00a100

1a002fa8 <Chip_Clock_GetDivRate>:
{
1a002fa8:	b538      	push	{r3, r4, r5, lr}
1a002faa:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a002fac:	4608      	mov	r0, r1
1a002fae:	f7ff ff0d 	bl	1a002dcc <Chip_Clock_GetDividerSource>
1a002fb2:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a002fb4:	4620      	mov	r0, r4
1a002fb6:	f7ff ff17 	bl	1a002de8 <Chip_Clock_GetDividerDivisor>
1a002fba:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a002fbc:	4628      	mov	r0, r5
1a002fbe:	f7ff ff21 	bl	1a002e04 <Chip_Clock_GetClockInputHz>
1a002fc2:	3401      	adds	r4, #1
}
1a002fc4:	fbb0 f0f4 	udiv	r0, r0, r4
1a002fc8:	bd38      	pop	{r3, r4, r5, pc}
1a002fca:	Address 0x000000001a002fca is out of bounds.


1a002fcc <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a002fcc:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a002fce:	f100 0416 	add.w	r4, r0, #22
1a002fd2:	00a4      	lsls	r4, r4, #2
1a002fd4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a002fd8:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a002fdc:	6865      	ldr	r5, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a002fde:	281b      	cmp	r0, #27
1a002fe0:	d813      	bhi.n	1a00300a <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a002fe2:	2911      	cmp	r1, #17
1a002fe4:	d01a      	beq.n	1a00301c <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a002fe6:	4c0e      	ldr	r4, [pc, #56]	; (1a003020 <Chip_Clock_SetBaseClock+0x54>)
1a002fe8:	402c      	ands	r4, r5

			if (autoblocken) {
1a002fea:	b10a      	cbz	r2, 1a002ff0 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a002fec:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
			}
			if (powerdn) {
1a002ff0:	b10b      	cbz	r3, 1a002ff6 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a002ff2:	f044 0401 	orr.w	r4, r4, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a002ff6:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a002ffa:	3016      	adds	r0, #22
1a002ffc:	0080      	lsls	r0, r0, #2
1a002ffe:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003002:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003006:	6044      	str	r4, [r0, #4]
1a003008:	e008      	b.n	1a00301c <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a00300a:	f045 0501 	orr.w	r5, r5, #1
1a00300e:	3016      	adds	r0, #22
1a003010:	0080      	lsls	r0, r0, #2
1a003012:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003016:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00301a:	6045      	str	r5, [r0, #4]
	}
}
1a00301c:	bc30      	pop	{r4, r5}
1a00301e:	4770      	bx	lr
1a003020:	e0fff7fe 	.word	0xe0fff7fe

1a003024 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a003024:	281b      	cmp	r0, #27
1a003026:	d901      	bls.n	1a00302c <Chip_Clock_GetBaseClock+0x8>
		return CLKINPUT_PD;
1a003028:	2011      	movs	r0, #17
1a00302a:	4770      	bx	lr
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a00302c:	3016      	adds	r0, #22
1a00302e:	0080      	lsls	r0, r0, #2
1a003030:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003034:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003038:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a00303a:	f010 0f01 	tst.w	r0, #1
1a00303e:	d001      	beq.n	1a003044 <Chip_Clock_GetBaseClock+0x20>
		return CLKINPUT_PD;
1a003040:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a003042:	4770      	bx	lr
	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003044:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a003048:	4770      	bx	lr

1a00304a <Chip_Clock_GetBaseClocktHz>:
{
1a00304a:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a00304c:	f7ff ffea 	bl	1a003024 <Chip_Clock_GetBaseClock>
1a003050:	f7ff fed8 	bl	1a002e04 <Chip_Clock_GetClockInputHz>
}
1a003054:	bd08      	pop	{r3, pc}
1a003056:	Address 0x000000001a003056 is out of bounds.


1a003058 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a003058:	b969      	cbnz	r1, 1a003076 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a00305a:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a00305c:	b10a      	cbz	r2, 1a003062 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a00305e:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a003062:	2b02      	cmp	r3, #2
1a003064:	d009      	beq.n	1a00307a <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a003066:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00306a:	d209      	bcs.n	1a003080 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a00306c:	3020      	adds	r0, #32
1a00306e:	4b07      	ldr	r3, [pc, #28]	; (1a00308c <Chip_Clock_EnableOpts+0x34>)
1a003070:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a003074:	4770      	bx	lr
		reg |= (1 << 1);
1a003076:	2103      	movs	r1, #3
1a003078:	e7f0      	b.n	1a00305c <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a00307a:	f041 0120 	orr.w	r1, r1, #32
1a00307e:	e7f2      	b.n	1a003066 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a003080:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003084:	4b02      	ldr	r3, [pc, #8]	; (1a003090 <Chip_Clock_EnableOpts+0x38>)
1a003086:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a00308a:	4770      	bx	lr
1a00308c:	40051000 	.word	0x40051000
1a003090:	40052000 	.word	0x40052000

1a003094 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a003094:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003098:	d208      	bcs.n	1a0030ac <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a00309a:	4a09      	ldr	r2, [pc, #36]	; (1a0030c0 <Chip_Clock_Enable+0x2c>)
1a00309c:	3020      	adds	r0, #32
1a00309e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0030a2:	f043 0301 	orr.w	r3, r3, #1
1a0030a6:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0030aa:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a0030ac:	4a05      	ldr	r2, [pc, #20]	; (1a0030c4 <Chip_Clock_Enable+0x30>)
1a0030ae:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0030b2:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0030b6:	f043 0301 	orr.w	r3, r3, #1
1a0030ba:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0030be:	4770      	bx	lr
1a0030c0:	40051000 	.word	0x40051000
1a0030c4:	40052000 	.word	0x40052000

1a0030c8 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0030c8:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0030ca:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0030ce:	d309      	bcc.n	1a0030e4 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0030d0:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a0030d4:	4a0d      	ldr	r2, [pc, #52]	; (1a00310c <Chip_Clock_GetRate+0x44>)
1a0030d6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a0030da:	f014 0f01 	tst.w	r4, #1
1a0030de:	d107      	bne.n	1a0030f0 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a0030e0:	2000      	movs	r0, #0
	}

	return rate;
}
1a0030e2:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0030e4:	f100 0320 	add.w	r3, r0, #32
1a0030e8:	4a09      	ldr	r2, [pc, #36]	; (1a003110 <Chip_Clock_GetRate+0x48>)
1a0030ea:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0030ee:	e7f4      	b.n	1a0030da <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a0030f0:	f7ff fe20 	bl	1a002d34 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0030f4:	f7ff ffa9 	bl	1a00304a <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a0030f8:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0030fc:	d103      	bne.n	1a003106 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a0030fe:	2301      	movs	r3, #1
		rate = rate / div;
1a003100:	fbb0 f0f3 	udiv	r0, r0, r3
1a003104:	bd10      	pop	{r4, pc}
			div = 2;/* No other dividers supported */
1a003106:	2302      	movs	r3, #2
1a003108:	e7fa      	b.n	1a003100 <Chip_Clock_GetRate+0x38>
1a00310a:	bf00      	nop
1a00310c:	40052000 	.word	0x40052000
1a003110:	40051000 	.word	0x40051000

1a003114 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a003114:	b570      	push	{r4, r5, r6, lr}
1a003116:	b08a      	sub	sp, #40	; 0x28
1a003118:	4605      	mov	r5, r0
1a00311a:	460e      	mov	r6, r1
1a00311c:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a00311e:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003122:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a003124:	2806      	cmp	r0, #6
1a003126:	d018      	beq.n	1a00315a <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a003128:	2300      	movs	r3, #0
1a00312a:	2201      	movs	r2, #1
1a00312c:	4629      	mov	r1, r5
1a00312e:	2004      	movs	r0, #4
1a003130:	f7ff ff4c 	bl	1a002fcc <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a003134:	4a49      	ldr	r2, [pc, #292]	; (1a00325c <Chip_SetupCoreClock+0x148>)
1a003136:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a003138:	f043 0301 	orr.w	r3, r3, #1
1a00313c:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a00313e:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a003142:	a901      	add	r1, sp, #4
1a003144:	4630      	mov	r0, r6
1a003146:	f7ff feb9 	bl	1a002ebc <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00314a:	4b45      	ldr	r3, [pc, #276]	; (1a003260 <Chip_SetupCoreClock+0x14c>)
1a00314c:	429e      	cmp	r6, r3
1a00314e:	d916      	bls.n	1a00317e <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a003150:	9b01      	ldr	r3, [sp, #4]
1a003152:	f013 0f40 	tst.w	r3, #64	; 0x40
1a003156:	d003      	beq.n	1a003160 <Chip_SetupCoreClock+0x4c>
1a003158:	e7fe      	b.n	1a003158 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a00315a:	f7ff fe11 	bl	1a002d80 <Chip_Clock_EnableCrystal>
1a00315e:	e7e3      	b.n	1a003128 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a003160:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003164:	d005      	beq.n	1a003172 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a003166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00316a:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a00316c:	2500      	movs	r5, #0
			direct = 1;
1a00316e:	2601      	movs	r6, #1
1a003170:	e007      	b.n	1a003182 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a003172:	9b04      	ldr	r3, [sp, #16]
1a003174:	3301      	adds	r3, #1
1a003176:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a003178:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a00317a:	2600      	movs	r6, #0
1a00317c:	e001      	b.n	1a003182 <Chip_SetupCoreClock+0x6e>
1a00317e:	2500      	movs	r5, #0
1a003180:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003182:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003186:	9b01      	ldr	r3, [sp, #4]
1a003188:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00318c:	9a05      	ldr	r2, [sp, #20]
1a00318e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003192:	9a03      	ldr	r2, [sp, #12]
1a003194:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003198:	9a04      	ldr	r2, [sp, #16]
1a00319a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00319e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0031a2:	4a2e      	ldr	r2, [pc, #184]	; (1a00325c <Chip_SetupCoreClock+0x148>)
1a0031a4:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0031a6:	4b2d      	ldr	r3, [pc, #180]	; (1a00325c <Chip_SetupCoreClock+0x148>)
1a0031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0031aa:	f013 0f01 	tst.w	r3, #1
1a0031ae:	d0fa      	beq.n	1a0031a6 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0031b0:	2300      	movs	r3, #0
1a0031b2:	2201      	movs	r2, #1
1a0031b4:	2109      	movs	r1, #9
1a0031b6:	2004      	movs	r0, #4
1a0031b8:	f7ff ff08 	bl	1a002fcc <Chip_Clock_SetBaseClock>

	if (direct) {
1a0031bc:	b1fe      	cbz	r6, 1a0031fe <Chip_SetupCoreClock+0xea>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0031be:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0031c2:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a0031c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0031c6:	1e5a      	subs	r2, r3, #1
1a0031c8:	9209      	str	r2, [sp, #36]	; 0x24
1a0031ca:	2b00      	cmp	r3, #0
1a0031cc:	d1fa      	bne.n	1a0031c4 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a0031ce:	9b01      	ldr	r3, [sp, #4]
1a0031d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0031d4:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0031d6:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0031da:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0031de:	9a05      	ldr	r2, [sp, #20]
1a0031e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0031e4:	9a03      	ldr	r2, [sp, #12]
1a0031e6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0031ea:	9a04      	ldr	r2, [sp, #16]
1a0031ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0031f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0031f4:	4a19      	ldr	r2, [pc, #100]	; (1a00325c <Chip_SetupCoreClock+0x148>)
1a0031f6:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0031f8:	b36c      	cbz	r4, 1a003256 <Chip_SetupCoreClock+0x142>
1a0031fa:	2400      	movs	r4, #0
1a0031fc:	e029      	b.n	1a003252 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a0031fe:	2d00      	cmp	r5, #0
1a003200:	d0fa      	beq.n	1a0031f8 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003202:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003206:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a003208:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00320a:	1e5a      	subs	r2, r3, #1
1a00320c:	9209      	str	r2, [sp, #36]	; 0x24
1a00320e:	2b00      	cmp	r3, #0
1a003210:	d1fa      	bne.n	1a003208 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a003212:	9b04      	ldr	r3, [sp, #16]
1a003214:	1e5a      	subs	r2, r3, #1
1a003216:	9204      	str	r2, [sp, #16]
1a003218:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a00321c:	9b01      	ldr	r3, [sp, #4]
1a00321e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a003222:	9905      	ldr	r1, [sp, #20]
1a003224:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003228:	9903      	ldr	r1, [sp, #12]
1a00322a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a00322e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003232:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003236:	4a09      	ldr	r2, [pc, #36]	; (1a00325c <Chip_SetupCoreClock+0x148>)
1a003238:	6453      	str	r3, [r2, #68]	; 0x44
1a00323a:	e7dd      	b.n	1a0031f8 <Chip_SetupCoreClock+0xe4>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a00323c:	4809      	ldr	r0, [pc, #36]	; (1a003264 <Chip_SetupCoreClock+0x150>)
1a00323e:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a003242:	78cb      	ldrb	r3, [r1, #3]
1a003244:	788a      	ldrb	r2, [r1, #2]
1a003246:	7849      	ldrb	r1, [r1, #1]
1a003248:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00324c:	f7ff febe 	bl	1a002fcc <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003250:	3401      	adds	r4, #1
1a003252:	2c11      	cmp	r4, #17
1a003254:	d9f2      	bls.n	1a00323c <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a003256:	b00a      	add	sp, #40	; 0x28
1a003258:	bd70      	pop	{r4, r5, r6, pc}
1a00325a:	bf00      	nop
1a00325c:	40050000 	.word	0x40050000
1a003260:	068e7780 	.word	0x068e7780
1a003264:	1a00a178 	.word	0x1a00a178

1a003268 <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a003268:	4770      	bx	lr
1a00326a:	Address 0x000000001a00326a is out of bounds.


1a00326c <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a00326c:	4b03      	ldr	r3, [pc, #12]	; (1a00327c <Chip_SSP_GetClockIndex+0x10>)
1a00326e:	4298      	cmp	r0, r3
1a003270:	d001      	beq.n	1a003276 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a003272:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a003274:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a003276:	20a5      	movs	r0, #165	; 0xa5
1a003278:	4770      	bx	lr
1a00327a:	bf00      	nop
1a00327c:	400c5000 	.word	0x400c5000

1a003280 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003280:	4b04      	ldr	r3, [pc, #16]	; (1a003294 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a003282:	4298      	cmp	r0, r3
1a003284:	d002      	beq.n	1a00328c <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a003286:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00328a:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a00328c:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a003290:	4770      	bx	lr
1a003292:	bf00      	nop
1a003294:	400c5000 	.word	0x400c5000

1a003298 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a003298:	6803      	ldr	r3, [r0, #0]
1a00329a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00329e:	0209      	lsls	r1, r1, #8
1a0032a0:	b289      	uxth	r1, r1
1a0032a2:	430b      	orrs	r3, r1
1a0032a4:	6003      	str	r3, [r0, #0]
	pSSP->CPSR = prescale;
1a0032a6:	6102      	str	r2, [r0, #16]
1a0032a8:	4770      	bx	lr

1a0032aa <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a0032aa:	b570      	push	{r4, r5, r6, lr}
1a0032ac:	4606      	mov	r6, r0
1a0032ae:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0032b0:	f7ff ffe6 	bl	1a003280 <Chip_SSP_GetPeriphClockIndex>
1a0032b4:	f7ff ff08 	bl	1a0030c8 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0032b8:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a0032ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a0032be:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0032c0:	e000      	b.n	1a0032c4 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0032c2:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a0032c4:	42ab      	cmp	r3, r5
1a0032c6:	d90b      	bls.n	1a0032e0 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0032c8:	1c4c      	adds	r4, r1, #1
1a0032ca:	fb04 f302 	mul.w	r3, r4, r2
1a0032ce:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0032d2:	429d      	cmp	r5, r3
1a0032d4:	d2f6      	bcs.n	1a0032c4 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a0032d6:	2cff      	cmp	r4, #255	; 0xff
1a0032d8:	d9f3      	bls.n	1a0032c2 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a0032da:	3202      	adds	r2, #2
				cr0_div = 0;
1a0032dc:	2100      	movs	r1, #0
1a0032de:	e7f1      	b.n	1a0032c4 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a0032e0:	4630      	mov	r0, r6
1a0032e2:	f7ff ffd9 	bl	1a003298 <Chip_SSP_SetClockRate>
1a0032e6:	bd70      	pop	{r4, r5, r6, pc}

1a0032e8 <Chip_SSP_Init>:
}

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a0032e8:	b510      	push	{r4, lr}
1a0032ea:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0032ec:	f7ff ffbe 	bl	1a00326c <Chip_SSP_GetClockIndex>
1a0032f0:	f7ff fed0 	bl	1a003094 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0032f4:	4620      	mov	r0, r4
1a0032f6:	f7ff ffc3 	bl	1a003280 <Chip_SSP_GetPeriphClockIndex>
1a0032fa:	f7ff fecb 	bl	1a003094 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0032fe:	6863      	ldr	r3, [r4, #4]
1a003300:	f023 0304 	bic.w	r3, r3, #4
1a003304:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003306:	6823      	ldr	r3, [r4, #0]
1a003308:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a00330c:	f043 0307 	orr.w	r3, r3, #7
1a003310:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a003312:	4902      	ldr	r1, [pc, #8]	; (1a00331c <Chip_SSP_Init+0x34>)
1a003314:	4620      	mov	r0, r4
1a003316:	f7ff ffc8 	bl	1a0032aa <Chip_SSP_SetBitRate>
1a00331a:	bd10      	pop	{r4, pc}
1a00331c:	000186a0 	.word	0x000186a0

1a003320 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a003320:	2901      	cmp	r1, #1
1a003322:	d000      	beq.n	1a003326 <Chip_I2C_EventHandler+0x6>
1a003324:	4770      	bx	lr
		return;
	}

	stat = &iic->mXfer->status;
1a003326:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00332a:	0082      	lsls	r2, r0, #2
1a00332c:	4b03      	ldr	r3, [pc, #12]	; (1a00333c <Chip_I2C_EventHandler+0x1c>)
1a00332e:	4413      	add	r3, r2
1a003330:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a003332:	7d13      	ldrb	r3, [r2, #20]
1a003334:	b2db      	uxtb	r3, r3
1a003336:	2b04      	cmp	r3, #4
1a003338:	d0fb      	beq.n	1a003332 <Chip_I2C_EventHandler+0x12>
1a00333a:	e7f3      	b.n	1a003324 <Chip_I2C_EventHandler+0x4>
1a00333c:	10000004 	.word	0x10000004

1a003340 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a003340:	b570      	push	{r4, r5, r6, lr}
1a003342:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a003344:	4e06      	ldr	r6, [pc, #24]	; (1a003360 <Chip_I2C_Init+0x20>)
1a003346:	00c4      	lsls	r4, r0, #3
1a003348:	1a22      	subs	r2, r4, r0
1a00334a:	0093      	lsls	r3, r2, #2
1a00334c:	4433      	add	r3, r6
1a00334e:	8898      	ldrh	r0, [r3, #4]
1a003350:	f7ff fea0 	bl	1a003094 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a003354:	1b64      	subs	r4, r4, r5
1a003356:	00a3      	lsls	r3, r4, #2
1a003358:	58f3      	ldr	r3, [r6, r3]
1a00335a:	226c      	movs	r2, #108	; 0x6c
1a00335c:	619a      	str	r2, [r3, #24]
1a00335e:	bd70      	pop	{r4, r5, r6, pc}
1a003360:	10000004 	.word	0x10000004

1a003364 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a003364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003368:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a00336a:	4e0b      	ldr	r6, [pc, #44]	; (1a003398 <Chip_I2C_SetClockRate+0x34>)
1a00336c:	00c5      	lsls	r5, r0, #3
1a00336e:	1a2b      	subs	r3, r5, r0
1a003370:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a003374:	eb06 0308 	add.w	r3, r6, r8
1a003378:	8898      	ldrh	r0, [r3, #4]
1a00337a:	f7ff fea5 	bl	1a0030c8 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a00337e:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a003382:	f856 3008 	ldr.w	r3, [r6, r8]
1a003386:	0842      	lsrs	r2, r0, #1
1a003388:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a00338a:	f856 3008 	ldr.w	r3, [r6, r8]
1a00338e:	691a      	ldr	r2, [r3, #16]
1a003390:	1a80      	subs	r0, r0, r2
1a003392:	6158      	str	r0, [r3, #20]
1a003394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003398:	10000004 	.word	0x10000004

1a00339c <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a00339c:	b508      	push	{r3, lr}
   // to use CMSIS.
   volatile unsigned int *pCREG_M0APPMAP = (volatile unsigned int *) 0x40043404;
   // CMSIS : CREG->M0APPMAP = <address of vector table>
   *pCREG_M0APPMAP = (unsigned int)g_pfnVectors;
#else
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a00339e:	4b0d      	ldr	r3, [pc, #52]	; (1a0033d4 <SystemInit+0x38>)
1a0033a0:	4a0d      	ldr	r2, [pc, #52]	; (1a0033d8 <SystemInit+0x3c>)
1a0033a2:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a0033a4:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a0033a8:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a0033aa:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a0033ae:	2b20      	cmp	r3, #32
1a0033b0:	d00d      	beq.n	1a0033ce <SystemInit+0x32>
  {
    return 1U;           /* Single precision FPU */
  }
  else
  {
    return 0U;           /* No FPU */
1a0033b2:	2300      	movs	r3, #0

   if (SCB_GetFPUType() > 0)
1a0033b4:	b133      	cbz	r3, 1a0033c4 <SystemInit+0x28>
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a0033b6:	4a07      	ldr	r2, [pc, #28]	; (1a0033d4 <SystemInit+0x38>)
1a0033b8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0033bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0033c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

   /* Board specific SystemInit only in M4 */
   Board_SystemInit();
1a0033c4:	f7ff fab8 	bl	1a002938 <Board_SystemInit>
   Board_Init();
1a0033c8:	f7ff fa3e 	bl	1a002848 <Board_Init>
1a0033cc:	bd08      	pop	{r3, pc}
    return 1U;           /* Single precision FPU */
1a0033ce:	2301      	movs	r3, #1
1a0033d0:	e7f0      	b.n	1a0033b4 <SystemInit+0x18>
1a0033d2:	bf00      	nop
1a0033d4:	e000ed00 	.word	0xe000ed00
1a0033d8:	1a000000 	.word	0x1a000000

1a0033dc <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0033dc:	4b04      	ldr	r3, [pc, #16]	; (1a0033f0 <cyclesCounterInit+0x14>)
1a0033de:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a0033e0:	4a04      	ldr	r2, [pc, #16]	; (1a0033f4 <cyclesCounterInit+0x18>)
1a0033e2:	6813      	ldr	r3, [r2, #0]
1a0033e4:	f043 0301 	orr.w	r3, r3, #1
1a0033e8:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0033ea:	2001      	movs	r0, #1
1a0033ec:	4770      	bx	lr
1a0033ee:	bf00      	nop
1a0033f0:	1000003c 	.word	0x1000003c
1a0033f4:	e0001000 	.word	0xe0001000

1a0033f8 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a0033f8:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a0033fa:	4d0b      	ldr	r5, [pc, #44]	; (1a003428 <gpioObtainPinInit+0x30>)
1a0033fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a003400:	182c      	adds	r4, r5, r0
1a003402:	5628      	ldrsb	r0, [r5, r0]
1a003404:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a003406:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00340a:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a00340c:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a003410:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a003412:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a003416:	9b02      	ldr	r3, [sp, #8]
1a003418:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00341a:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a00341e:	9b03      	ldr	r3, [sp, #12]
1a003420:	701a      	strb	r2, [r3, #0]
}
1a003422:	bc30      	pop	{r4, r5}
1a003424:	4770      	bx	lr
1a003426:	bf00      	nop
1a003428:	1a00a1c0 	.word	0x1a00a1c0

1a00342c <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a00342c:	f110 0f02 	cmn.w	r0, #2
1a003430:	f000 80c7 	beq.w	1a0035c2 <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a003434:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a003438:	f000 80c5 	beq.w	1a0035c6 <gpioInit+0x19a>
{
1a00343c:	b570      	push	{r4, r5, r6, lr}
1a00343e:	b084      	sub	sp, #16
1a003440:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a003442:	2300      	movs	r3, #0
1a003444:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003448:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00344c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003450:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003454:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003458:	f10d 030b 	add.w	r3, sp, #11
1a00345c:	9301      	str	r3, [sp, #4]
1a00345e:	ab03      	add	r3, sp, #12
1a003460:	9300      	str	r3, [sp, #0]
1a003462:	f10d 030d 	add.w	r3, sp, #13
1a003466:	f10d 020e 	add.w	r2, sp, #14
1a00346a:	f10d 010f 	add.w	r1, sp, #15
1a00346e:	f7ff ffc3 	bl	1a0033f8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a003472:	2c05      	cmp	r4, #5
1a003474:	f200 80a9 	bhi.w	1a0035ca <gpioInit+0x19e>
1a003478:	e8df f004 	tbb	[pc, r4]
1a00347c:	45278109 	.word	0x45278109
1a003480:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a003482:	4853      	ldr	r0, [pc, #332]	; (1a0035d0 <gpioInit+0x1a4>)
1a003484:	f7ff fef0 	bl	1a003268 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a003488:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a00348a:	b004      	add	sp, #16
1a00348c:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a00348e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003492:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003496:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00349a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00349e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0034a2:	494c      	ldr	r1, [pc, #304]	; (1a0035d4 <gpioInit+0x1a8>)
1a0034a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0034a8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0034ac:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0034b0:	2001      	movs	r0, #1
1a0034b2:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0034b6:	4c46      	ldr	r4, [pc, #280]	; (1a0035d0 <gpioInit+0x1a4>)
1a0034b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0034bc:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0034c0:	ea22 0201 	bic.w	r2, r2, r1
1a0034c4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0034c8:	e7df      	b.n	1a00348a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0034ca:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0034ce:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0034d2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0034d6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0034da:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0034de:	493d      	ldr	r1, [pc, #244]	; (1a0035d4 <gpioInit+0x1a8>)
1a0034e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0034e4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0034e8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0034ec:	2001      	movs	r0, #1
1a0034ee:	fa00 f102 	lsl.w	r1, r0, r2
1a0034f2:	4c37      	ldr	r4, [pc, #220]	; (1a0035d0 <gpioInit+0x1a4>)
1a0034f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0034f8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0034fc:	ea22 0201 	bic.w	r2, r2, r1
1a003500:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003504:	e7c1      	b.n	1a00348a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a003506:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00350a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00350e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003512:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a003516:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00351a:	492e      	ldr	r1, [pc, #184]	; (1a0035d4 <gpioInit+0x1a8>)
1a00351c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003520:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003524:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003528:	2001      	movs	r0, #1
1a00352a:	fa00 f102 	lsl.w	r1, r0, r2
1a00352e:	4c28      	ldr	r4, [pc, #160]	; (1a0035d0 <gpioInit+0x1a4>)
1a003530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003534:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003538:	ea22 0201 	bic.w	r2, r2, r1
1a00353c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003540:	e7a3      	b.n	1a00348a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a003542:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003546:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00354a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00354e:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a003552:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003556:	491f      	ldr	r1, [pc, #124]	; (1a0035d4 <gpioInit+0x1a8>)
1a003558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00355c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003560:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003564:	2001      	movs	r0, #1
1a003566:	fa00 f102 	lsl.w	r1, r0, r2
1a00356a:	4c19      	ldr	r4, [pc, #100]	; (1a0035d0 <gpioInit+0x1a4>)
1a00356c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003570:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003574:	ea22 0201 	bic.w	r2, r2, r1
1a003578:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00357c:	e785      	b.n	1a00348a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00357e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003582:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003586:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00358a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00358e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003592:	4910      	ldr	r1, [pc, #64]	; (1a0035d4 <gpioInit+0x1a8>)
1a003594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a003598:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a00359c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0035a0:	2001      	movs	r0, #1
1a0035a2:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0035a6:	4b0a      	ldr	r3, [pc, #40]	; (1a0035d0 <gpioInit+0x1a4>)
1a0035a8:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0035ac:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0035b0:	4331      	orrs	r1, r6
1a0035b2:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0035b6:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0035b8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0035bc:	2100      	movs	r1, #0
1a0035be:	5499      	strb	r1, [r3, r2]
1a0035c0:	e763      	b.n	1a00348a <gpioInit+0x5e>
	  return FALSE;
1a0035c2:	2000      	movs	r0, #0
1a0035c4:	4770      	bx	lr
	  return FALSE;
1a0035c6:	2000      	movs	r0, #0
1a0035c8:	4770      	bx	lr
      ret_val = 0;
1a0035ca:	2000      	movs	r0, #0
1a0035cc:	e75d      	b.n	1a00348a <gpioInit+0x5e>
1a0035ce:	bf00      	nop
1a0035d0:	400f4000 	.word	0x400f4000
1a0035d4:	40086000 	.word	0x40086000

1a0035d8 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a0035d8:	f110 0f02 	cmn.w	r0, #2
1a0035dc:	d02d      	beq.n	1a00363a <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a0035de:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0035e2:	d02c      	beq.n	1a00363e <gpioWrite+0x66>
{
1a0035e4:	b510      	push	{r4, lr}
1a0035e6:	b084      	sub	sp, #16
1a0035e8:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0035ea:	2300      	movs	r3, #0
1a0035ec:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0035f0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0035f4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0035f8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0035fc:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003600:	f10d 030b 	add.w	r3, sp, #11
1a003604:	9301      	str	r3, [sp, #4]
1a003606:	ab03      	add	r3, sp, #12
1a003608:	9300      	str	r3, [sp, #0]
1a00360a:	f10d 030d 	add.w	r3, sp, #13
1a00360e:	f10d 020e 	add.w	r2, sp, #14
1a003612:	f10d 010f 	add.w	r1, sp, #15
1a003616:	f7ff feef 	bl	1a0033f8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a00361a:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00361e:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a003622:	1c21      	adds	r1, r4, #0
1a003624:	bf18      	it	ne
1a003626:	2101      	movne	r1, #1
1a003628:	015b      	lsls	r3, r3, #5
1a00362a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00362e:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a003632:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a003634:	2001      	movs	r0, #1
}
1a003636:	b004      	add	sp, #16
1a003638:	bd10      	pop	{r4, pc}
	  return FALSE;
1a00363a:	2000      	movs	r0, #0
1a00363c:	4770      	bx	lr
	  return FALSE;
1a00363e:	2000      	movs	r0, #0
1a003640:	4770      	bx	lr

1a003642 <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a003642:	f110 0f02 	cmn.w	r0, #2
1a003646:	d02c      	beq.n	1a0036a2 <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a003648:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00364c:	d02b      	beq.n	1a0036a6 <gpioRead+0x64>
{
1a00364e:	b500      	push	{lr}
1a003650:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a003652:	2300      	movs	r3, #0
1a003654:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003658:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00365c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003660:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003664:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003668:	f10d 030b 	add.w	r3, sp, #11
1a00366c:	9301      	str	r3, [sp, #4]
1a00366e:	ab03      	add	r3, sp, #12
1a003670:	9300      	str	r3, [sp, #0]
1a003672:	f10d 030d 	add.w	r3, sp, #13
1a003676:	f10d 020e 	add.w	r2, sp, #14
1a00367a:	f10d 010f 	add.w	r1, sp, #15
1a00367e:	f7ff febb 	bl	1a0033f8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a003682:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a003686:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a00368a:	015b      	lsls	r3, r3, #5
1a00368c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a003690:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a003694:	5c98      	ldrb	r0, [r3, r2]
1a003696:	3000      	adds	r0, #0
1a003698:	bf18      	it	ne
1a00369a:	2001      	movne	r0, #1

   return ret_val;
}
1a00369c:	b005      	add	sp, #20
1a00369e:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a0036a2:	2001      	movs	r0, #1
1a0036a4:	4770      	bx	lr
      return FALSE;
1a0036a6:	2000      	movs	r0, #0
1a0036a8:	4770      	bx	lr
1a0036aa:	Address 0x000000001a0036aa is out of bounds.


1a0036ac <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a0036ac:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a0036ae:	4b04      	ldr	r3, [pc, #16]	; (1a0036c0 <USB0_IRQHandler+0x14>)
1a0036b0:	681b      	ldr	r3, [r3, #0]
1a0036b2:	681b      	ldr	r3, [r3, #0]
1a0036b4:	68db      	ldr	r3, [r3, #12]
1a0036b6:	4a03      	ldr	r2, [pc, #12]	; (1a0036c4 <USB0_IRQHandler+0x18>)
1a0036b8:	6810      	ldr	r0, [r2, #0]
1a0036ba:	4798      	blx	r3
1a0036bc:	bd08      	pop	{r3, pc}
1a0036be:	bf00      	nop
1a0036c0:	100033f4 	.word	0x100033f4
1a0036c4:	1000334c 	.word	0x1000334c

1a0036c8 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a0036c8:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a0036ca:	f7ff fa53 	bl	1a002b74 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a0036ce:	4b18      	ldr	r3, [pc, #96]	; (1a003730 <boardInit+0x68>)
1a0036d0:	6818      	ldr	r0, [r3, #0]
1a0036d2:	f7ff fe83 	bl	1a0033dc <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a0036d6:	2105      	movs	r1, #5
1a0036d8:	2000      	movs	r0, #0
1a0036da:	f7ff fea7 	bl	1a00342c <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a0036de:	2100      	movs	r1, #0
1a0036e0:	2024      	movs	r0, #36	; 0x24
1a0036e2:	f7ff fea3 	bl	1a00342c <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a0036e6:	2100      	movs	r1, #0
1a0036e8:	2025      	movs	r0, #37	; 0x25
1a0036ea:	f7ff fe9f 	bl	1a00342c <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a0036ee:	2100      	movs	r1, #0
1a0036f0:	2026      	movs	r0, #38	; 0x26
1a0036f2:	f7ff fe9b 	bl	1a00342c <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a0036f6:	2100      	movs	r1, #0
1a0036f8:	2027      	movs	r0, #39	; 0x27
1a0036fa:	f7ff fe97 	bl	1a00342c <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a0036fe:	2101      	movs	r1, #1
1a003700:	2028      	movs	r0, #40	; 0x28
1a003702:	f7ff fe93 	bl	1a00342c <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a003706:	2101      	movs	r1, #1
1a003708:	2029      	movs	r0, #41	; 0x29
1a00370a:	f7ff fe8f 	bl	1a00342c <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a00370e:	2101      	movs	r1, #1
1a003710:	202a      	movs	r0, #42	; 0x2a
1a003712:	f7ff fe8b 	bl	1a00342c <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a003716:	2101      	movs	r1, #1
1a003718:	202b      	movs	r0, #43	; 0x2b
1a00371a:	f7ff fe87 	bl	1a00342c <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a00371e:	2101      	movs	r1, #1
1a003720:	202c      	movs	r0, #44	; 0x2c
1a003722:	f7ff fe83 	bl	1a00342c <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a003726:	2101      	movs	r1, #1
1a003728:	202d      	movs	r0, #45	; 0x2d
1a00372a:	f7ff fe7f 	bl	1a00342c <gpioInit>
1a00372e:	bd08      	pop	{r3, pc}
1a003730:	100033f0 	.word	0x100033f0

1a003734 <__aeabi_drsub>:
1a003734:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a003738:	e002      	b.n	1a003740 <__adddf3>
1a00373a:	bf00      	nop

1a00373c <__aeabi_dsub>:
1a00373c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a003740 <__adddf3>:
1a003740:	b530      	push	{r4, r5, lr}
1a003742:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a003746:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a00374a:	ea94 0f05 	teq	r4, r5
1a00374e:	bf08      	it	eq
1a003750:	ea90 0f02 	teqeq	r0, r2
1a003754:	bf1f      	itttt	ne
1a003756:	ea54 0c00 	orrsne.w	ip, r4, r0
1a00375a:	ea55 0c02 	orrsne.w	ip, r5, r2
1a00375e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a003762:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a003766:	f000 80e2 	beq.w	1a00392e <__adddf3+0x1ee>
1a00376a:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a00376e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a003772:	bfb8      	it	lt
1a003774:	426d      	neglt	r5, r5
1a003776:	dd0c      	ble.n	1a003792 <__adddf3+0x52>
1a003778:	442c      	add	r4, r5
1a00377a:	ea80 0202 	eor.w	r2, r0, r2
1a00377e:	ea81 0303 	eor.w	r3, r1, r3
1a003782:	ea82 0000 	eor.w	r0, r2, r0
1a003786:	ea83 0101 	eor.w	r1, r3, r1
1a00378a:	ea80 0202 	eor.w	r2, r0, r2
1a00378e:	ea81 0303 	eor.w	r3, r1, r3
1a003792:	2d36      	cmp	r5, #54	; 0x36
1a003794:	bf88      	it	hi
1a003796:	bd30      	pophi	{r4, r5, pc}
1a003798:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a00379c:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a0037a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a0037a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a0037a8:	d002      	beq.n	1a0037b0 <__adddf3+0x70>
1a0037aa:	4240      	negs	r0, r0
1a0037ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a0037b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a0037b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a0037b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a0037bc:	d002      	beq.n	1a0037c4 <__adddf3+0x84>
1a0037be:	4252      	negs	r2, r2
1a0037c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a0037c4:	ea94 0f05 	teq	r4, r5
1a0037c8:	f000 80a7 	beq.w	1a00391a <__adddf3+0x1da>
1a0037cc:	f1a4 0401 	sub.w	r4, r4, #1
1a0037d0:	f1d5 0e20 	rsbs	lr, r5, #32
1a0037d4:	db0d      	blt.n	1a0037f2 <__adddf3+0xb2>
1a0037d6:	fa02 fc0e 	lsl.w	ip, r2, lr
1a0037da:	fa22 f205 	lsr.w	r2, r2, r5
1a0037de:	1880      	adds	r0, r0, r2
1a0037e0:	f141 0100 	adc.w	r1, r1, #0
1a0037e4:	fa03 f20e 	lsl.w	r2, r3, lr
1a0037e8:	1880      	adds	r0, r0, r2
1a0037ea:	fa43 f305 	asr.w	r3, r3, r5
1a0037ee:	4159      	adcs	r1, r3
1a0037f0:	e00e      	b.n	1a003810 <__adddf3+0xd0>
1a0037f2:	f1a5 0520 	sub.w	r5, r5, #32
1a0037f6:	f10e 0e20 	add.w	lr, lr, #32
1a0037fa:	2a01      	cmp	r2, #1
1a0037fc:	fa03 fc0e 	lsl.w	ip, r3, lr
1a003800:	bf28      	it	cs
1a003802:	f04c 0c02 	orrcs.w	ip, ip, #2
1a003806:	fa43 f305 	asr.w	r3, r3, r5
1a00380a:	18c0      	adds	r0, r0, r3
1a00380c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a003810:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a003814:	d507      	bpl.n	1a003826 <__adddf3+0xe6>
1a003816:	f04f 0e00 	mov.w	lr, #0
1a00381a:	f1dc 0c00 	rsbs	ip, ip, #0
1a00381e:	eb7e 0000 	sbcs.w	r0, lr, r0
1a003822:	eb6e 0101 	sbc.w	r1, lr, r1
1a003826:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a00382a:	d31b      	bcc.n	1a003864 <__adddf3+0x124>
1a00382c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a003830:	d30c      	bcc.n	1a00384c <__adddf3+0x10c>
1a003832:	0849      	lsrs	r1, r1, #1
1a003834:	ea5f 0030 	movs.w	r0, r0, rrx
1a003838:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a00383c:	f104 0401 	add.w	r4, r4, #1
1a003840:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a003844:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a003848:	f080 809a 	bcs.w	1a003980 <__adddf3+0x240>
1a00384c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a003850:	bf08      	it	eq
1a003852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a003856:	f150 0000 	adcs.w	r0, r0, #0
1a00385a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a00385e:	ea41 0105 	orr.w	r1, r1, r5
1a003862:	bd30      	pop	{r4, r5, pc}
1a003864:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a003868:	4140      	adcs	r0, r0
1a00386a:	eb41 0101 	adc.w	r1, r1, r1
1a00386e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a003872:	f1a4 0401 	sub.w	r4, r4, #1
1a003876:	d1e9      	bne.n	1a00384c <__adddf3+0x10c>
1a003878:	f091 0f00 	teq	r1, #0
1a00387c:	bf04      	itt	eq
1a00387e:	4601      	moveq	r1, r0
1a003880:	2000      	moveq	r0, #0
1a003882:	fab1 f381 	clz	r3, r1
1a003886:	bf08      	it	eq
1a003888:	3320      	addeq	r3, #32
1a00388a:	f1a3 030b 	sub.w	r3, r3, #11
1a00388e:	f1b3 0220 	subs.w	r2, r3, #32
1a003892:	da0c      	bge.n	1a0038ae <__adddf3+0x16e>
1a003894:	320c      	adds	r2, #12
1a003896:	dd08      	ble.n	1a0038aa <__adddf3+0x16a>
1a003898:	f102 0c14 	add.w	ip, r2, #20
1a00389c:	f1c2 020c 	rsb	r2, r2, #12
1a0038a0:	fa01 f00c 	lsl.w	r0, r1, ip
1a0038a4:	fa21 f102 	lsr.w	r1, r1, r2
1a0038a8:	e00c      	b.n	1a0038c4 <__adddf3+0x184>
1a0038aa:	f102 0214 	add.w	r2, r2, #20
1a0038ae:	bfd8      	it	le
1a0038b0:	f1c2 0c20 	rsble	ip, r2, #32
1a0038b4:	fa01 f102 	lsl.w	r1, r1, r2
1a0038b8:	fa20 fc0c 	lsr.w	ip, r0, ip
1a0038bc:	bfdc      	itt	le
1a0038be:	ea41 010c 	orrle.w	r1, r1, ip
1a0038c2:	4090      	lslle	r0, r2
1a0038c4:	1ae4      	subs	r4, r4, r3
1a0038c6:	bfa2      	ittt	ge
1a0038c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a0038cc:	4329      	orrge	r1, r5
1a0038ce:	bd30      	popge	{r4, r5, pc}
1a0038d0:	ea6f 0404 	mvn.w	r4, r4
1a0038d4:	3c1f      	subs	r4, #31
1a0038d6:	da1c      	bge.n	1a003912 <__adddf3+0x1d2>
1a0038d8:	340c      	adds	r4, #12
1a0038da:	dc0e      	bgt.n	1a0038fa <__adddf3+0x1ba>
1a0038dc:	f104 0414 	add.w	r4, r4, #20
1a0038e0:	f1c4 0220 	rsb	r2, r4, #32
1a0038e4:	fa20 f004 	lsr.w	r0, r0, r4
1a0038e8:	fa01 f302 	lsl.w	r3, r1, r2
1a0038ec:	ea40 0003 	orr.w	r0, r0, r3
1a0038f0:	fa21 f304 	lsr.w	r3, r1, r4
1a0038f4:	ea45 0103 	orr.w	r1, r5, r3
1a0038f8:	bd30      	pop	{r4, r5, pc}
1a0038fa:	f1c4 040c 	rsb	r4, r4, #12
1a0038fe:	f1c4 0220 	rsb	r2, r4, #32
1a003902:	fa20 f002 	lsr.w	r0, r0, r2
1a003906:	fa01 f304 	lsl.w	r3, r1, r4
1a00390a:	ea40 0003 	orr.w	r0, r0, r3
1a00390e:	4629      	mov	r1, r5
1a003910:	bd30      	pop	{r4, r5, pc}
1a003912:	fa21 f004 	lsr.w	r0, r1, r4
1a003916:	4629      	mov	r1, r5
1a003918:	bd30      	pop	{r4, r5, pc}
1a00391a:	f094 0f00 	teq	r4, #0
1a00391e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a003922:	bf06      	itte	eq
1a003924:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a003928:	3401      	addeq	r4, #1
1a00392a:	3d01      	subne	r5, #1
1a00392c:	e74e      	b.n	1a0037cc <__adddf3+0x8c>
1a00392e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a003932:	bf18      	it	ne
1a003934:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a003938:	d029      	beq.n	1a00398e <__adddf3+0x24e>
1a00393a:	ea94 0f05 	teq	r4, r5
1a00393e:	bf08      	it	eq
1a003940:	ea90 0f02 	teqeq	r0, r2
1a003944:	d005      	beq.n	1a003952 <__adddf3+0x212>
1a003946:	ea54 0c00 	orrs.w	ip, r4, r0
1a00394a:	bf04      	itt	eq
1a00394c:	4619      	moveq	r1, r3
1a00394e:	4610      	moveq	r0, r2
1a003950:	bd30      	pop	{r4, r5, pc}
1a003952:	ea91 0f03 	teq	r1, r3
1a003956:	bf1e      	ittt	ne
1a003958:	2100      	movne	r1, #0
1a00395a:	2000      	movne	r0, #0
1a00395c:	bd30      	popne	{r4, r5, pc}
1a00395e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a003962:	d105      	bne.n	1a003970 <__adddf3+0x230>
1a003964:	0040      	lsls	r0, r0, #1
1a003966:	4149      	adcs	r1, r1
1a003968:	bf28      	it	cs
1a00396a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a00396e:	bd30      	pop	{r4, r5, pc}
1a003970:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a003974:	bf3c      	itt	cc
1a003976:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a00397a:	bd30      	popcc	{r4, r5, pc}
1a00397c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a003980:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a003984:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a003988:	f04f 0000 	mov.w	r0, #0
1a00398c:	bd30      	pop	{r4, r5, pc}
1a00398e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a003992:	bf1a      	itte	ne
1a003994:	4619      	movne	r1, r3
1a003996:	4610      	movne	r0, r2
1a003998:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a00399c:	bf1c      	itt	ne
1a00399e:	460b      	movne	r3, r1
1a0039a0:	4602      	movne	r2, r0
1a0039a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a0039a6:	bf06      	itte	eq
1a0039a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a0039ac:	ea91 0f03 	teqeq	r1, r3
1a0039b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a0039b4:	bd30      	pop	{r4, r5, pc}
1a0039b6:	bf00      	nop

1a0039b8 <__aeabi_ui2d>:
1a0039b8:	f090 0f00 	teq	r0, #0
1a0039bc:	bf04      	itt	eq
1a0039be:	2100      	moveq	r1, #0
1a0039c0:	4770      	bxeq	lr
1a0039c2:	b530      	push	{r4, r5, lr}
1a0039c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0039c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0039cc:	f04f 0500 	mov.w	r5, #0
1a0039d0:	f04f 0100 	mov.w	r1, #0
1a0039d4:	e750      	b.n	1a003878 <__adddf3+0x138>
1a0039d6:	bf00      	nop

1a0039d8 <__aeabi_i2d>:
1a0039d8:	f090 0f00 	teq	r0, #0
1a0039dc:	bf04      	itt	eq
1a0039de:	2100      	moveq	r1, #0
1a0039e0:	4770      	bxeq	lr
1a0039e2:	b530      	push	{r4, r5, lr}
1a0039e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0039e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0039ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a0039f0:	bf48      	it	mi
1a0039f2:	4240      	negmi	r0, r0
1a0039f4:	f04f 0100 	mov.w	r1, #0
1a0039f8:	e73e      	b.n	1a003878 <__adddf3+0x138>
1a0039fa:	bf00      	nop

1a0039fc <__aeabi_f2d>:
1a0039fc:	0042      	lsls	r2, r0, #1
1a0039fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a003a02:	ea4f 0131 	mov.w	r1, r1, rrx
1a003a06:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a003a0a:	bf1f      	itttt	ne
1a003a0c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a003a10:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a003a14:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a003a18:	4770      	bxne	lr
1a003a1a:	f092 0f00 	teq	r2, #0
1a003a1e:	bf14      	ite	ne
1a003a20:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a003a24:	4770      	bxeq	lr
1a003a26:	b530      	push	{r4, r5, lr}
1a003a28:	f44f 7460 	mov.w	r4, #896	; 0x380
1a003a2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a003a30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a003a34:	e720      	b.n	1a003878 <__adddf3+0x138>
1a003a36:	bf00      	nop

1a003a38 <__aeabi_ul2d>:
1a003a38:	ea50 0201 	orrs.w	r2, r0, r1
1a003a3c:	bf08      	it	eq
1a003a3e:	4770      	bxeq	lr
1a003a40:	b530      	push	{r4, r5, lr}
1a003a42:	f04f 0500 	mov.w	r5, #0
1a003a46:	e00a      	b.n	1a003a5e <__aeabi_l2d+0x16>

1a003a48 <__aeabi_l2d>:
1a003a48:	ea50 0201 	orrs.w	r2, r0, r1
1a003a4c:	bf08      	it	eq
1a003a4e:	4770      	bxeq	lr
1a003a50:	b530      	push	{r4, r5, lr}
1a003a52:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a003a56:	d502      	bpl.n	1a003a5e <__aeabi_l2d+0x16>
1a003a58:	4240      	negs	r0, r0
1a003a5a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a003a5e:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a003a62:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a003a66:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a003a6a:	f43f aedc 	beq.w	1a003826 <__adddf3+0xe6>
1a003a6e:	f04f 0203 	mov.w	r2, #3
1a003a72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a003a76:	bf18      	it	ne
1a003a78:	3203      	addne	r2, #3
1a003a7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a003a7e:	bf18      	it	ne
1a003a80:	3203      	addne	r2, #3
1a003a82:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a003a86:	f1c2 0320 	rsb	r3, r2, #32
1a003a8a:	fa00 fc03 	lsl.w	ip, r0, r3
1a003a8e:	fa20 f002 	lsr.w	r0, r0, r2
1a003a92:	fa01 fe03 	lsl.w	lr, r1, r3
1a003a96:	ea40 000e 	orr.w	r0, r0, lr
1a003a9a:	fa21 f102 	lsr.w	r1, r1, r2
1a003a9e:	4414      	add	r4, r2
1a003aa0:	e6c1      	b.n	1a003826 <__adddf3+0xe6>
1a003aa2:	bf00      	nop

1a003aa4 <__aeabi_dmul>:
1a003aa4:	b570      	push	{r4, r5, r6, lr}
1a003aa6:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a003aaa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a003aae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a003ab2:	bf1d      	ittte	ne
1a003ab4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a003ab8:	ea94 0f0c 	teqne	r4, ip
1a003abc:	ea95 0f0c 	teqne	r5, ip
1a003ac0:	f000 f8de 	bleq	1a003c80 <__aeabi_dmul+0x1dc>
1a003ac4:	442c      	add	r4, r5
1a003ac6:	ea81 0603 	eor.w	r6, r1, r3
1a003aca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a003ace:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a003ad2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a003ad6:	bf18      	it	ne
1a003ad8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a003adc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a003ae0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a003ae4:	d038      	beq.n	1a003b58 <__aeabi_dmul+0xb4>
1a003ae6:	fba0 ce02 	umull	ip, lr, r0, r2
1a003aea:	f04f 0500 	mov.w	r5, #0
1a003aee:	fbe1 e502 	umlal	lr, r5, r1, r2
1a003af2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a003af6:	fbe0 e503 	umlal	lr, r5, r0, r3
1a003afa:	f04f 0600 	mov.w	r6, #0
1a003afe:	fbe1 5603 	umlal	r5, r6, r1, r3
1a003b02:	f09c 0f00 	teq	ip, #0
1a003b06:	bf18      	it	ne
1a003b08:	f04e 0e01 	orrne.w	lr, lr, #1
1a003b0c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a003b10:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a003b14:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a003b18:	d204      	bcs.n	1a003b24 <__aeabi_dmul+0x80>
1a003b1a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a003b1e:	416d      	adcs	r5, r5
1a003b20:	eb46 0606 	adc.w	r6, r6, r6
1a003b24:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a003b28:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a003b2c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a003b30:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a003b34:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a003b38:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a003b3c:	bf88      	it	hi
1a003b3e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a003b42:	d81e      	bhi.n	1a003b82 <__aeabi_dmul+0xde>
1a003b44:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a003b48:	bf08      	it	eq
1a003b4a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a003b4e:	f150 0000 	adcs.w	r0, r0, #0
1a003b52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a003b56:	bd70      	pop	{r4, r5, r6, pc}
1a003b58:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a003b5c:	ea46 0101 	orr.w	r1, r6, r1
1a003b60:	ea40 0002 	orr.w	r0, r0, r2
1a003b64:	ea81 0103 	eor.w	r1, r1, r3
1a003b68:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a003b6c:	bfc2      	ittt	gt
1a003b6e:	ebd4 050c 	rsbsgt	r5, r4, ip
1a003b72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a003b76:	bd70      	popgt	{r4, r5, r6, pc}
1a003b78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a003b7c:	f04f 0e00 	mov.w	lr, #0
1a003b80:	3c01      	subs	r4, #1
1a003b82:	f300 80ab 	bgt.w	1a003cdc <__aeabi_dmul+0x238>
1a003b86:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a003b8a:	bfde      	ittt	le
1a003b8c:	2000      	movle	r0, #0
1a003b8e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a003b92:	bd70      	pople	{r4, r5, r6, pc}
1a003b94:	f1c4 0400 	rsb	r4, r4, #0
1a003b98:	3c20      	subs	r4, #32
1a003b9a:	da35      	bge.n	1a003c08 <__aeabi_dmul+0x164>
1a003b9c:	340c      	adds	r4, #12
1a003b9e:	dc1b      	bgt.n	1a003bd8 <__aeabi_dmul+0x134>
1a003ba0:	f104 0414 	add.w	r4, r4, #20
1a003ba4:	f1c4 0520 	rsb	r5, r4, #32
1a003ba8:	fa00 f305 	lsl.w	r3, r0, r5
1a003bac:	fa20 f004 	lsr.w	r0, r0, r4
1a003bb0:	fa01 f205 	lsl.w	r2, r1, r5
1a003bb4:	ea40 0002 	orr.w	r0, r0, r2
1a003bb8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a003bbc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a003bc0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a003bc4:	fa21 f604 	lsr.w	r6, r1, r4
1a003bc8:	eb42 0106 	adc.w	r1, r2, r6
1a003bcc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a003bd0:	bf08      	it	eq
1a003bd2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a003bd6:	bd70      	pop	{r4, r5, r6, pc}
1a003bd8:	f1c4 040c 	rsb	r4, r4, #12
1a003bdc:	f1c4 0520 	rsb	r5, r4, #32
1a003be0:	fa00 f304 	lsl.w	r3, r0, r4
1a003be4:	fa20 f005 	lsr.w	r0, r0, r5
1a003be8:	fa01 f204 	lsl.w	r2, r1, r4
1a003bec:	ea40 0002 	orr.w	r0, r0, r2
1a003bf0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a003bf4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a003bf8:	f141 0100 	adc.w	r1, r1, #0
1a003bfc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a003c00:	bf08      	it	eq
1a003c02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a003c06:	bd70      	pop	{r4, r5, r6, pc}
1a003c08:	f1c4 0520 	rsb	r5, r4, #32
1a003c0c:	fa00 f205 	lsl.w	r2, r0, r5
1a003c10:	ea4e 0e02 	orr.w	lr, lr, r2
1a003c14:	fa20 f304 	lsr.w	r3, r0, r4
1a003c18:	fa01 f205 	lsl.w	r2, r1, r5
1a003c1c:	ea43 0302 	orr.w	r3, r3, r2
1a003c20:	fa21 f004 	lsr.w	r0, r1, r4
1a003c24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a003c28:	fa21 f204 	lsr.w	r2, r1, r4
1a003c2c:	ea20 0002 	bic.w	r0, r0, r2
1a003c30:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a003c34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a003c38:	bf08      	it	eq
1a003c3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a003c3e:	bd70      	pop	{r4, r5, r6, pc}
1a003c40:	f094 0f00 	teq	r4, #0
1a003c44:	d10f      	bne.n	1a003c66 <__aeabi_dmul+0x1c2>
1a003c46:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a003c4a:	0040      	lsls	r0, r0, #1
1a003c4c:	eb41 0101 	adc.w	r1, r1, r1
1a003c50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a003c54:	bf08      	it	eq
1a003c56:	3c01      	subeq	r4, #1
1a003c58:	d0f7      	beq.n	1a003c4a <__aeabi_dmul+0x1a6>
1a003c5a:	ea41 0106 	orr.w	r1, r1, r6
1a003c5e:	f095 0f00 	teq	r5, #0
1a003c62:	bf18      	it	ne
1a003c64:	4770      	bxne	lr
1a003c66:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a003c6a:	0052      	lsls	r2, r2, #1
1a003c6c:	eb43 0303 	adc.w	r3, r3, r3
1a003c70:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a003c74:	bf08      	it	eq
1a003c76:	3d01      	subeq	r5, #1
1a003c78:	d0f7      	beq.n	1a003c6a <__aeabi_dmul+0x1c6>
1a003c7a:	ea43 0306 	orr.w	r3, r3, r6
1a003c7e:	4770      	bx	lr
1a003c80:	ea94 0f0c 	teq	r4, ip
1a003c84:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a003c88:	bf18      	it	ne
1a003c8a:	ea95 0f0c 	teqne	r5, ip
1a003c8e:	d00c      	beq.n	1a003caa <__aeabi_dmul+0x206>
1a003c90:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a003c94:	bf18      	it	ne
1a003c96:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a003c9a:	d1d1      	bne.n	1a003c40 <__aeabi_dmul+0x19c>
1a003c9c:	ea81 0103 	eor.w	r1, r1, r3
1a003ca0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a003ca4:	f04f 0000 	mov.w	r0, #0
1a003ca8:	bd70      	pop	{r4, r5, r6, pc}
1a003caa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a003cae:	bf06      	itte	eq
1a003cb0:	4610      	moveq	r0, r2
1a003cb2:	4619      	moveq	r1, r3
1a003cb4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a003cb8:	d019      	beq.n	1a003cee <__aeabi_dmul+0x24a>
1a003cba:	ea94 0f0c 	teq	r4, ip
1a003cbe:	d102      	bne.n	1a003cc6 <__aeabi_dmul+0x222>
1a003cc0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a003cc4:	d113      	bne.n	1a003cee <__aeabi_dmul+0x24a>
1a003cc6:	ea95 0f0c 	teq	r5, ip
1a003cca:	d105      	bne.n	1a003cd8 <__aeabi_dmul+0x234>
1a003ccc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a003cd0:	bf1c      	itt	ne
1a003cd2:	4610      	movne	r0, r2
1a003cd4:	4619      	movne	r1, r3
1a003cd6:	d10a      	bne.n	1a003cee <__aeabi_dmul+0x24a>
1a003cd8:	ea81 0103 	eor.w	r1, r1, r3
1a003cdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a003ce0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a003ce4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a003ce8:	f04f 0000 	mov.w	r0, #0
1a003cec:	bd70      	pop	{r4, r5, r6, pc}
1a003cee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a003cf2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a003cf6:	bd70      	pop	{r4, r5, r6, pc}

1a003cf8 <__aeabi_ddiv>:
1a003cf8:	b570      	push	{r4, r5, r6, lr}
1a003cfa:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a003cfe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a003d02:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a003d06:	bf1d      	ittte	ne
1a003d08:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a003d0c:	ea94 0f0c 	teqne	r4, ip
1a003d10:	ea95 0f0c 	teqne	r5, ip
1a003d14:	f000 f8a7 	bleq	1a003e66 <__aeabi_ddiv+0x16e>
1a003d18:	eba4 0405 	sub.w	r4, r4, r5
1a003d1c:	ea81 0e03 	eor.w	lr, r1, r3
1a003d20:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a003d24:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a003d28:	f000 8088 	beq.w	1a003e3c <__aeabi_ddiv+0x144>
1a003d2c:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a003d30:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a003d34:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a003d38:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a003d3c:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a003d40:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a003d44:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a003d48:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a003d4c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a003d50:	429d      	cmp	r5, r3
1a003d52:	bf08      	it	eq
1a003d54:	4296      	cmpeq	r6, r2
1a003d56:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a003d5a:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a003d5e:	d202      	bcs.n	1a003d66 <__aeabi_ddiv+0x6e>
1a003d60:	085b      	lsrs	r3, r3, #1
1a003d62:	ea4f 0232 	mov.w	r2, r2, rrx
1a003d66:	1ab6      	subs	r6, r6, r2
1a003d68:	eb65 0503 	sbc.w	r5, r5, r3
1a003d6c:	085b      	lsrs	r3, r3, #1
1a003d6e:	ea4f 0232 	mov.w	r2, r2, rrx
1a003d72:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a003d76:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a003d7a:	ebb6 0e02 	subs.w	lr, r6, r2
1a003d7e:	eb75 0e03 	sbcs.w	lr, r5, r3
1a003d82:	bf22      	ittt	cs
1a003d84:	1ab6      	subcs	r6, r6, r2
1a003d86:	4675      	movcs	r5, lr
1a003d88:	ea40 000c 	orrcs.w	r0, r0, ip
1a003d8c:	085b      	lsrs	r3, r3, #1
1a003d8e:	ea4f 0232 	mov.w	r2, r2, rrx
1a003d92:	ebb6 0e02 	subs.w	lr, r6, r2
1a003d96:	eb75 0e03 	sbcs.w	lr, r5, r3
1a003d9a:	bf22      	ittt	cs
1a003d9c:	1ab6      	subcs	r6, r6, r2
1a003d9e:	4675      	movcs	r5, lr
1a003da0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a003da4:	085b      	lsrs	r3, r3, #1
1a003da6:	ea4f 0232 	mov.w	r2, r2, rrx
1a003daa:	ebb6 0e02 	subs.w	lr, r6, r2
1a003dae:	eb75 0e03 	sbcs.w	lr, r5, r3
1a003db2:	bf22      	ittt	cs
1a003db4:	1ab6      	subcs	r6, r6, r2
1a003db6:	4675      	movcs	r5, lr
1a003db8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a003dbc:	085b      	lsrs	r3, r3, #1
1a003dbe:	ea4f 0232 	mov.w	r2, r2, rrx
1a003dc2:	ebb6 0e02 	subs.w	lr, r6, r2
1a003dc6:	eb75 0e03 	sbcs.w	lr, r5, r3
1a003dca:	bf22      	ittt	cs
1a003dcc:	1ab6      	subcs	r6, r6, r2
1a003dce:	4675      	movcs	r5, lr
1a003dd0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a003dd4:	ea55 0e06 	orrs.w	lr, r5, r6
1a003dd8:	d018      	beq.n	1a003e0c <__aeabi_ddiv+0x114>
1a003dda:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a003dde:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a003de2:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a003de6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a003dea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a003dee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a003df2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a003df6:	d1c0      	bne.n	1a003d7a <__aeabi_ddiv+0x82>
1a003df8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a003dfc:	d10b      	bne.n	1a003e16 <__aeabi_ddiv+0x11e>
1a003dfe:	ea41 0100 	orr.w	r1, r1, r0
1a003e02:	f04f 0000 	mov.w	r0, #0
1a003e06:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a003e0a:	e7b6      	b.n	1a003d7a <__aeabi_ddiv+0x82>
1a003e0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a003e10:	bf04      	itt	eq
1a003e12:	4301      	orreq	r1, r0
1a003e14:	2000      	moveq	r0, #0
1a003e16:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a003e1a:	bf88      	it	hi
1a003e1c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a003e20:	f63f aeaf 	bhi.w	1a003b82 <__aeabi_dmul+0xde>
1a003e24:	ebb5 0c03 	subs.w	ip, r5, r3
1a003e28:	bf04      	itt	eq
1a003e2a:	ebb6 0c02 	subseq.w	ip, r6, r2
1a003e2e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a003e32:	f150 0000 	adcs.w	r0, r0, #0
1a003e36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a003e3a:	bd70      	pop	{r4, r5, r6, pc}
1a003e3c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a003e40:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a003e44:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a003e48:	bfc2      	ittt	gt
1a003e4a:	ebd4 050c 	rsbsgt	r5, r4, ip
1a003e4e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a003e52:	bd70      	popgt	{r4, r5, r6, pc}
1a003e54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a003e58:	f04f 0e00 	mov.w	lr, #0
1a003e5c:	3c01      	subs	r4, #1
1a003e5e:	e690      	b.n	1a003b82 <__aeabi_dmul+0xde>
1a003e60:	ea45 0e06 	orr.w	lr, r5, r6
1a003e64:	e68d      	b.n	1a003b82 <__aeabi_dmul+0xde>
1a003e66:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a003e6a:	ea94 0f0c 	teq	r4, ip
1a003e6e:	bf08      	it	eq
1a003e70:	ea95 0f0c 	teqeq	r5, ip
1a003e74:	f43f af3b 	beq.w	1a003cee <__aeabi_dmul+0x24a>
1a003e78:	ea94 0f0c 	teq	r4, ip
1a003e7c:	d10a      	bne.n	1a003e94 <__aeabi_ddiv+0x19c>
1a003e7e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a003e82:	f47f af34 	bne.w	1a003cee <__aeabi_dmul+0x24a>
1a003e86:	ea95 0f0c 	teq	r5, ip
1a003e8a:	f47f af25 	bne.w	1a003cd8 <__aeabi_dmul+0x234>
1a003e8e:	4610      	mov	r0, r2
1a003e90:	4619      	mov	r1, r3
1a003e92:	e72c      	b.n	1a003cee <__aeabi_dmul+0x24a>
1a003e94:	ea95 0f0c 	teq	r5, ip
1a003e98:	d106      	bne.n	1a003ea8 <__aeabi_ddiv+0x1b0>
1a003e9a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a003e9e:	f43f aefd 	beq.w	1a003c9c <__aeabi_dmul+0x1f8>
1a003ea2:	4610      	mov	r0, r2
1a003ea4:	4619      	mov	r1, r3
1a003ea6:	e722      	b.n	1a003cee <__aeabi_dmul+0x24a>
1a003ea8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a003eac:	bf18      	it	ne
1a003eae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a003eb2:	f47f aec5 	bne.w	1a003c40 <__aeabi_dmul+0x19c>
1a003eb6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a003eba:	f47f af0d 	bne.w	1a003cd8 <__aeabi_dmul+0x234>
1a003ebe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a003ec2:	f47f aeeb 	bne.w	1a003c9c <__aeabi_dmul+0x1f8>
1a003ec6:	e712      	b.n	1a003cee <__aeabi_dmul+0x24a>

1a003ec8 <__gedf2>:
1a003ec8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
1a003ecc:	e006      	b.n	1a003edc <__cmpdf2+0x4>
1a003ece:	bf00      	nop

1a003ed0 <__ledf2>:
1a003ed0:	f04f 0c01 	mov.w	ip, #1
1a003ed4:	e002      	b.n	1a003edc <__cmpdf2+0x4>
1a003ed6:	bf00      	nop

1a003ed8 <__cmpdf2>:
1a003ed8:	f04f 0c01 	mov.w	ip, #1
1a003edc:	f84d cd04 	str.w	ip, [sp, #-4]!
1a003ee0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a003ee4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a003ee8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a003eec:	bf18      	it	ne
1a003eee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a003ef2:	d01b      	beq.n	1a003f2c <__cmpdf2+0x54>
1a003ef4:	b001      	add	sp, #4
1a003ef6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a003efa:	bf0c      	ite	eq
1a003efc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a003f00:	ea91 0f03 	teqne	r1, r3
1a003f04:	bf02      	ittt	eq
1a003f06:	ea90 0f02 	teqeq	r0, r2
1a003f0a:	2000      	moveq	r0, #0
1a003f0c:	4770      	bxeq	lr
1a003f0e:	f110 0f00 	cmn.w	r0, #0
1a003f12:	ea91 0f03 	teq	r1, r3
1a003f16:	bf58      	it	pl
1a003f18:	4299      	cmppl	r1, r3
1a003f1a:	bf08      	it	eq
1a003f1c:	4290      	cmpeq	r0, r2
1a003f1e:	bf2c      	ite	cs
1a003f20:	17d8      	asrcs	r0, r3, #31
1a003f22:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a003f26:	f040 0001 	orr.w	r0, r0, #1
1a003f2a:	4770      	bx	lr
1a003f2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a003f30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a003f34:	d102      	bne.n	1a003f3c <__cmpdf2+0x64>
1a003f36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a003f3a:	d107      	bne.n	1a003f4c <__cmpdf2+0x74>
1a003f3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a003f40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a003f44:	d1d6      	bne.n	1a003ef4 <__cmpdf2+0x1c>
1a003f46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a003f4a:	d0d3      	beq.n	1a003ef4 <__cmpdf2+0x1c>
1a003f4c:	f85d 0b04 	ldr.w	r0, [sp], #4
1a003f50:	4770      	bx	lr
1a003f52:	bf00      	nop

1a003f54 <__aeabi_cdrcmple>:
1a003f54:	4684      	mov	ip, r0
1a003f56:	4610      	mov	r0, r2
1a003f58:	4662      	mov	r2, ip
1a003f5a:	468c      	mov	ip, r1
1a003f5c:	4619      	mov	r1, r3
1a003f5e:	4663      	mov	r3, ip
1a003f60:	e000      	b.n	1a003f64 <__aeabi_cdcmpeq>
1a003f62:	bf00      	nop

1a003f64 <__aeabi_cdcmpeq>:
1a003f64:	b501      	push	{r0, lr}
1a003f66:	f7ff ffb7 	bl	1a003ed8 <__cmpdf2>
1a003f6a:	2800      	cmp	r0, #0
1a003f6c:	bf48      	it	mi
1a003f6e:	f110 0f00 	cmnmi.w	r0, #0
1a003f72:	bd01      	pop	{r0, pc}

1a003f74 <__aeabi_dcmpeq>:
1a003f74:	f84d ed08 	str.w	lr, [sp, #-8]!
1a003f78:	f7ff fff4 	bl	1a003f64 <__aeabi_cdcmpeq>
1a003f7c:	bf0c      	ite	eq
1a003f7e:	2001      	moveq	r0, #1
1a003f80:	2000      	movne	r0, #0
1a003f82:	f85d fb08 	ldr.w	pc, [sp], #8
1a003f86:	bf00      	nop

1a003f88 <__aeabi_dcmplt>:
1a003f88:	f84d ed08 	str.w	lr, [sp, #-8]!
1a003f8c:	f7ff ffea 	bl	1a003f64 <__aeabi_cdcmpeq>
1a003f90:	bf34      	ite	cc
1a003f92:	2001      	movcc	r0, #1
1a003f94:	2000      	movcs	r0, #0
1a003f96:	f85d fb08 	ldr.w	pc, [sp], #8
1a003f9a:	bf00      	nop

1a003f9c <__aeabi_dcmple>:
1a003f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
1a003fa0:	f7ff ffe0 	bl	1a003f64 <__aeabi_cdcmpeq>
1a003fa4:	bf94      	ite	ls
1a003fa6:	2001      	movls	r0, #1
1a003fa8:	2000      	movhi	r0, #0
1a003faa:	f85d fb08 	ldr.w	pc, [sp], #8
1a003fae:	bf00      	nop

1a003fb0 <__aeabi_dcmpge>:
1a003fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
1a003fb4:	f7ff ffce 	bl	1a003f54 <__aeabi_cdrcmple>
1a003fb8:	bf94      	ite	ls
1a003fba:	2001      	movls	r0, #1
1a003fbc:	2000      	movhi	r0, #0
1a003fbe:	f85d fb08 	ldr.w	pc, [sp], #8
1a003fc2:	bf00      	nop

1a003fc4 <__aeabi_dcmpgt>:
1a003fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
1a003fc8:	f7ff ffc4 	bl	1a003f54 <__aeabi_cdrcmple>
1a003fcc:	bf34      	ite	cc
1a003fce:	2001      	movcc	r0, #1
1a003fd0:	2000      	movcs	r0, #0
1a003fd2:	f85d fb08 	ldr.w	pc, [sp], #8
1a003fd6:	bf00      	nop

1a003fd8 <__aeabi_dcmpun>:
1a003fd8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a003fdc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a003fe0:	d102      	bne.n	1a003fe8 <__aeabi_dcmpun+0x10>
1a003fe2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a003fe6:	d10a      	bne.n	1a003ffe <__aeabi_dcmpun+0x26>
1a003fe8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a003fec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a003ff0:	d102      	bne.n	1a003ff8 <__aeabi_dcmpun+0x20>
1a003ff2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a003ff6:	d102      	bne.n	1a003ffe <__aeabi_dcmpun+0x26>
1a003ff8:	f04f 0000 	mov.w	r0, #0
1a003ffc:	4770      	bx	lr
1a003ffe:	f04f 0001 	mov.w	r0, #1
1a004002:	4770      	bx	lr

1a004004 <__aeabi_d2iz>:
1a004004:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a004008:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a00400c:	d215      	bcs.n	1a00403a <__aeabi_d2iz+0x36>
1a00400e:	d511      	bpl.n	1a004034 <__aeabi_d2iz+0x30>
1a004010:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a004014:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a004018:	d912      	bls.n	1a004040 <__aeabi_d2iz+0x3c>
1a00401a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a00401e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a004022:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a004026:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a00402a:	fa23 f002 	lsr.w	r0, r3, r2
1a00402e:	bf18      	it	ne
1a004030:	4240      	negne	r0, r0
1a004032:	4770      	bx	lr
1a004034:	f04f 0000 	mov.w	r0, #0
1a004038:	4770      	bx	lr
1a00403a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a00403e:	d105      	bne.n	1a00404c <__aeabi_d2iz+0x48>
1a004040:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a004044:	bf08      	it	eq
1a004046:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a00404a:	4770      	bx	lr
1a00404c:	f04f 0000 	mov.w	r0, #0
1a004050:	4770      	bx	lr
1a004052:	bf00      	nop

1a004054 <__aeabi_uldivmod>:
1a004054:	b953      	cbnz	r3, 1a00406c <__aeabi_uldivmod+0x18>
1a004056:	b94a      	cbnz	r2, 1a00406c <__aeabi_uldivmod+0x18>
1a004058:	2900      	cmp	r1, #0
1a00405a:	bf08      	it	eq
1a00405c:	2800      	cmpeq	r0, #0
1a00405e:	bf1c      	itt	ne
1a004060:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a004064:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a004068:	f000 b97a 	b.w	1a004360 <__aeabi_idiv0>
1a00406c:	f1ad 0c08 	sub.w	ip, sp, #8
1a004070:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a004074:	f000 f806 	bl	1a004084 <__udivmoddi4>
1a004078:	f8dd e004 	ldr.w	lr, [sp, #4]
1a00407c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a004080:	b004      	add	sp, #16
1a004082:	4770      	bx	lr

1a004084 <__udivmoddi4>:
1a004084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a004088:	468c      	mov	ip, r1
1a00408a:	460d      	mov	r5, r1
1a00408c:	4604      	mov	r4, r0
1a00408e:	9e08      	ldr	r6, [sp, #32]
1a004090:	2b00      	cmp	r3, #0
1a004092:	d151      	bne.n	1a004138 <__udivmoddi4+0xb4>
1a004094:	428a      	cmp	r2, r1
1a004096:	4617      	mov	r7, r2
1a004098:	d96d      	bls.n	1a004176 <__udivmoddi4+0xf2>
1a00409a:	fab2 fe82 	clz	lr, r2
1a00409e:	f1be 0f00 	cmp.w	lr, #0
1a0040a2:	d00b      	beq.n	1a0040bc <__udivmoddi4+0x38>
1a0040a4:	f1ce 0c20 	rsb	ip, lr, #32
1a0040a8:	fa01 f50e 	lsl.w	r5, r1, lr
1a0040ac:	fa20 fc0c 	lsr.w	ip, r0, ip
1a0040b0:	fa02 f70e 	lsl.w	r7, r2, lr
1a0040b4:	ea4c 0c05 	orr.w	ip, ip, r5
1a0040b8:	fa00 f40e 	lsl.w	r4, r0, lr
1a0040bc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
1a0040c0:	0c25      	lsrs	r5, r4, #16
1a0040c2:	fbbc f8fa 	udiv	r8, ip, sl
1a0040c6:	fa1f f987 	uxth.w	r9, r7
1a0040ca:	fb0a cc18 	mls	ip, sl, r8, ip
1a0040ce:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
1a0040d2:	fb08 f309 	mul.w	r3, r8, r9
1a0040d6:	42ab      	cmp	r3, r5
1a0040d8:	d90a      	bls.n	1a0040f0 <__udivmoddi4+0x6c>
1a0040da:	19ed      	adds	r5, r5, r7
1a0040dc:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
1a0040e0:	f080 8123 	bcs.w	1a00432a <__udivmoddi4+0x2a6>
1a0040e4:	42ab      	cmp	r3, r5
1a0040e6:	f240 8120 	bls.w	1a00432a <__udivmoddi4+0x2a6>
1a0040ea:	f1a8 0802 	sub.w	r8, r8, #2
1a0040ee:	443d      	add	r5, r7
1a0040f0:	1aed      	subs	r5, r5, r3
1a0040f2:	b2a4      	uxth	r4, r4
1a0040f4:	fbb5 f0fa 	udiv	r0, r5, sl
1a0040f8:	fb0a 5510 	mls	r5, sl, r0, r5
1a0040fc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
1a004100:	fb00 f909 	mul.w	r9, r0, r9
1a004104:	45a1      	cmp	r9, r4
1a004106:	d909      	bls.n	1a00411c <__udivmoddi4+0x98>
1a004108:	19e4      	adds	r4, r4, r7
1a00410a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00410e:	f080 810a 	bcs.w	1a004326 <__udivmoddi4+0x2a2>
1a004112:	45a1      	cmp	r9, r4
1a004114:	f240 8107 	bls.w	1a004326 <__udivmoddi4+0x2a2>
1a004118:	3802      	subs	r0, #2
1a00411a:	443c      	add	r4, r7
1a00411c:	eba4 0409 	sub.w	r4, r4, r9
1a004120:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
1a004124:	2100      	movs	r1, #0
1a004126:	2e00      	cmp	r6, #0
1a004128:	d061      	beq.n	1a0041ee <__udivmoddi4+0x16a>
1a00412a:	fa24 f40e 	lsr.w	r4, r4, lr
1a00412e:	2300      	movs	r3, #0
1a004130:	6034      	str	r4, [r6, #0]
1a004132:	6073      	str	r3, [r6, #4]
1a004134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004138:	428b      	cmp	r3, r1
1a00413a:	d907      	bls.n	1a00414c <__udivmoddi4+0xc8>
1a00413c:	2e00      	cmp	r6, #0
1a00413e:	d054      	beq.n	1a0041ea <__udivmoddi4+0x166>
1a004140:	2100      	movs	r1, #0
1a004142:	e886 0021 	stmia.w	r6, {r0, r5}
1a004146:	4608      	mov	r0, r1
1a004148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00414c:	fab3 f183 	clz	r1, r3
1a004150:	2900      	cmp	r1, #0
1a004152:	f040 808e 	bne.w	1a004272 <__udivmoddi4+0x1ee>
1a004156:	42ab      	cmp	r3, r5
1a004158:	d302      	bcc.n	1a004160 <__udivmoddi4+0xdc>
1a00415a:	4282      	cmp	r2, r0
1a00415c:	f200 80fa 	bhi.w	1a004354 <__udivmoddi4+0x2d0>
1a004160:	1a84      	subs	r4, r0, r2
1a004162:	eb65 0503 	sbc.w	r5, r5, r3
1a004166:	2001      	movs	r0, #1
1a004168:	46ac      	mov	ip, r5
1a00416a:	2e00      	cmp	r6, #0
1a00416c:	d03f      	beq.n	1a0041ee <__udivmoddi4+0x16a>
1a00416e:	e886 1010 	stmia.w	r6, {r4, ip}
1a004172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004176:	b912      	cbnz	r2, 1a00417e <__udivmoddi4+0xfa>
1a004178:	2701      	movs	r7, #1
1a00417a:	fbb7 f7f2 	udiv	r7, r7, r2
1a00417e:	fab7 fe87 	clz	lr, r7
1a004182:	f1be 0f00 	cmp.w	lr, #0
1a004186:	d134      	bne.n	1a0041f2 <__udivmoddi4+0x16e>
1a004188:	1beb      	subs	r3, r5, r7
1a00418a:	0c3a      	lsrs	r2, r7, #16
1a00418c:	fa1f fc87 	uxth.w	ip, r7
1a004190:	2101      	movs	r1, #1
1a004192:	fbb3 f8f2 	udiv	r8, r3, r2
1a004196:	0c25      	lsrs	r5, r4, #16
1a004198:	fb02 3318 	mls	r3, r2, r8, r3
1a00419c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
1a0041a0:	fb0c f308 	mul.w	r3, ip, r8
1a0041a4:	42ab      	cmp	r3, r5
1a0041a6:	d907      	bls.n	1a0041b8 <__udivmoddi4+0x134>
1a0041a8:	19ed      	adds	r5, r5, r7
1a0041aa:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
1a0041ae:	d202      	bcs.n	1a0041b6 <__udivmoddi4+0x132>
1a0041b0:	42ab      	cmp	r3, r5
1a0041b2:	f200 80d1 	bhi.w	1a004358 <__udivmoddi4+0x2d4>
1a0041b6:	4680      	mov	r8, r0
1a0041b8:	1aed      	subs	r5, r5, r3
1a0041ba:	b2a3      	uxth	r3, r4
1a0041bc:	fbb5 f0f2 	udiv	r0, r5, r2
1a0041c0:	fb02 5510 	mls	r5, r2, r0, r5
1a0041c4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
1a0041c8:	fb0c fc00 	mul.w	ip, ip, r0
1a0041cc:	45a4      	cmp	ip, r4
1a0041ce:	d907      	bls.n	1a0041e0 <__udivmoddi4+0x15c>
1a0041d0:	19e4      	adds	r4, r4, r7
1a0041d2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0041d6:	d202      	bcs.n	1a0041de <__udivmoddi4+0x15a>
1a0041d8:	45a4      	cmp	ip, r4
1a0041da:	f200 80b8 	bhi.w	1a00434e <__udivmoddi4+0x2ca>
1a0041de:	4618      	mov	r0, r3
1a0041e0:	eba4 040c 	sub.w	r4, r4, ip
1a0041e4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
1a0041e8:	e79d      	b.n	1a004126 <__udivmoddi4+0xa2>
1a0041ea:	4631      	mov	r1, r6
1a0041ec:	4630      	mov	r0, r6
1a0041ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0041f2:	f1ce 0420 	rsb	r4, lr, #32
1a0041f6:	fa05 f30e 	lsl.w	r3, r5, lr
1a0041fa:	fa07 f70e 	lsl.w	r7, r7, lr
1a0041fe:	fa20 f804 	lsr.w	r8, r0, r4
1a004202:	0c3a      	lsrs	r2, r7, #16
1a004204:	fa25 f404 	lsr.w	r4, r5, r4
1a004208:	ea48 0803 	orr.w	r8, r8, r3
1a00420c:	fbb4 f1f2 	udiv	r1, r4, r2
1a004210:	ea4f 4518 	mov.w	r5, r8, lsr #16
1a004214:	fb02 4411 	mls	r4, r2, r1, r4
1a004218:	fa1f fc87 	uxth.w	ip, r7
1a00421c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
1a004220:	fb01 f30c 	mul.w	r3, r1, ip
1a004224:	42ab      	cmp	r3, r5
1a004226:	fa00 f40e 	lsl.w	r4, r0, lr
1a00422a:	d909      	bls.n	1a004240 <__udivmoddi4+0x1bc>
1a00422c:	19ed      	adds	r5, r5, r7
1a00422e:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
1a004232:	f080 808a 	bcs.w	1a00434a <__udivmoddi4+0x2c6>
1a004236:	42ab      	cmp	r3, r5
1a004238:	f240 8087 	bls.w	1a00434a <__udivmoddi4+0x2c6>
1a00423c:	3902      	subs	r1, #2
1a00423e:	443d      	add	r5, r7
1a004240:	1aeb      	subs	r3, r5, r3
1a004242:	fa1f f588 	uxth.w	r5, r8
1a004246:	fbb3 f0f2 	udiv	r0, r3, r2
1a00424a:	fb02 3310 	mls	r3, r2, r0, r3
1a00424e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
1a004252:	fb00 f30c 	mul.w	r3, r0, ip
1a004256:	42ab      	cmp	r3, r5
1a004258:	d907      	bls.n	1a00426a <__udivmoddi4+0x1e6>
1a00425a:	19ed      	adds	r5, r5, r7
1a00425c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
1a004260:	d26f      	bcs.n	1a004342 <__udivmoddi4+0x2be>
1a004262:	42ab      	cmp	r3, r5
1a004264:	d96d      	bls.n	1a004342 <__udivmoddi4+0x2be>
1a004266:	3802      	subs	r0, #2
1a004268:	443d      	add	r5, r7
1a00426a:	1aeb      	subs	r3, r5, r3
1a00426c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a004270:	e78f      	b.n	1a004192 <__udivmoddi4+0x10e>
1a004272:	f1c1 0720 	rsb	r7, r1, #32
1a004276:	fa22 f807 	lsr.w	r8, r2, r7
1a00427a:	408b      	lsls	r3, r1
1a00427c:	fa05 f401 	lsl.w	r4, r5, r1
1a004280:	ea48 0303 	orr.w	r3, r8, r3
1a004284:	fa20 fe07 	lsr.w	lr, r0, r7
1a004288:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1a00428c:	40fd      	lsrs	r5, r7
1a00428e:	ea4e 0e04 	orr.w	lr, lr, r4
1a004292:	fbb5 f9fc 	udiv	r9, r5, ip
1a004296:	ea4f 441e 	mov.w	r4, lr, lsr #16
1a00429a:	fb0c 5519 	mls	r5, ip, r9, r5
1a00429e:	fa1f f883 	uxth.w	r8, r3
1a0042a2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
1a0042a6:	fb09 f408 	mul.w	r4, r9, r8
1a0042aa:	42ac      	cmp	r4, r5
1a0042ac:	fa02 f201 	lsl.w	r2, r2, r1
1a0042b0:	fa00 fa01 	lsl.w	sl, r0, r1
1a0042b4:	d908      	bls.n	1a0042c8 <__udivmoddi4+0x244>
1a0042b6:	18ed      	adds	r5, r5, r3
1a0042b8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a0042bc:	d243      	bcs.n	1a004346 <__udivmoddi4+0x2c2>
1a0042be:	42ac      	cmp	r4, r5
1a0042c0:	d941      	bls.n	1a004346 <__udivmoddi4+0x2c2>
1a0042c2:	f1a9 0902 	sub.w	r9, r9, #2
1a0042c6:	441d      	add	r5, r3
1a0042c8:	1b2d      	subs	r5, r5, r4
1a0042ca:	fa1f fe8e 	uxth.w	lr, lr
1a0042ce:	fbb5 f0fc 	udiv	r0, r5, ip
1a0042d2:	fb0c 5510 	mls	r5, ip, r0, r5
1a0042d6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
1a0042da:	fb00 f808 	mul.w	r8, r0, r8
1a0042de:	45a0      	cmp	r8, r4
1a0042e0:	d907      	bls.n	1a0042f2 <__udivmoddi4+0x26e>
1a0042e2:	18e4      	adds	r4, r4, r3
1a0042e4:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
1a0042e8:	d229      	bcs.n	1a00433e <__udivmoddi4+0x2ba>
1a0042ea:	45a0      	cmp	r8, r4
1a0042ec:	d927      	bls.n	1a00433e <__udivmoddi4+0x2ba>
1a0042ee:	3802      	subs	r0, #2
1a0042f0:	441c      	add	r4, r3
1a0042f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a0042f6:	eba4 0408 	sub.w	r4, r4, r8
1a0042fa:	fba0 8902 	umull	r8, r9, r0, r2
1a0042fe:	454c      	cmp	r4, r9
1a004300:	46c6      	mov	lr, r8
1a004302:	464d      	mov	r5, r9
1a004304:	d315      	bcc.n	1a004332 <__udivmoddi4+0x2ae>
1a004306:	d012      	beq.n	1a00432e <__udivmoddi4+0x2aa>
1a004308:	b156      	cbz	r6, 1a004320 <__udivmoddi4+0x29c>
1a00430a:	ebba 030e 	subs.w	r3, sl, lr
1a00430e:	eb64 0405 	sbc.w	r4, r4, r5
1a004312:	fa04 f707 	lsl.w	r7, r4, r7
1a004316:	40cb      	lsrs	r3, r1
1a004318:	431f      	orrs	r7, r3
1a00431a:	40cc      	lsrs	r4, r1
1a00431c:	6037      	str	r7, [r6, #0]
1a00431e:	6074      	str	r4, [r6, #4]
1a004320:	2100      	movs	r1, #0
1a004322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004326:	4618      	mov	r0, r3
1a004328:	e6f8      	b.n	1a00411c <__udivmoddi4+0x98>
1a00432a:	4690      	mov	r8, r2
1a00432c:	e6e0      	b.n	1a0040f0 <__udivmoddi4+0x6c>
1a00432e:	45c2      	cmp	sl, r8
1a004330:	d2ea      	bcs.n	1a004308 <__udivmoddi4+0x284>
1a004332:	ebb8 0e02 	subs.w	lr, r8, r2
1a004336:	eb69 0503 	sbc.w	r5, r9, r3
1a00433a:	3801      	subs	r0, #1
1a00433c:	e7e4      	b.n	1a004308 <__udivmoddi4+0x284>
1a00433e:	4628      	mov	r0, r5
1a004340:	e7d7      	b.n	1a0042f2 <__udivmoddi4+0x26e>
1a004342:	4640      	mov	r0, r8
1a004344:	e791      	b.n	1a00426a <__udivmoddi4+0x1e6>
1a004346:	4681      	mov	r9, r0
1a004348:	e7be      	b.n	1a0042c8 <__udivmoddi4+0x244>
1a00434a:	4601      	mov	r1, r0
1a00434c:	e778      	b.n	1a004240 <__udivmoddi4+0x1bc>
1a00434e:	3802      	subs	r0, #2
1a004350:	443c      	add	r4, r7
1a004352:	e745      	b.n	1a0041e0 <__udivmoddi4+0x15c>
1a004354:	4608      	mov	r0, r1
1a004356:	e708      	b.n	1a00416a <__udivmoddi4+0xe6>
1a004358:	f1a8 0802 	sub.w	r8, r8, #2
1a00435c:	443d      	add	r5, r7
1a00435e:	e72b      	b.n	1a0041b8 <__udivmoddi4+0x134>

1a004360 <__aeabi_idiv0>:
1a004360:	4770      	bx	lr
1a004362:	bf00      	nop

1a004364 <_fclose_r>:
1a004364:	b570      	push	{r4, r5, r6, lr}
1a004366:	b139      	cbz	r1, 1a004378 <_fclose_r+0x14>
1a004368:	4605      	mov	r5, r0
1a00436a:	460c      	mov	r4, r1
1a00436c:	b108      	cbz	r0, 1a004372 <_fclose_r+0xe>
1a00436e:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a004370:	b383      	cbz	r3, 1a0043d4 <_fclose_r+0x70>
1a004372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004376:	b913      	cbnz	r3, 1a00437e <_fclose_r+0x1a>
1a004378:	2600      	movs	r6, #0
1a00437a:	4630      	mov	r0, r6
1a00437c:	bd70      	pop	{r4, r5, r6, pc}
1a00437e:	4621      	mov	r1, r4
1a004380:	4628      	mov	r0, r5
1a004382:	f000 f837 	bl	1a0043f4 <__sflush_r>
1a004386:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a004388:	4606      	mov	r6, r0
1a00438a:	b133      	cbz	r3, 1a00439a <_fclose_r+0x36>
1a00438c:	69e1      	ldr	r1, [r4, #28]
1a00438e:	4628      	mov	r0, r5
1a004390:	4798      	blx	r3
1a004392:	2800      	cmp	r0, #0
1a004394:	bfb8      	it	lt
1a004396:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
1a00439a:	89a3      	ldrh	r3, [r4, #12]
1a00439c:	061b      	lsls	r3, r3, #24
1a00439e:	d41c      	bmi.n	1a0043da <_fclose_r+0x76>
1a0043a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a0043a2:	b141      	cbz	r1, 1a0043b6 <_fclose_r+0x52>
1a0043a4:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a0043a8:	4299      	cmp	r1, r3
1a0043aa:	d002      	beq.n	1a0043b2 <_fclose_r+0x4e>
1a0043ac:	4628      	mov	r0, r5
1a0043ae:	f000 fa43 	bl	1a004838 <_free_r>
1a0043b2:	2300      	movs	r3, #0
1a0043b4:	6323      	str	r3, [r4, #48]	; 0x30
1a0043b6:	6c61      	ldr	r1, [r4, #68]	; 0x44
1a0043b8:	b121      	cbz	r1, 1a0043c4 <_fclose_r+0x60>
1a0043ba:	4628      	mov	r0, r5
1a0043bc:	f000 fa3c 	bl	1a004838 <_free_r>
1a0043c0:	2300      	movs	r3, #0
1a0043c2:	6463      	str	r3, [r4, #68]	; 0x44
1a0043c4:	f000 f9cc 	bl	1a004760 <__sfp_lock_acquire>
1a0043c8:	2300      	movs	r3, #0
1a0043ca:	81a3      	strh	r3, [r4, #12]
1a0043cc:	f000 f9ca 	bl	1a004764 <__sfp_lock_release>
1a0043d0:	4630      	mov	r0, r6
1a0043d2:	bd70      	pop	{r4, r5, r6, pc}
1a0043d4:	f000 f9c0 	bl	1a004758 <__sinit>
1a0043d8:	e7cb      	b.n	1a004372 <_fclose_r+0xe>
1a0043da:	6921      	ldr	r1, [r4, #16]
1a0043dc:	4628      	mov	r0, r5
1a0043de:	f000 fa2b 	bl	1a004838 <_free_r>
1a0043e2:	e7dd      	b.n	1a0043a0 <_fclose_r+0x3c>

1a0043e4 <fclose>:
1a0043e4:	4b02      	ldr	r3, [pc, #8]	; (1a0043f0 <fclose+0xc>)
1a0043e6:	4601      	mov	r1, r0
1a0043e8:	6818      	ldr	r0, [r3, #0]
1a0043ea:	f7ff bfbb 	b.w	1a004364 <_fclose_r>
1a0043ee:	bf00      	nop
1a0043f0:	10000040 	.word	0x10000040

1a0043f4 <__sflush_r>:
1a0043f4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a0043f8:	b29a      	uxth	r2, r3
1a0043fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0043fe:	460d      	mov	r5, r1
1a004400:	0711      	lsls	r1, r2, #28
1a004402:	4680      	mov	r8, r0
1a004404:	d43a      	bmi.n	1a00447c <__sflush_r+0x88>
1a004406:	686a      	ldr	r2, [r5, #4]
1a004408:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00440c:	2a00      	cmp	r2, #0
1a00440e:	81ab      	strh	r3, [r5, #12]
1a004410:	dd6f      	ble.n	1a0044f2 <__sflush_r+0xfe>
1a004412:	6aac      	ldr	r4, [r5, #40]	; 0x28
1a004414:	2c00      	cmp	r4, #0
1a004416:	d049      	beq.n	1a0044ac <__sflush_r+0xb8>
1a004418:	2200      	movs	r2, #0
1a00441a:	b29b      	uxth	r3, r3
1a00441c:	f8d8 6000 	ldr.w	r6, [r8]
1a004420:	f8c8 2000 	str.w	r2, [r8]
1a004424:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
1a004428:	d067      	beq.n	1a0044fa <__sflush_r+0x106>
1a00442a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
1a00442c:	075f      	lsls	r7, r3, #29
1a00442e:	d505      	bpl.n	1a00443c <__sflush_r+0x48>
1a004430:	6869      	ldr	r1, [r5, #4]
1a004432:	6b2b      	ldr	r3, [r5, #48]	; 0x30
1a004434:	1a52      	subs	r2, r2, r1
1a004436:	b10b      	cbz	r3, 1a00443c <__sflush_r+0x48>
1a004438:	6beb      	ldr	r3, [r5, #60]	; 0x3c
1a00443a:	1ad2      	subs	r2, r2, r3
1a00443c:	2300      	movs	r3, #0
1a00443e:	69e9      	ldr	r1, [r5, #28]
1a004440:	4640      	mov	r0, r8
1a004442:	47a0      	blx	r4
1a004444:	1c44      	adds	r4, r0, #1
1a004446:	d03c      	beq.n	1a0044c2 <__sflush_r+0xce>
1a004448:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
1a00444c:	692a      	ldr	r2, [r5, #16]
1a00444e:	602a      	str	r2, [r5, #0]
1a004450:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a004454:	2200      	movs	r2, #0
1a004456:	81ab      	strh	r3, [r5, #12]
1a004458:	04db      	lsls	r3, r3, #19
1a00445a:	606a      	str	r2, [r5, #4]
1a00445c:	d447      	bmi.n	1a0044ee <__sflush_r+0xfa>
1a00445e:	6b29      	ldr	r1, [r5, #48]	; 0x30
1a004460:	f8c8 6000 	str.w	r6, [r8]
1a004464:	b311      	cbz	r1, 1a0044ac <__sflush_r+0xb8>
1a004466:	f105 0340 	add.w	r3, r5, #64	; 0x40
1a00446a:	4299      	cmp	r1, r3
1a00446c:	d002      	beq.n	1a004474 <__sflush_r+0x80>
1a00446e:	4640      	mov	r0, r8
1a004470:	f000 f9e2 	bl	1a004838 <_free_r>
1a004474:	2000      	movs	r0, #0
1a004476:	6328      	str	r0, [r5, #48]	; 0x30
1a004478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00447c:	692e      	ldr	r6, [r5, #16]
1a00447e:	b1ae      	cbz	r6, 1a0044ac <__sflush_r+0xb8>
1a004480:	682c      	ldr	r4, [r5, #0]
1a004482:	602e      	str	r6, [r5, #0]
1a004484:	0791      	lsls	r1, r2, #30
1a004486:	bf0c      	ite	eq
1a004488:	696b      	ldreq	r3, [r5, #20]
1a00448a:	2300      	movne	r3, #0
1a00448c:	1ba4      	subs	r4, r4, r6
1a00448e:	60ab      	str	r3, [r5, #8]
1a004490:	e00a      	b.n	1a0044a8 <__sflush_r+0xb4>
1a004492:	4623      	mov	r3, r4
1a004494:	4632      	mov	r2, r6
1a004496:	6a6f      	ldr	r7, [r5, #36]	; 0x24
1a004498:	69e9      	ldr	r1, [r5, #28]
1a00449a:	4640      	mov	r0, r8
1a00449c:	47b8      	blx	r7
1a00449e:	2800      	cmp	r0, #0
1a0044a0:	eba4 0400 	sub.w	r4, r4, r0
1a0044a4:	4406      	add	r6, r0
1a0044a6:	dd04      	ble.n	1a0044b2 <__sflush_r+0xbe>
1a0044a8:	2c00      	cmp	r4, #0
1a0044aa:	dcf2      	bgt.n	1a004492 <__sflush_r+0x9e>
1a0044ac:	2000      	movs	r0, #0
1a0044ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0044b2:	89ab      	ldrh	r3, [r5, #12]
1a0044b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0044b8:	81ab      	strh	r3, [r5, #12]
1a0044ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0044be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0044c2:	f8d8 4000 	ldr.w	r4, [r8]
1a0044c6:	2c1d      	cmp	r4, #29
1a0044c8:	d8f3      	bhi.n	1a0044b2 <__sflush_r+0xbe>
1a0044ca:	4b19      	ldr	r3, [pc, #100]	; (1a004530 <__sflush_r+0x13c>)
1a0044cc:	40e3      	lsrs	r3, r4
1a0044ce:	43db      	mvns	r3, r3
1a0044d0:	f013 0301 	ands.w	r3, r3, #1
1a0044d4:	d1ed      	bne.n	1a0044b2 <__sflush_r+0xbe>
1a0044d6:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
1a0044da:	606b      	str	r3, [r5, #4]
1a0044dc:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
1a0044e0:	6929      	ldr	r1, [r5, #16]
1a0044e2:	81ab      	strh	r3, [r5, #12]
1a0044e4:	04da      	lsls	r2, r3, #19
1a0044e6:	6029      	str	r1, [r5, #0]
1a0044e8:	d5b9      	bpl.n	1a00445e <__sflush_r+0x6a>
1a0044ea:	2c00      	cmp	r4, #0
1a0044ec:	d1b7      	bne.n	1a00445e <__sflush_r+0x6a>
1a0044ee:	6528      	str	r0, [r5, #80]	; 0x50
1a0044f0:	e7b5      	b.n	1a00445e <__sflush_r+0x6a>
1a0044f2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
1a0044f4:	2a00      	cmp	r2, #0
1a0044f6:	dc8c      	bgt.n	1a004412 <__sflush_r+0x1e>
1a0044f8:	e7d8      	b.n	1a0044ac <__sflush_r+0xb8>
1a0044fa:	2301      	movs	r3, #1
1a0044fc:	69e9      	ldr	r1, [r5, #28]
1a0044fe:	4640      	mov	r0, r8
1a004500:	47a0      	blx	r4
1a004502:	1c43      	adds	r3, r0, #1
1a004504:	4602      	mov	r2, r0
1a004506:	d002      	beq.n	1a00450e <__sflush_r+0x11a>
1a004508:	89ab      	ldrh	r3, [r5, #12]
1a00450a:	6aac      	ldr	r4, [r5, #40]	; 0x28
1a00450c:	e78e      	b.n	1a00442c <__sflush_r+0x38>
1a00450e:	f8d8 3000 	ldr.w	r3, [r8]
1a004512:	2b00      	cmp	r3, #0
1a004514:	d0f8      	beq.n	1a004508 <__sflush_r+0x114>
1a004516:	2b1d      	cmp	r3, #29
1a004518:	d001      	beq.n	1a00451e <__sflush_r+0x12a>
1a00451a:	2b16      	cmp	r3, #22
1a00451c:	d102      	bne.n	1a004524 <__sflush_r+0x130>
1a00451e:	f8c8 6000 	str.w	r6, [r8]
1a004522:	e7c3      	b.n	1a0044ac <__sflush_r+0xb8>
1a004524:	89ab      	ldrh	r3, [r5, #12]
1a004526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00452a:	81ab      	strh	r3, [r5, #12]
1a00452c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a004530:	20400001 	.word	0x20400001

1a004534 <_fflush_r>:
1a004534:	b510      	push	{r4, lr}
1a004536:	4604      	mov	r4, r0
1a004538:	b082      	sub	sp, #8
1a00453a:	b108      	cbz	r0, 1a004540 <_fflush_r+0xc>
1a00453c:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a00453e:	b153      	cbz	r3, 1a004556 <_fflush_r+0x22>
1a004540:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
1a004544:	b908      	cbnz	r0, 1a00454a <_fflush_r+0x16>
1a004546:	b002      	add	sp, #8
1a004548:	bd10      	pop	{r4, pc}
1a00454a:	4620      	mov	r0, r4
1a00454c:	b002      	add	sp, #8
1a00454e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a004552:	f7ff bf4f 	b.w	1a0043f4 <__sflush_r>
1a004556:	9101      	str	r1, [sp, #4]
1a004558:	f000 f8fe 	bl	1a004758 <__sinit>
1a00455c:	9901      	ldr	r1, [sp, #4]
1a00455e:	e7ef      	b.n	1a004540 <_fflush_r+0xc>

1a004560 <fflush>:
1a004560:	b120      	cbz	r0, 1a00456c <fflush+0xc>
1a004562:	4b05      	ldr	r3, [pc, #20]	; (1a004578 <fflush+0x18>)
1a004564:	4601      	mov	r1, r0
1a004566:	6818      	ldr	r0, [r3, #0]
1a004568:	f7ff bfe4 	b.w	1a004534 <_fflush_r>
1a00456c:	4b03      	ldr	r3, [pc, #12]	; (1a00457c <fflush+0x1c>)
1a00456e:	4904      	ldr	r1, [pc, #16]	; (1a004580 <fflush+0x20>)
1a004570:	6818      	ldr	r0, [r3, #0]
1a004572:	f000 ba6d 	b.w	1a004a50 <_fwalk_reent>
1a004576:	bf00      	nop
1a004578:	10000040 	.word	0x10000040
1a00457c:	1a00a2a8 	.word	0x1a00a2a8
1a004580:	1a004535 	.word	0x1a004535

1a004584 <__fp_unlock>:
1a004584:	2000      	movs	r0, #0
1a004586:	4770      	bx	lr

1a004588 <_cleanup_r>:
1a004588:	4901      	ldr	r1, [pc, #4]	; (1a004590 <_cleanup_r+0x8>)
1a00458a:	f000 ba61 	b.w	1a004a50 <_fwalk_reent>
1a00458e:	bf00      	nop
1a004590:	1a004365 	.word	0x1a004365

1a004594 <__sinit.part.1>:
1a004594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004598:	4b35      	ldr	r3, [pc, #212]	; (1a004670 <__sinit.part.1+0xdc>)
1a00459a:	6845      	ldr	r5, [r0, #4]
1a00459c:	63c3      	str	r3, [r0, #60]	; 0x3c
1a00459e:	2400      	movs	r4, #0
1a0045a0:	4607      	mov	r7, r0
1a0045a2:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
1a0045a6:	2304      	movs	r3, #4
1a0045a8:	2103      	movs	r1, #3
1a0045aa:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
1a0045ae:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
1a0045b2:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
1a0045b6:	b083      	sub	sp, #12
1a0045b8:	602c      	str	r4, [r5, #0]
1a0045ba:	606c      	str	r4, [r5, #4]
1a0045bc:	60ac      	str	r4, [r5, #8]
1a0045be:	666c      	str	r4, [r5, #100]	; 0x64
1a0045c0:	81ec      	strh	r4, [r5, #14]
1a0045c2:	612c      	str	r4, [r5, #16]
1a0045c4:	616c      	str	r4, [r5, #20]
1a0045c6:	61ac      	str	r4, [r5, #24]
1a0045c8:	81ab      	strh	r3, [r5, #12]
1a0045ca:	4621      	mov	r1, r4
1a0045cc:	f105 005c 	add.w	r0, r5, #92	; 0x5c
1a0045d0:	2208      	movs	r2, #8
1a0045d2:	f000 fdd3 	bl	1a00517c <memset>
1a0045d6:	68be      	ldr	r6, [r7, #8]
1a0045d8:	f8df b098 	ldr.w	fp, [pc, #152]	; 1a004674 <__sinit.part.1+0xe0>
1a0045dc:	f8df a098 	ldr.w	sl, [pc, #152]	; 1a004678 <__sinit.part.1+0xe4>
1a0045e0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1a00467c <__sinit.part.1+0xe8>
1a0045e4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1a004680 <__sinit.part.1+0xec>
1a0045e8:	f8c5 b020 	str.w	fp, [r5, #32]
1a0045ec:	2301      	movs	r3, #1
1a0045ee:	2209      	movs	r2, #9
1a0045f0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
1a0045f4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
1a0045f8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
1a0045fc:	61ed      	str	r5, [r5, #28]
1a0045fe:	4621      	mov	r1, r4
1a004600:	81f3      	strh	r3, [r6, #14]
1a004602:	81b2      	strh	r2, [r6, #12]
1a004604:	f106 005c 	add.w	r0, r6, #92	; 0x5c
1a004608:	6034      	str	r4, [r6, #0]
1a00460a:	6074      	str	r4, [r6, #4]
1a00460c:	60b4      	str	r4, [r6, #8]
1a00460e:	6674      	str	r4, [r6, #100]	; 0x64
1a004610:	6134      	str	r4, [r6, #16]
1a004612:	6174      	str	r4, [r6, #20]
1a004614:	61b4      	str	r4, [r6, #24]
1a004616:	2208      	movs	r2, #8
1a004618:	9301      	str	r3, [sp, #4]
1a00461a:	f000 fdaf 	bl	1a00517c <memset>
1a00461e:	68fd      	ldr	r5, [r7, #12]
1a004620:	61f6      	str	r6, [r6, #28]
1a004622:	2012      	movs	r0, #18
1a004624:	2202      	movs	r2, #2
1a004626:	f8c6 b020 	str.w	fp, [r6, #32]
1a00462a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
1a00462e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
1a004632:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
1a004636:	4621      	mov	r1, r4
1a004638:	81a8      	strh	r0, [r5, #12]
1a00463a:	81ea      	strh	r2, [r5, #14]
1a00463c:	602c      	str	r4, [r5, #0]
1a00463e:	606c      	str	r4, [r5, #4]
1a004640:	60ac      	str	r4, [r5, #8]
1a004642:	666c      	str	r4, [r5, #100]	; 0x64
1a004644:	612c      	str	r4, [r5, #16]
1a004646:	616c      	str	r4, [r5, #20]
1a004648:	61ac      	str	r4, [r5, #24]
1a00464a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
1a00464e:	2208      	movs	r2, #8
1a004650:	f000 fd94 	bl	1a00517c <memset>
1a004654:	9b01      	ldr	r3, [sp, #4]
1a004656:	61ed      	str	r5, [r5, #28]
1a004658:	f8c5 b020 	str.w	fp, [r5, #32]
1a00465c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
1a004660:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
1a004664:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
1a004668:	63bb      	str	r3, [r7, #56]	; 0x38
1a00466a:	b003      	add	sp, #12
1a00466c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004670:	1a004589 	.word	0x1a004589
1a004674:	1a0052e1 	.word	0x1a0052e1
1a004678:	1a005309 	.word	0x1a005309
1a00467c:	1a005345 	.word	0x1a005345
1a004680:	1a005365 	.word	0x1a005365

1a004684 <__fp_lock>:
1a004684:	2000      	movs	r0, #0
1a004686:	4770      	bx	lr

1a004688 <__sfmoreglue>:
1a004688:	b570      	push	{r4, r5, r6, lr}
1a00468a:	1e4a      	subs	r2, r1, #1
1a00468c:	2568      	movs	r5, #104	; 0x68
1a00468e:	fb05 f502 	mul.w	r5, r5, r2
1a004692:	460e      	mov	r6, r1
1a004694:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a004698:	f000 fa2c 	bl	1a004af4 <_malloc_r>
1a00469c:	4604      	mov	r4, r0
1a00469e:	b140      	cbz	r0, 1a0046b2 <__sfmoreglue+0x2a>
1a0046a0:	2100      	movs	r1, #0
1a0046a2:	300c      	adds	r0, #12
1a0046a4:	6066      	str	r6, [r4, #4]
1a0046a6:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a0046aa:	6021      	str	r1, [r4, #0]
1a0046ac:	60a0      	str	r0, [r4, #8]
1a0046ae:	f000 fd65 	bl	1a00517c <memset>
1a0046b2:	4620      	mov	r0, r4
1a0046b4:	bd70      	pop	{r4, r5, r6, pc}
1a0046b6:	bf00      	nop

1a0046b8 <__sfp>:
1a0046b8:	4b21      	ldr	r3, [pc, #132]	; (1a004740 <__sfp+0x88>)
1a0046ba:	b570      	push	{r4, r5, r6, lr}
1a0046bc:	681d      	ldr	r5, [r3, #0]
1a0046be:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a0046c0:	4606      	mov	r6, r0
1a0046c2:	2b00      	cmp	r3, #0
1a0046c4:	d02c      	beq.n	1a004720 <__sfp+0x68>
1a0046c6:	f505 7538 	add.w	r5, r5, #736	; 0x2e0
1a0046ca:	686b      	ldr	r3, [r5, #4]
1a0046cc:	68ac      	ldr	r4, [r5, #8]
1a0046ce:	3b01      	subs	r3, #1
1a0046d0:	d505      	bpl.n	1a0046de <__sfp+0x26>
1a0046d2:	e021      	b.n	1a004718 <__sfp+0x60>
1a0046d4:	3b01      	subs	r3, #1
1a0046d6:	1c5a      	adds	r2, r3, #1
1a0046d8:	f104 0468 	add.w	r4, r4, #104	; 0x68
1a0046dc:	d01c      	beq.n	1a004718 <__sfp+0x60>
1a0046de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a0046e2:	2a00      	cmp	r2, #0
1a0046e4:	d1f6      	bne.n	1a0046d4 <__sfp+0x1c>
1a0046e6:	2500      	movs	r5, #0
1a0046e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
1a0046ec:	2301      	movs	r3, #1
1a0046ee:	81e2      	strh	r2, [r4, #14]
1a0046f0:	81a3      	strh	r3, [r4, #12]
1a0046f2:	6665      	str	r5, [r4, #100]	; 0x64
1a0046f4:	6025      	str	r5, [r4, #0]
1a0046f6:	60a5      	str	r5, [r4, #8]
1a0046f8:	6065      	str	r5, [r4, #4]
1a0046fa:	6125      	str	r5, [r4, #16]
1a0046fc:	6165      	str	r5, [r4, #20]
1a0046fe:	61a5      	str	r5, [r4, #24]
1a004700:	4629      	mov	r1, r5
1a004702:	2208      	movs	r2, #8
1a004704:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a004708:	f000 fd38 	bl	1a00517c <memset>
1a00470c:	6325      	str	r5, [r4, #48]	; 0x30
1a00470e:	6365      	str	r5, [r4, #52]	; 0x34
1a004710:	6465      	str	r5, [r4, #68]	; 0x44
1a004712:	64a5      	str	r5, [r4, #72]	; 0x48
1a004714:	4620      	mov	r0, r4
1a004716:	bd70      	pop	{r4, r5, r6, pc}
1a004718:	6828      	ldr	r0, [r5, #0]
1a00471a:	b128      	cbz	r0, 1a004728 <__sfp+0x70>
1a00471c:	4605      	mov	r5, r0
1a00471e:	e7d4      	b.n	1a0046ca <__sfp+0x12>
1a004720:	4628      	mov	r0, r5
1a004722:	f7ff ff37 	bl	1a004594 <__sinit.part.1>
1a004726:	e7ce      	b.n	1a0046c6 <__sfp+0xe>
1a004728:	2104      	movs	r1, #4
1a00472a:	4630      	mov	r0, r6
1a00472c:	f7ff ffac 	bl	1a004688 <__sfmoreglue>
1a004730:	6028      	str	r0, [r5, #0]
1a004732:	2800      	cmp	r0, #0
1a004734:	d1f2      	bne.n	1a00471c <__sfp+0x64>
1a004736:	230c      	movs	r3, #12
1a004738:	4604      	mov	r4, r0
1a00473a:	6033      	str	r3, [r6, #0]
1a00473c:	e7ea      	b.n	1a004714 <__sfp+0x5c>
1a00473e:	bf00      	nop
1a004740:	1a00a2a8 	.word	0x1a00a2a8

1a004744 <_cleanup>:
1a004744:	4b02      	ldr	r3, [pc, #8]	; (1a004750 <_cleanup+0xc>)
1a004746:	4903      	ldr	r1, [pc, #12]	; (1a004754 <_cleanup+0x10>)
1a004748:	6818      	ldr	r0, [r3, #0]
1a00474a:	f000 b981 	b.w	1a004a50 <_fwalk_reent>
1a00474e:	bf00      	nop
1a004750:	1a00a2a8 	.word	0x1a00a2a8
1a004754:	1a004365 	.word	0x1a004365

1a004758 <__sinit>:
1a004758:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a00475a:	b103      	cbz	r3, 1a00475e <__sinit+0x6>
1a00475c:	4770      	bx	lr
1a00475e:	e719      	b.n	1a004594 <__sinit.part.1>

1a004760 <__sfp_lock_acquire>:
1a004760:	4770      	bx	lr
1a004762:	bf00      	nop

1a004764 <__sfp_lock_release>:
1a004764:	4770      	bx	lr
1a004766:	bf00      	nop

1a004768 <__sinit_lock_acquire>:
1a004768:	4770      	bx	lr
1a00476a:	bf00      	nop

1a00476c <__sinit_lock_release>:
1a00476c:	4770      	bx	lr
1a00476e:	bf00      	nop

1a004770 <__fp_lock_all>:
1a004770:	4b02      	ldr	r3, [pc, #8]	; (1a00477c <__fp_lock_all+0xc>)
1a004772:	4903      	ldr	r1, [pc, #12]	; (1a004780 <__fp_lock_all+0x10>)
1a004774:	6818      	ldr	r0, [r3, #0]
1a004776:	f000 b945 	b.w	1a004a04 <_fwalk>
1a00477a:	bf00      	nop
1a00477c:	10000040 	.word	0x10000040
1a004780:	1a004685 	.word	0x1a004685

1a004784 <__fp_unlock_all>:
1a004784:	4b02      	ldr	r3, [pc, #8]	; (1a004790 <__fp_unlock_all+0xc>)
1a004786:	4903      	ldr	r1, [pc, #12]	; (1a004794 <__fp_unlock_all+0x10>)
1a004788:	6818      	ldr	r0, [r3, #0]
1a00478a:	f000 b93b 	b.w	1a004a04 <_fwalk>
1a00478e:	bf00      	nop
1a004790:	10000040 	.word	0x10000040
1a004794:	1a004585 	.word	0x1a004585

1a004798 <_malloc_trim_r>:
1a004798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00479a:	4f24      	ldr	r7, [pc, #144]	; (1a00482c <_malloc_trim_r+0x94>)
1a00479c:	460c      	mov	r4, r1
1a00479e:	4606      	mov	r6, r0
1a0047a0:	f000 fd3a 	bl	1a005218 <__malloc_lock>
1a0047a4:	68bb      	ldr	r3, [r7, #8]
1a0047a6:	685d      	ldr	r5, [r3, #4]
1a0047a8:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
1a0047ac:	310f      	adds	r1, #15
1a0047ae:	f025 0503 	bic.w	r5, r5, #3
1a0047b2:	4429      	add	r1, r5
1a0047b4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
1a0047b8:	f021 010f 	bic.w	r1, r1, #15
1a0047bc:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
1a0047c0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
1a0047c4:	db07      	blt.n	1a0047d6 <_malloc_trim_r+0x3e>
1a0047c6:	2100      	movs	r1, #0
1a0047c8:	4630      	mov	r0, r6
1a0047ca:	f7fb ff43 	bl	1a000654 <_sbrk_r>
1a0047ce:	68bb      	ldr	r3, [r7, #8]
1a0047d0:	442b      	add	r3, r5
1a0047d2:	4298      	cmp	r0, r3
1a0047d4:	d004      	beq.n	1a0047e0 <_malloc_trim_r+0x48>
1a0047d6:	4630      	mov	r0, r6
1a0047d8:	f000 fd20 	bl	1a00521c <__malloc_unlock>
1a0047dc:	2000      	movs	r0, #0
1a0047de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0047e0:	4261      	negs	r1, r4
1a0047e2:	4630      	mov	r0, r6
1a0047e4:	f7fb ff36 	bl	1a000654 <_sbrk_r>
1a0047e8:	3001      	adds	r0, #1
1a0047ea:	d00d      	beq.n	1a004808 <_malloc_trim_r+0x70>
1a0047ec:	4b10      	ldr	r3, [pc, #64]	; (1a004830 <_malloc_trim_r+0x98>)
1a0047ee:	68ba      	ldr	r2, [r7, #8]
1a0047f0:	6819      	ldr	r1, [r3, #0]
1a0047f2:	1b2d      	subs	r5, r5, r4
1a0047f4:	f045 0501 	orr.w	r5, r5, #1
1a0047f8:	4630      	mov	r0, r6
1a0047fa:	1b09      	subs	r1, r1, r4
1a0047fc:	6055      	str	r5, [r2, #4]
1a0047fe:	6019      	str	r1, [r3, #0]
1a004800:	f000 fd0c 	bl	1a00521c <__malloc_unlock>
1a004804:	2001      	movs	r0, #1
1a004806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004808:	2100      	movs	r1, #0
1a00480a:	4630      	mov	r0, r6
1a00480c:	f7fb ff22 	bl	1a000654 <_sbrk_r>
1a004810:	68ba      	ldr	r2, [r7, #8]
1a004812:	1a83      	subs	r3, r0, r2
1a004814:	2b0f      	cmp	r3, #15
1a004816:	ddde      	ble.n	1a0047d6 <_malloc_trim_r+0x3e>
1a004818:	4c06      	ldr	r4, [pc, #24]	; (1a004834 <_malloc_trim_r+0x9c>)
1a00481a:	4905      	ldr	r1, [pc, #20]	; (1a004830 <_malloc_trim_r+0x98>)
1a00481c:	6824      	ldr	r4, [r4, #0]
1a00481e:	f043 0301 	orr.w	r3, r3, #1
1a004822:	1b00      	subs	r0, r0, r4
1a004824:	6053      	str	r3, [r2, #4]
1a004826:	6008      	str	r0, [r1, #0]
1a004828:	e7d5      	b.n	1a0047d6 <_malloc_trim_r+0x3e>
1a00482a:	bf00      	nop
1a00482c:	10000470 	.word	0x10000470
1a004830:	10003354 	.word	0x10003354
1a004834:	10000878 	.word	0x10000878

1a004838 <_free_r>:
1a004838:	2900      	cmp	r1, #0
1a00483a:	d044      	beq.n	1a0048c6 <_free_r+0x8e>
1a00483c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004840:	460d      	mov	r5, r1
1a004842:	4680      	mov	r8, r0
1a004844:	f000 fce8 	bl	1a005218 <__malloc_lock>
1a004848:	f855 7c04 	ldr.w	r7, [r5, #-4]
1a00484c:	4969      	ldr	r1, [pc, #420]	; (1a0049f4 <_free_r+0x1bc>)
1a00484e:	f027 0301 	bic.w	r3, r7, #1
1a004852:	f1a5 0408 	sub.w	r4, r5, #8
1a004856:	18e2      	adds	r2, r4, r3
1a004858:	688e      	ldr	r6, [r1, #8]
1a00485a:	6850      	ldr	r0, [r2, #4]
1a00485c:	42b2      	cmp	r2, r6
1a00485e:	f020 0003 	bic.w	r0, r0, #3
1a004862:	d05e      	beq.n	1a004922 <_free_r+0xea>
1a004864:	07fe      	lsls	r6, r7, #31
1a004866:	6050      	str	r0, [r2, #4]
1a004868:	d40b      	bmi.n	1a004882 <_free_r+0x4a>
1a00486a:	f855 7c08 	ldr.w	r7, [r5, #-8]
1a00486e:	1be4      	subs	r4, r4, r7
1a004870:	f101 0e08 	add.w	lr, r1, #8
1a004874:	68a5      	ldr	r5, [r4, #8]
1a004876:	4575      	cmp	r5, lr
1a004878:	443b      	add	r3, r7
1a00487a:	d06d      	beq.n	1a004958 <_free_r+0x120>
1a00487c:	68e7      	ldr	r7, [r4, #12]
1a00487e:	60ef      	str	r7, [r5, #12]
1a004880:	60bd      	str	r5, [r7, #8]
1a004882:	1815      	adds	r5, r2, r0
1a004884:	686d      	ldr	r5, [r5, #4]
1a004886:	07ed      	lsls	r5, r5, #31
1a004888:	d53e      	bpl.n	1a004908 <_free_r+0xd0>
1a00488a:	f043 0201 	orr.w	r2, r3, #1
1a00488e:	6062      	str	r2, [r4, #4]
1a004890:	50e3      	str	r3, [r4, r3]
1a004892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a004896:	d217      	bcs.n	1a0048c8 <_free_r+0x90>
1a004898:	08db      	lsrs	r3, r3, #3
1a00489a:	1c58      	adds	r0, r3, #1
1a00489c:	109a      	asrs	r2, r3, #2
1a00489e:	684d      	ldr	r5, [r1, #4]
1a0048a0:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
1a0048a4:	60a7      	str	r7, [r4, #8]
1a0048a6:	2301      	movs	r3, #1
1a0048a8:	4093      	lsls	r3, r2
1a0048aa:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
1a0048ae:	432b      	orrs	r3, r5
1a0048b0:	3a08      	subs	r2, #8
1a0048b2:	60e2      	str	r2, [r4, #12]
1a0048b4:	604b      	str	r3, [r1, #4]
1a0048b6:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
1a0048ba:	60fc      	str	r4, [r7, #12]
1a0048bc:	4640      	mov	r0, r8
1a0048be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a0048c2:	f000 bcab 	b.w	1a00521c <__malloc_unlock>
1a0048c6:	4770      	bx	lr
1a0048c8:	0a5a      	lsrs	r2, r3, #9
1a0048ca:	2a04      	cmp	r2, #4
1a0048cc:	d852      	bhi.n	1a004974 <_free_r+0x13c>
1a0048ce:	099a      	lsrs	r2, r3, #6
1a0048d0:	f102 0739 	add.w	r7, r2, #57	; 0x39
1a0048d4:	00ff      	lsls	r7, r7, #3
1a0048d6:	f102 0538 	add.w	r5, r2, #56	; 0x38
1a0048da:	19c8      	adds	r0, r1, r7
1a0048dc:	59ca      	ldr	r2, [r1, r7]
1a0048de:	3808      	subs	r0, #8
1a0048e0:	4290      	cmp	r0, r2
1a0048e2:	d04f      	beq.n	1a004984 <_free_r+0x14c>
1a0048e4:	6851      	ldr	r1, [r2, #4]
1a0048e6:	f021 0103 	bic.w	r1, r1, #3
1a0048ea:	428b      	cmp	r3, r1
1a0048ec:	d232      	bcs.n	1a004954 <_free_r+0x11c>
1a0048ee:	6892      	ldr	r2, [r2, #8]
1a0048f0:	4290      	cmp	r0, r2
1a0048f2:	d1f7      	bne.n	1a0048e4 <_free_r+0xac>
1a0048f4:	68c3      	ldr	r3, [r0, #12]
1a0048f6:	60a0      	str	r0, [r4, #8]
1a0048f8:	60e3      	str	r3, [r4, #12]
1a0048fa:	609c      	str	r4, [r3, #8]
1a0048fc:	60c4      	str	r4, [r0, #12]
1a0048fe:	4640      	mov	r0, r8
1a004900:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a004904:	f000 bc8a 	b.w	1a00521c <__malloc_unlock>
1a004908:	6895      	ldr	r5, [r2, #8]
1a00490a:	4f3b      	ldr	r7, [pc, #236]	; (1a0049f8 <_free_r+0x1c0>)
1a00490c:	42bd      	cmp	r5, r7
1a00490e:	4403      	add	r3, r0
1a004910:	d040      	beq.n	1a004994 <_free_r+0x15c>
1a004912:	68d0      	ldr	r0, [r2, #12]
1a004914:	60e8      	str	r0, [r5, #12]
1a004916:	f043 0201 	orr.w	r2, r3, #1
1a00491a:	6085      	str	r5, [r0, #8]
1a00491c:	6062      	str	r2, [r4, #4]
1a00491e:	50e3      	str	r3, [r4, r3]
1a004920:	e7b7      	b.n	1a004892 <_free_r+0x5a>
1a004922:	07ff      	lsls	r7, r7, #31
1a004924:	4403      	add	r3, r0
1a004926:	d407      	bmi.n	1a004938 <_free_r+0x100>
1a004928:	f855 2c08 	ldr.w	r2, [r5, #-8]
1a00492c:	1aa4      	subs	r4, r4, r2
1a00492e:	4413      	add	r3, r2
1a004930:	68a0      	ldr	r0, [r4, #8]
1a004932:	68e2      	ldr	r2, [r4, #12]
1a004934:	60c2      	str	r2, [r0, #12]
1a004936:	6090      	str	r0, [r2, #8]
1a004938:	4a30      	ldr	r2, [pc, #192]	; (1a0049fc <_free_r+0x1c4>)
1a00493a:	6812      	ldr	r2, [r2, #0]
1a00493c:	f043 0001 	orr.w	r0, r3, #1
1a004940:	4293      	cmp	r3, r2
1a004942:	6060      	str	r0, [r4, #4]
1a004944:	608c      	str	r4, [r1, #8]
1a004946:	d3b9      	bcc.n	1a0048bc <_free_r+0x84>
1a004948:	4b2d      	ldr	r3, [pc, #180]	; (1a004a00 <_free_r+0x1c8>)
1a00494a:	4640      	mov	r0, r8
1a00494c:	6819      	ldr	r1, [r3, #0]
1a00494e:	f7ff ff23 	bl	1a004798 <_malloc_trim_r>
1a004952:	e7b3      	b.n	1a0048bc <_free_r+0x84>
1a004954:	4610      	mov	r0, r2
1a004956:	e7cd      	b.n	1a0048f4 <_free_r+0xbc>
1a004958:	1811      	adds	r1, r2, r0
1a00495a:	6849      	ldr	r1, [r1, #4]
1a00495c:	07c9      	lsls	r1, r1, #31
1a00495e:	d444      	bmi.n	1a0049ea <_free_r+0x1b2>
1a004960:	6891      	ldr	r1, [r2, #8]
1a004962:	68d2      	ldr	r2, [r2, #12]
1a004964:	60ca      	str	r2, [r1, #12]
1a004966:	4403      	add	r3, r0
1a004968:	f043 0001 	orr.w	r0, r3, #1
1a00496c:	6091      	str	r1, [r2, #8]
1a00496e:	6060      	str	r0, [r4, #4]
1a004970:	50e3      	str	r3, [r4, r3]
1a004972:	e7a3      	b.n	1a0048bc <_free_r+0x84>
1a004974:	2a14      	cmp	r2, #20
1a004976:	d816      	bhi.n	1a0049a6 <_free_r+0x16e>
1a004978:	f102 075c 	add.w	r7, r2, #92	; 0x5c
1a00497c:	00ff      	lsls	r7, r7, #3
1a00497e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
1a004982:	e7aa      	b.n	1a0048da <_free_r+0xa2>
1a004984:	10aa      	asrs	r2, r5, #2
1a004986:	2301      	movs	r3, #1
1a004988:	684d      	ldr	r5, [r1, #4]
1a00498a:	4093      	lsls	r3, r2
1a00498c:	432b      	orrs	r3, r5
1a00498e:	604b      	str	r3, [r1, #4]
1a004990:	4603      	mov	r3, r0
1a004992:	e7b0      	b.n	1a0048f6 <_free_r+0xbe>
1a004994:	f043 0201 	orr.w	r2, r3, #1
1a004998:	614c      	str	r4, [r1, #20]
1a00499a:	610c      	str	r4, [r1, #16]
1a00499c:	60e5      	str	r5, [r4, #12]
1a00499e:	60a5      	str	r5, [r4, #8]
1a0049a0:	6062      	str	r2, [r4, #4]
1a0049a2:	50e3      	str	r3, [r4, r3]
1a0049a4:	e78a      	b.n	1a0048bc <_free_r+0x84>
1a0049a6:	2a54      	cmp	r2, #84	; 0x54
1a0049a8:	d806      	bhi.n	1a0049b8 <_free_r+0x180>
1a0049aa:	0b1a      	lsrs	r2, r3, #12
1a0049ac:	f102 076f 	add.w	r7, r2, #111	; 0x6f
1a0049b0:	00ff      	lsls	r7, r7, #3
1a0049b2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
1a0049b6:	e790      	b.n	1a0048da <_free_r+0xa2>
1a0049b8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a0049bc:	d806      	bhi.n	1a0049cc <_free_r+0x194>
1a0049be:	0bda      	lsrs	r2, r3, #15
1a0049c0:	f102 0778 	add.w	r7, r2, #120	; 0x78
1a0049c4:	00ff      	lsls	r7, r7, #3
1a0049c6:	f102 0577 	add.w	r5, r2, #119	; 0x77
1a0049ca:	e786      	b.n	1a0048da <_free_r+0xa2>
1a0049cc:	f240 5054 	movw	r0, #1364	; 0x554
1a0049d0:	4282      	cmp	r2, r0
1a0049d2:	d806      	bhi.n	1a0049e2 <_free_r+0x1aa>
1a0049d4:	0c9a      	lsrs	r2, r3, #18
1a0049d6:	f102 077d 	add.w	r7, r2, #125	; 0x7d
1a0049da:	00ff      	lsls	r7, r7, #3
1a0049dc:	f102 057c 	add.w	r5, r2, #124	; 0x7c
1a0049e0:	e77b      	b.n	1a0048da <_free_r+0xa2>
1a0049e2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
1a0049e6:	257e      	movs	r5, #126	; 0x7e
1a0049e8:	e777      	b.n	1a0048da <_free_r+0xa2>
1a0049ea:	f043 0101 	orr.w	r1, r3, #1
1a0049ee:	6061      	str	r1, [r4, #4]
1a0049f0:	6013      	str	r3, [r2, #0]
1a0049f2:	e763      	b.n	1a0048bc <_free_r+0x84>
1a0049f4:	10000470 	.word	0x10000470
1a0049f8:	10000478 	.word	0x10000478
1a0049fc:	1000087c 	.word	0x1000087c
1a004a00:	10003350 	.word	0x10003350

1a004a04 <_fwalk>:
1a004a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004a08:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
1a004a0c:	d01b      	beq.n	1a004a46 <_fwalk+0x42>
1a004a0e:	4688      	mov	r8, r1
1a004a10:	2600      	movs	r6, #0
1a004a12:	687d      	ldr	r5, [r7, #4]
1a004a14:	68bc      	ldr	r4, [r7, #8]
1a004a16:	3d01      	subs	r5, #1
1a004a18:	d40f      	bmi.n	1a004a3a <_fwalk+0x36>
1a004a1a:	89a3      	ldrh	r3, [r4, #12]
1a004a1c:	2b01      	cmp	r3, #1
1a004a1e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a004a22:	d906      	bls.n	1a004a32 <_fwalk+0x2e>
1a004a24:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
1a004a28:	3301      	adds	r3, #1
1a004a2a:	4620      	mov	r0, r4
1a004a2c:	d001      	beq.n	1a004a32 <_fwalk+0x2e>
1a004a2e:	47c0      	blx	r8
1a004a30:	4306      	orrs	r6, r0
1a004a32:	1c6b      	adds	r3, r5, #1
1a004a34:	f104 0468 	add.w	r4, r4, #104	; 0x68
1a004a38:	d1ef      	bne.n	1a004a1a <_fwalk+0x16>
1a004a3a:	683f      	ldr	r7, [r7, #0]
1a004a3c:	2f00      	cmp	r7, #0
1a004a3e:	d1e8      	bne.n	1a004a12 <_fwalk+0xe>
1a004a40:	4630      	mov	r0, r6
1a004a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a004a46:	463e      	mov	r6, r7
1a004a48:	4630      	mov	r0, r6
1a004a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a004a4e:	bf00      	nop

1a004a50 <_fwalk_reent>:
1a004a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a004a54:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
1a004a58:	d01f      	beq.n	1a004a9a <_fwalk_reent+0x4a>
1a004a5a:	4688      	mov	r8, r1
1a004a5c:	4606      	mov	r6, r0
1a004a5e:	f04f 0900 	mov.w	r9, #0
1a004a62:	687d      	ldr	r5, [r7, #4]
1a004a64:	68bc      	ldr	r4, [r7, #8]
1a004a66:	3d01      	subs	r5, #1
1a004a68:	d411      	bmi.n	1a004a8e <_fwalk_reent+0x3e>
1a004a6a:	89a3      	ldrh	r3, [r4, #12]
1a004a6c:	2b01      	cmp	r3, #1
1a004a6e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a004a72:	d908      	bls.n	1a004a86 <_fwalk_reent+0x36>
1a004a74:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
1a004a78:	3301      	adds	r3, #1
1a004a7a:	4621      	mov	r1, r4
1a004a7c:	4630      	mov	r0, r6
1a004a7e:	d002      	beq.n	1a004a86 <_fwalk_reent+0x36>
1a004a80:	47c0      	blx	r8
1a004a82:	ea49 0900 	orr.w	r9, r9, r0
1a004a86:	1c6b      	adds	r3, r5, #1
1a004a88:	f104 0468 	add.w	r4, r4, #104	; 0x68
1a004a8c:	d1ed      	bne.n	1a004a6a <_fwalk_reent+0x1a>
1a004a8e:	683f      	ldr	r7, [r7, #0]
1a004a90:	2f00      	cmp	r7, #0
1a004a92:	d1e6      	bne.n	1a004a62 <_fwalk_reent+0x12>
1a004a94:	4648      	mov	r0, r9
1a004a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a004a9a:	46b9      	mov	r9, r7
1a004a9c:	4648      	mov	r0, r9
1a004a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a004aa2:	bf00      	nop

1a004aa4 <__libc_init_array>:
1a004aa4:	b570      	push	{r4, r5, r6, lr}
1a004aa6:	4e0f      	ldr	r6, [pc, #60]	; (1a004ae4 <__libc_init_array+0x40>)
1a004aa8:	4d0f      	ldr	r5, [pc, #60]	; (1a004ae8 <__libc_init_array+0x44>)
1a004aaa:	1b76      	subs	r6, r6, r5
1a004aac:	10b6      	asrs	r6, r6, #2
1a004aae:	bf18      	it	ne
1a004ab0:	2400      	movne	r4, #0
1a004ab2:	d005      	beq.n	1a004ac0 <__libc_init_array+0x1c>
1a004ab4:	3401      	adds	r4, #1
1a004ab6:	f855 3b04 	ldr.w	r3, [r5], #4
1a004aba:	4798      	blx	r3
1a004abc:	42a6      	cmp	r6, r4
1a004abe:	d1f9      	bne.n	1a004ab4 <__libc_init_array+0x10>
1a004ac0:	4e0a      	ldr	r6, [pc, #40]	; (1a004aec <__libc_init_array+0x48>)
1a004ac2:	4d0b      	ldr	r5, [pc, #44]	; (1a004af0 <__libc_init_array+0x4c>)
1a004ac4:	1b76      	subs	r6, r6, r5
1a004ac6:	f7fb fd70 	bl	1a0005aa <_init>
1a004aca:	10b6      	asrs	r6, r6, #2
1a004acc:	bf18      	it	ne
1a004ace:	2400      	movne	r4, #0
1a004ad0:	d006      	beq.n	1a004ae0 <__libc_init_array+0x3c>
1a004ad2:	3401      	adds	r4, #1
1a004ad4:	f855 3b04 	ldr.w	r3, [r5], #4
1a004ad8:	4798      	blx	r3
1a004ada:	42a6      	cmp	r6, r4
1a004adc:	d1f9      	bne.n	1a004ad2 <__libc_init_array+0x2e>
1a004ade:	bd70      	pop	{r4, r5, r6, pc}
1a004ae0:	bd70      	pop	{r4, r5, r6, pc}
1a004ae2:	bf00      	nop
1a004ae4:	1a00a478 	.word	0x1a00a478
1a004ae8:	1a00a478 	.word	0x1a00a478
1a004aec:	1a00a47c 	.word	0x1a00a47c
1a004af0:	1a00a478 	.word	0x1a00a478

1a004af4 <_malloc_r>:
1a004af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004af8:	f101 060b 	add.w	r6, r1, #11
1a004afc:	2e16      	cmp	r6, #22
1a004afe:	b083      	sub	sp, #12
1a004b00:	4605      	mov	r5, r0
1a004b02:	f240 809e 	bls.w	1a004c42 <_malloc_r+0x14e>
1a004b06:	f036 0607 	bics.w	r6, r6, #7
1a004b0a:	f100 80bd 	bmi.w	1a004c88 <_malloc_r+0x194>
1a004b0e:	42b1      	cmp	r1, r6
1a004b10:	f200 80ba 	bhi.w	1a004c88 <_malloc_r+0x194>
1a004b14:	f000 fb80 	bl	1a005218 <__malloc_lock>
1a004b18:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
1a004b1c:	f0c0 828f 	bcc.w	1a00503e <_malloc_r+0x54a>
1a004b20:	0a73      	lsrs	r3, r6, #9
1a004b22:	f000 80b8 	beq.w	1a004c96 <_malloc_r+0x1a2>
1a004b26:	2b04      	cmp	r3, #4
1a004b28:	f200 817d 	bhi.w	1a004e26 <_malloc_r+0x332>
1a004b2c:	09b3      	lsrs	r3, r6, #6
1a004b2e:	f103 0039 	add.w	r0, r3, #57	; 0x39
1a004b32:	f103 0e38 	add.w	lr, r3, #56	; 0x38
1a004b36:	00c3      	lsls	r3, r0, #3
1a004b38:	4fc1      	ldr	r7, [pc, #772]	; (1a004e40 <_malloc_r+0x34c>)
1a004b3a:	443b      	add	r3, r7
1a004b3c:	f1a3 0108 	sub.w	r1, r3, #8
1a004b40:	685c      	ldr	r4, [r3, #4]
1a004b42:	42a1      	cmp	r1, r4
1a004b44:	d106      	bne.n	1a004b54 <_malloc_r+0x60>
1a004b46:	e00c      	b.n	1a004b62 <_malloc_r+0x6e>
1a004b48:	2a00      	cmp	r2, #0
1a004b4a:	f280 80aa 	bge.w	1a004ca2 <_malloc_r+0x1ae>
1a004b4e:	68e4      	ldr	r4, [r4, #12]
1a004b50:	42a1      	cmp	r1, r4
1a004b52:	d006      	beq.n	1a004b62 <_malloc_r+0x6e>
1a004b54:	6863      	ldr	r3, [r4, #4]
1a004b56:	f023 0303 	bic.w	r3, r3, #3
1a004b5a:	1b9a      	subs	r2, r3, r6
1a004b5c:	2a0f      	cmp	r2, #15
1a004b5e:	ddf3      	ble.n	1a004b48 <_malloc_r+0x54>
1a004b60:	4670      	mov	r0, lr
1a004b62:	693c      	ldr	r4, [r7, #16]
1a004b64:	f8df e2dc 	ldr.w	lr, [pc, #732]	; 1a004e44 <_malloc_r+0x350>
1a004b68:	4574      	cmp	r4, lr
1a004b6a:	f000 81a7 	beq.w	1a004ebc <_malloc_r+0x3c8>
1a004b6e:	6863      	ldr	r3, [r4, #4]
1a004b70:	f023 0303 	bic.w	r3, r3, #3
1a004b74:	1b9a      	subs	r2, r3, r6
1a004b76:	2a0f      	cmp	r2, #15
1a004b78:	f300 818c 	bgt.w	1a004e94 <_malloc_r+0x3a0>
1a004b7c:	2a00      	cmp	r2, #0
1a004b7e:	f8c7 e014 	str.w	lr, [r7, #20]
1a004b82:	f8c7 e010 	str.w	lr, [r7, #16]
1a004b86:	f280 809d 	bge.w	1a004cc4 <_malloc_r+0x1d0>
1a004b8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a004b8e:	f080 815d 	bcs.w	1a004e4c <_malloc_r+0x358>
1a004b92:	08db      	lsrs	r3, r3, #3
1a004b94:	f103 0c01 	add.w	ip, r3, #1
1a004b98:	1099      	asrs	r1, r3, #2
1a004b9a:	687a      	ldr	r2, [r7, #4]
1a004b9c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
1a004ba0:	f8c4 8008 	str.w	r8, [r4, #8]
1a004ba4:	2301      	movs	r3, #1
1a004ba6:	408b      	lsls	r3, r1
1a004ba8:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
1a004bac:	4313      	orrs	r3, r2
1a004bae:	3908      	subs	r1, #8
1a004bb0:	60e1      	str	r1, [r4, #12]
1a004bb2:	607b      	str	r3, [r7, #4]
1a004bb4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
1a004bb8:	f8c8 400c 	str.w	r4, [r8, #12]
1a004bbc:	1082      	asrs	r2, r0, #2
1a004bbe:	2401      	movs	r4, #1
1a004bc0:	4094      	lsls	r4, r2
1a004bc2:	429c      	cmp	r4, r3
1a004bc4:	f200 808b 	bhi.w	1a004cde <_malloc_r+0x1ea>
1a004bc8:	421c      	tst	r4, r3
1a004bca:	d106      	bne.n	1a004bda <_malloc_r+0xe6>
1a004bcc:	f020 0003 	bic.w	r0, r0, #3
1a004bd0:	0064      	lsls	r4, r4, #1
1a004bd2:	421c      	tst	r4, r3
1a004bd4:	f100 0004 	add.w	r0, r0, #4
1a004bd8:	d0fa      	beq.n	1a004bd0 <_malloc_r+0xdc>
1a004bda:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
1a004bde:	46cc      	mov	ip, r9
1a004be0:	4680      	mov	r8, r0
1a004be2:	f8dc 300c 	ldr.w	r3, [ip, #12]
1a004be6:	459c      	cmp	ip, r3
1a004be8:	d107      	bne.n	1a004bfa <_malloc_r+0x106>
1a004bea:	e169      	b.n	1a004ec0 <_malloc_r+0x3cc>
1a004bec:	2a00      	cmp	r2, #0
1a004bee:	f280 8177 	bge.w	1a004ee0 <_malloc_r+0x3ec>
1a004bf2:	68db      	ldr	r3, [r3, #12]
1a004bf4:	459c      	cmp	ip, r3
1a004bf6:	f000 8163 	beq.w	1a004ec0 <_malloc_r+0x3cc>
1a004bfa:	6859      	ldr	r1, [r3, #4]
1a004bfc:	f021 0103 	bic.w	r1, r1, #3
1a004c00:	1b8a      	subs	r2, r1, r6
1a004c02:	2a0f      	cmp	r2, #15
1a004c04:	ddf2      	ble.n	1a004bec <_malloc_r+0xf8>
1a004c06:	f8d3 c00c 	ldr.w	ip, [r3, #12]
1a004c0a:	f8d3 8008 	ldr.w	r8, [r3, #8]
1a004c0e:	9301      	str	r3, [sp, #4]
1a004c10:	199c      	adds	r4, r3, r6
1a004c12:	4628      	mov	r0, r5
1a004c14:	f046 0601 	orr.w	r6, r6, #1
1a004c18:	f042 0501 	orr.w	r5, r2, #1
1a004c1c:	605e      	str	r6, [r3, #4]
1a004c1e:	f8c8 c00c 	str.w	ip, [r8, #12]
1a004c22:	f8cc 8008 	str.w	r8, [ip, #8]
1a004c26:	617c      	str	r4, [r7, #20]
1a004c28:	613c      	str	r4, [r7, #16]
1a004c2a:	f8c4 e00c 	str.w	lr, [r4, #12]
1a004c2e:	f8c4 e008 	str.w	lr, [r4, #8]
1a004c32:	6065      	str	r5, [r4, #4]
1a004c34:	505a      	str	r2, [r3, r1]
1a004c36:	f000 faf1 	bl	1a00521c <__malloc_unlock>
1a004c3a:	9b01      	ldr	r3, [sp, #4]
1a004c3c:	f103 0408 	add.w	r4, r3, #8
1a004c40:	e01e      	b.n	1a004c80 <_malloc_r+0x18c>
1a004c42:	2910      	cmp	r1, #16
1a004c44:	d820      	bhi.n	1a004c88 <_malloc_r+0x194>
1a004c46:	f000 fae7 	bl	1a005218 <__malloc_lock>
1a004c4a:	2610      	movs	r6, #16
1a004c4c:	2318      	movs	r3, #24
1a004c4e:	2002      	movs	r0, #2
1a004c50:	4f7b      	ldr	r7, [pc, #492]	; (1a004e40 <_malloc_r+0x34c>)
1a004c52:	443b      	add	r3, r7
1a004c54:	f1a3 0208 	sub.w	r2, r3, #8
1a004c58:	685c      	ldr	r4, [r3, #4]
1a004c5a:	4294      	cmp	r4, r2
1a004c5c:	f000 8139 	beq.w	1a004ed2 <_malloc_r+0x3de>
1a004c60:	6863      	ldr	r3, [r4, #4]
1a004c62:	68e1      	ldr	r1, [r4, #12]
1a004c64:	68a6      	ldr	r6, [r4, #8]
1a004c66:	f023 0303 	bic.w	r3, r3, #3
1a004c6a:	4423      	add	r3, r4
1a004c6c:	4628      	mov	r0, r5
1a004c6e:	685a      	ldr	r2, [r3, #4]
1a004c70:	60f1      	str	r1, [r6, #12]
1a004c72:	f042 0201 	orr.w	r2, r2, #1
1a004c76:	608e      	str	r6, [r1, #8]
1a004c78:	605a      	str	r2, [r3, #4]
1a004c7a:	f000 facf 	bl	1a00521c <__malloc_unlock>
1a004c7e:	3408      	adds	r4, #8
1a004c80:	4620      	mov	r0, r4
1a004c82:	b003      	add	sp, #12
1a004c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004c88:	2400      	movs	r4, #0
1a004c8a:	230c      	movs	r3, #12
1a004c8c:	4620      	mov	r0, r4
1a004c8e:	602b      	str	r3, [r5, #0]
1a004c90:	b003      	add	sp, #12
1a004c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004c96:	2040      	movs	r0, #64	; 0x40
1a004c98:	f44f 7300 	mov.w	r3, #512	; 0x200
1a004c9c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
1a004ca0:	e74a      	b.n	1a004b38 <_malloc_r+0x44>
1a004ca2:	4423      	add	r3, r4
1a004ca4:	68e1      	ldr	r1, [r4, #12]
1a004ca6:	685a      	ldr	r2, [r3, #4]
1a004ca8:	68a6      	ldr	r6, [r4, #8]
1a004caa:	f042 0201 	orr.w	r2, r2, #1
1a004cae:	60f1      	str	r1, [r6, #12]
1a004cb0:	4628      	mov	r0, r5
1a004cb2:	608e      	str	r6, [r1, #8]
1a004cb4:	605a      	str	r2, [r3, #4]
1a004cb6:	f000 fab1 	bl	1a00521c <__malloc_unlock>
1a004cba:	3408      	adds	r4, #8
1a004cbc:	4620      	mov	r0, r4
1a004cbe:	b003      	add	sp, #12
1a004cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004cc4:	4423      	add	r3, r4
1a004cc6:	4628      	mov	r0, r5
1a004cc8:	685a      	ldr	r2, [r3, #4]
1a004cca:	f042 0201 	orr.w	r2, r2, #1
1a004cce:	605a      	str	r2, [r3, #4]
1a004cd0:	f000 faa4 	bl	1a00521c <__malloc_unlock>
1a004cd4:	3408      	adds	r4, #8
1a004cd6:	4620      	mov	r0, r4
1a004cd8:	b003      	add	sp, #12
1a004cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004cde:	68bc      	ldr	r4, [r7, #8]
1a004ce0:	6863      	ldr	r3, [r4, #4]
1a004ce2:	f023 0903 	bic.w	r9, r3, #3
1a004ce6:	45b1      	cmp	r9, r6
1a004ce8:	d304      	bcc.n	1a004cf4 <_malloc_r+0x200>
1a004cea:	eba9 0306 	sub.w	r3, r9, r6
1a004cee:	2b0f      	cmp	r3, #15
1a004cf0:	f300 8089 	bgt.w	1a004e06 <_malloc_r+0x312>
1a004cf4:	f8df a150 	ldr.w	sl, [pc, #336]	; 1a004e48 <_malloc_r+0x354>
1a004cf8:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
1a004cfc:	f8da 3000 	ldr.w	r3, [sl]
1a004d00:	3201      	adds	r2, #1
1a004d02:	eb04 0b09 	add.w	fp, r4, r9
1a004d06:	eb06 0803 	add.w	r8, r6, r3
1a004d0a:	f000 8150 	beq.w	1a004fae <_malloc_r+0x4ba>
1a004d0e:	f508 5880 	add.w	r8, r8, #4096	; 0x1000
1a004d12:	f108 080f 	add.w	r8, r8, #15
1a004d16:	f428 687f 	bic.w	r8, r8, #4080	; 0xff0
1a004d1a:	f028 080f 	bic.w	r8, r8, #15
1a004d1e:	4641      	mov	r1, r8
1a004d20:	4628      	mov	r0, r5
1a004d22:	f7fb fc97 	bl	1a000654 <_sbrk_r>
1a004d26:	1c42      	adds	r2, r0, #1
1a004d28:	4603      	mov	r3, r0
1a004d2a:	f000 80f6 	beq.w	1a004f1a <_malloc_r+0x426>
1a004d2e:	4583      	cmp	fp, r0
1a004d30:	f200 80f1 	bhi.w	1a004f16 <_malloc_r+0x422>
1a004d34:	f8da 2004 	ldr.w	r2, [sl, #4]
1a004d38:	4442      	add	r2, r8
1a004d3a:	f8ca 2004 	str.w	r2, [sl, #4]
1a004d3e:	f000 8147 	beq.w	1a004fd0 <_malloc_r+0x4dc>
1a004d42:	f8d7 1408 	ldr.w	r1, [r7, #1032]	; 0x408
1a004d46:	3101      	adds	r1, #1
1a004d48:	bf1b      	ittet	ne
1a004d4a:	eba3 0b0b 	subne.w	fp, r3, fp
1a004d4e:	445a      	addne	r2, fp
1a004d50:	f8c7 3408 	streq.w	r3, [r7, #1032]	; 0x408
1a004d54:	f8ca 2004 	strne.w	r2, [sl, #4]
1a004d58:	f013 0207 	ands.w	r2, r3, #7
1a004d5c:	f000 810d 	beq.w	1a004f7a <_malloc_r+0x486>
1a004d60:	f1c2 0108 	rsb	r1, r2, #8
1a004d64:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
1a004d68:	440b      	add	r3, r1
1a004d6a:	3208      	adds	r2, #8
1a004d6c:	4498      	add	r8, r3
1a004d6e:	f3c8 080b 	ubfx	r8, r8, #0, #12
1a004d72:	eba2 0808 	sub.w	r8, r2, r8
1a004d76:	4641      	mov	r1, r8
1a004d78:	4628      	mov	r0, r5
1a004d7a:	9301      	str	r3, [sp, #4]
1a004d7c:	f7fb fc6a 	bl	1a000654 <_sbrk_r>
1a004d80:	1c43      	adds	r3, r0, #1
1a004d82:	9b01      	ldr	r3, [sp, #4]
1a004d84:	f000 813e 	beq.w	1a005004 <_malloc_r+0x510>
1a004d88:	1ac1      	subs	r1, r0, r3
1a004d8a:	4441      	add	r1, r8
1a004d8c:	f041 0101 	orr.w	r1, r1, #1
1a004d90:	f8da 2004 	ldr.w	r2, [sl, #4]
1a004d94:	60bb      	str	r3, [r7, #8]
1a004d96:	4442      	add	r2, r8
1a004d98:	42bc      	cmp	r4, r7
1a004d9a:	6059      	str	r1, [r3, #4]
1a004d9c:	f8ca 2004 	str.w	r2, [sl, #4]
1a004da0:	d016      	beq.n	1a004dd0 <_malloc_r+0x2dc>
1a004da2:	f1b9 0f0f 	cmp.w	r9, #15
1a004da6:	f240 80f4 	bls.w	1a004f92 <_malloc_r+0x49e>
1a004daa:	6861      	ldr	r1, [r4, #4]
1a004dac:	f1a9 030c 	sub.w	r3, r9, #12
1a004db0:	f023 0307 	bic.w	r3, r3, #7
1a004db4:	18e0      	adds	r0, r4, r3
1a004db6:	f001 0101 	and.w	r1, r1, #1
1a004dba:	f04f 0e05 	mov.w	lr, #5
1a004dbe:	4319      	orrs	r1, r3
1a004dc0:	2b0f      	cmp	r3, #15
1a004dc2:	6061      	str	r1, [r4, #4]
1a004dc4:	f8c0 e004 	str.w	lr, [r0, #4]
1a004dc8:	f8c0 e008 	str.w	lr, [r0, #8]
1a004dcc:	f200 8112 	bhi.w	1a004ff4 <_malloc_r+0x500>
1a004dd0:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
1a004dd4:	68bc      	ldr	r4, [r7, #8]
1a004dd6:	429a      	cmp	r2, r3
1a004dd8:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
1a004ddc:	bf88      	it	hi
1a004dde:	f8ca 202c 	strhi.w	r2, [sl, #44]	; 0x2c
1a004de2:	429a      	cmp	r2, r3
1a004de4:	bf88      	it	hi
1a004de6:	f8ca 2030 	strhi.w	r2, [sl, #48]	; 0x30
1a004dea:	6862      	ldr	r2, [r4, #4]
1a004dec:	f022 0203 	bic.w	r2, r2, #3
1a004df0:	4296      	cmp	r6, r2
1a004df2:	eba2 0306 	sub.w	r3, r2, r6
1a004df6:	d801      	bhi.n	1a004dfc <_malloc_r+0x308>
1a004df8:	2b0f      	cmp	r3, #15
1a004dfa:	dc04      	bgt.n	1a004e06 <_malloc_r+0x312>
1a004dfc:	4628      	mov	r0, r5
1a004dfe:	f000 fa0d 	bl	1a00521c <__malloc_unlock>
1a004e02:	2400      	movs	r4, #0
1a004e04:	e73c      	b.n	1a004c80 <_malloc_r+0x18c>
1a004e06:	19a2      	adds	r2, r4, r6
1a004e08:	f043 0301 	orr.w	r3, r3, #1
1a004e0c:	f046 0601 	orr.w	r6, r6, #1
1a004e10:	6066      	str	r6, [r4, #4]
1a004e12:	4628      	mov	r0, r5
1a004e14:	60ba      	str	r2, [r7, #8]
1a004e16:	6053      	str	r3, [r2, #4]
1a004e18:	f000 fa00 	bl	1a00521c <__malloc_unlock>
1a004e1c:	3408      	adds	r4, #8
1a004e1e:	4620      	mov	r0, r4
1a004e20:	b003      	add	sp, #12
1a004e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004e26:	2b14      	cmp	r3, #20
1a004e28:	d969      	bls.n	1a004efe <_malloc_r+0x40a>
1a004e2a:	2b54      	cmp	r3, #84	; 0x54
1a004e2c:	f200 809b 	bhi.w	1a004f66 <_malloc_r+0x472>
1a004e30:	0b33      	lsrs	r3, r6, #12
1a004e32:	f103 006f 	add.w	r0, r3, #111	; 0x6f
1a004e36:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
1a004e3a:	00c3      	lsls	r3, r0, #3
1a004e3c:	e67c      	b.n	1a004b38 <_malloc_r+0x44>
1a004e3e:	bf00      	nop
1a004e40:	10000470 	.word	0x10000470
1a004e44:	10000478 	.word	0x10000478
1a004e48:	10003350 	.word	0x10003350
1a004e4c:	0a5a      	lsrs	r2, r3, #9
1a004e4e:	2a04      	cmp	r2, #4
1a004e50:	d95b      	bls.n	1a004f0a <_malloc_r+0x416>
1a004e52:	2a14      	cmp	r2, #20
1a004e54:	f200 80ae 	bhi.w	1a004fb4 <_malloc_r+0x4c0>
1a004e58:	f102 015c 	add.w	r1, r2, #92	; 0x5c
1a004e5c:	00c9      	lsls	r1, r1, #3
1a004e5e:	325b      	adds	r2, #91	; 0x5b
1a004e60:	eb07 0c01 	add.w	ip, r7, r1
1a004e64:	5879      	ldr	r1, [r7, r1]
1a004e66:	f1ac 0c08 	sub.w	ip, ip, #8
1a004e6a:	458c      	cmp	ip, r1
1a004e6c:	f000 8088 	beq.w	1a004f80 <_malloc_r+0x48c>
1a004e70:	684a      	ldr	r2, [r1, #4]
1a004e72:	f022 0203 	bic.w	r2, r2, #3
1a004e76:	4293      	cmp	r3, r2
1a004e78:	d273      	bcs.n	1a004f62 <_malloc_r+0x46e>
1a004e7a:	6889      	ldr	r1, [r1, #8]
1a004e7c:	458c      	cmp	ip, r1
1a004e7e:	d1f7      	bne.n	1a004e70 <_malloc_r+0x37c>
1a004e80:	f8dc 200c 	ldr.w	r2, [ip, #12]
1a004e84:	687b      	ldr	r3, [r7, #4]
1a004e86:	60e2      	str	r2, [r4, #12]
1a004e88:	f8c4 c008 	str.w	ip, [r4, #8]
1a004e8c:	6094      	str	r4, [r2, #8]
1a004e8e:	f8cc 400c 	str.w	r4, [ip, #12]
1a004e92:	e693      	b.n	1a004bbc <_malloc_r+0xc8>
1a004e94:	19a1      	adds	r1, r4, r6
1a004e96:	f046 0c01 	orr.w	ip, r6, #1
1a004e9a:	f042 0601 	orr.w	r6, r2, #1
1a004e9e:	f8c4 c004 	str.w	ip, [r4, #4]
1a004ea2:	4628      	mov	r0, r5
1a004ea4:	6179      	str	r1, [r7, #20]
1a004ea6:	6139      	str	r1, [r7, #16]
1a004ea8:	f8c1 e00c 	str.w	lr, [r1, #12]
1a004eac:	f8c1 e008 	str.w	lr, [r1, #8]
1a004eb0:	604e      	str	r6, [r1, #4]
1a004eb2:	50e2      	str	r2, [r4, r3]
1a004eb4:	f000 f9b2 	bl	1a00521c <__malloc_unlock>
1a004eb8:	3408      	adds	r4, #8
1a004eba:	e6e1      	b.n	1a004c80 <_malloc_r+0x18c>
1a004ebc:	687b      	ldr	r3, [r7, #4]
1a004ebe:	e67d      	b.n	1a004bbc <_malloc_r+0xc8>
1a004ec0:	f108 0801 	add.w	r8, r8, #1
1a004ec4:	f018 0f03 	tst.w	r8, #3
1a004ec8:	f10c 0c08 	add.w	ip, ip, #8
1a004ecc:	f47f ae89 	bne.w	1a004be2 <_malloc_r+0xee>
1a004ed0:	e02d      	b.n	1a004f2e <_malloc_r+0x43a>
1a004ed2:	68dc      	ldr	r4, [r3, #12]
1a004ed4:	42a3      	cmp	r3, r4
1a004ed6:	bf08      	it	eq
1a004ed8:	3002      	addeq	r0, #2
1a004eda:	f43f ae42 	beq.w	1a004b62 <_malloc_r+0x6e>
1a004ede:	e6bf      	b.n	1a004c60 <_malloc_r+0x16c>
1a004ee0:	4419      	add	r1, r3
1a004ee2:	461c      	mov	r4, r3
1a004ee4:	684a      	ldr	r2, [r1, #4]
1a004ee6:	68db      	ldr	r3, [r3, #12]
1a004ee8:	f854 6f08 	ldr.w	r6, [r4, #8]!
1a004eec:	f042 0201 	orr.w	r2, r2, #1
1a004ef0:	604a      	str	r2, [r1, #4]
1a004ef2:	4628      	mov	r0, r5
1a004ef4:	60f3      	str	r3, [r6, #12]
1a004ef6:	609e      	str	r6, [r3, #8]
1a004ef8:	f000 f990 	bl	1a00521c <__malloc_unlock>
1a004efc:	e6c0      	b.n	1a004c80 <_malloc_r+0x18c>
1a004efe:	f103 005c 	add.w	r0, r3, #92	; 0x5c
1a004f02:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
1a004f06:	00c3      	lsls	r3, r0, #3
1a004f08:	e616      	b.n	1a004b38 <_malloc_r+0x44>
1a004f0a:	099a      	lsrs	r2, r3, #6
1a004f0c:	f102 0139 	add.w	r1, r2, #57	; 0x39
1a004f10:	00c9      	lsls	r1, r1, #3
1a004f12:	3238      	adds	r2, #56	; 0x38
1a004f14:	e7a4      	b.n	1a004e60 <_malloc_r+0x36c>
1a004f16:	42bc      	cmp	r4, r7
1a004f18:	d054      	beq.n	1a004fc4 <_malloc_r+0x4d0>
1a004f1a:	68bc      	ldr	r4, [r7, #8]
1a004f1c:	6862      	ldr	r2, [r4, #4]
1a004f1e:	f022 0203 	bic.w	r2, r2, #3
1a004f22:	e765      	b.n	1a004df0 <_malloc_r+0x2fc>
1a004f24:	f859 3908 	ldr.w	r3, [r9], #-8
1a004f28:	4599      	cmp	r9, r3
1a004f2a:	f040 8086 	bne.w	1a00503a <_malloc_r+0x546>
1a004f2e:	f010 0f03 	tst.w	r0, #3
1a004f32:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
1a004f36:	d1f5      	bne.n	1a004f24 <_malloc_r+0x430>
1a004f38:	687b      	ldr	r3, [r7, #4]
1a004f3a:	ea23 0304 	bic.w	r3, r3, r4
1a004f3e:	607b      	str	r3, [r7, #4]
1a004f40:	0064      	lsls	r4, r4, #1
1a004f42:	429c      	cmp	r4, r3
1a004f44:	f63f aecb 	bhi.w	1a004cde <_malloc_r+0x1ea>
1a004f48:	2c00      	cmp	r4, #0
1a004f4a:	f43f aec8 	beq.w	1a004cde <_malloc_r+0x1ea>
1a004f4e:	421c      	tst	r4, r3
1a004f50:	4640      	mov	r0, r8
1a004f52:	f47f ae42 	bne.w	1a004bda <_malloc_r+0xe6>
1a004f56:	0064      	lsls	r4, r4, #1
1a004f58:	421c      	tst	r4, r3
1a004f5a:	f100 0004 	add.w	r0, r0, #4
1a004f5e:	d0fa      	beq.n	1a004f56 <_malloc_r+0x462>
1a004f60:	e63b      	b.n	1a004bda <_malloc_r+0xe6>
1a004f62:	468c      	mov	ip, r1
1a004f64:	e78c      	b.n	1a004e80 <_malloc_r+0x38c>
1a004f66:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
1a004f6a:	d815      	bhi.n	1a004f98 <_malloc_r+0x4a4>
1a004f6c:	0bf3      	lsrs	r3, r6, #15
1a004f6e:	f103 0078 	add.w	r0, r3, #120	; 0x78
1a004f72:	f103 0e77 	add.w	lr, r3, #119	; 0x77
1a004f76:	00c3      	lsls	r3, r0, #3
1a004f78:	e5de      	b.n	1a004b38 <_malloc_r+0x44>
1a004f7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
1a004f7e:	e6f5      	b.n	1a004d6c <_malloc_r+0x278>
1a004f80:	687b      	ldr	r3, [r7, #4]
1a004f82:	1092      	asrs	r2, r2, #2
1a004f84:	2101      	movs	r1, #1
1a004f86:	fa01 f202 	lsl.w	r2, r1, r2
1a004f8a:	4313      	orrs	r3, r2
1a004f8c:	607b      	str	r3, [r7, #4]
1a004f8e:	4662      	mov	r2, ip
1a004f90:	e779      	b.n	1a004e86 <_malloc_r+0x392>
1a004f92:	2201      	movs	r2, #1
1a004f94:	605a      	str	r2, [r3, #4]
1a004f96:	e731      	b.n	1a004dfc <_malloc_r+0x308>
1a004f98:	f240 5254 	movw	r2, #1364	; 0x554
1a004f9c:	4293      	cmp	r3, r2
1a004f9e:	d823      	bhi.n	1a004fe8 <_malloc_r+0x4f4>
1a004fa0:	0cb3      	lsrs	r3, r6, #18
1a004fa2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
1a004fa6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
1a004faa:	00c3      	lsls	r3, r0, #3
1a004fac:	e5c4      	b.n	1a004b38 <_malloc_r+0x44>
1a004fae:	f108 0810 	add.w	r8, r8, #16
1a004fb2:	e6b4      	b.n	1a004d1e <_malloc_r+0x22a>
1a004fb4:	2a54      	cmp	r2, #84	; 0x54
1a004fb6:	d829      	bhi.n	1a00500c <_malloc_r+0x518>
1a004fb8:	0b1a      	lsrs	r2, r3, #12
1a004fba:	f102 016f 	add.w	r1, r2, #111	; 0x6f
1a004fbe:	00c9      	lsls	r1, r1, #3
1a004fc0:	326e      	adds	r2, #110	; 0x6e
1a004fc2:	e74d      	b.n	1a004e60 <_malloc_r+0x36c>
1a004fc4:	f8da 2004 	ldr.w	r2, [sl, #4]
1a004fc8:	4442      	add	r2, r8
1a004fca:	f8ca 2004 	str.w	r2, [sl, #4]
1a004fce:	e6b8      	b.n	1a004d42 <_malloc_r+0x24e>
1a004fd0:	f3cb 010b 	ubfx	r1, fp, #0, #12
1a004fd4:	2900      	cmp	r1, #0
1a004fd6:	f47f aeb4 	bne.w	1a004d42 <_malloc_r+0x24e>
1a004fda:	eb09 0308 	add.w	r3, r9, r8
1a004fde:	68b9      	ldr	r1, [r7, #8]
1a004fe0:	f043 0301 	orr.w	r3, r3, #1
1a004fe4:	604b      	str	r3, [r1, #4]
1a004fe6:	e6f3      	b.n	1a004dd0 <_malloc_r+0x2dc>
1a004fe8:	207f      	movs	r0, #127	; 0x7f
1a004fea:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
1a004fee:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
1a004ff2:	e5a1      	b.n	1a004b38 <_malloc_r+0x44>
1a004ff4:	f104 0108 	add.w	r1, r4, #8
1a004ff8:	4628      	mov	r0, r5
1a004ffa:	f7ff fc1d 	bl	1a004838 <_free_r>
1a004ffe:	f8da 2004 	ldr.w	r2, [sl, #4]
1a005002:	e6e5      	b.n	1a004dd0 <_malloc_r+0x2dc>
1a005004:	2101      	movs	r1, #1
1a005006:	f04f 0800 	mov.w	r8, #0
1a00500a:	e6c1      	b.n	1a004d90 <_malloc_r+0x29c>
1a00500c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a005010:	d805      	bhi.n	1a00501e <_malloc_r+0x52a>
1a005012:	0bda      	lsrs	r2, r3, #15
1a005014:	f102 0178 	add.w	r1, r2, #120	; 0x78
1a005018:	00c9      	lsls	r1, r1, #3
1a00501a:	3277      	adds	r2, #119	; 0x77
1a00501c:	e720      	b.n	1a004e60 <_malloc_r+0x36c>
1a00501e:	f240 5154 	movw	r1, #1364	; 0x554
1a005022:	428a      	cmp	r2, r1
1a005024:	d805      	bhi.n	1a005032 <_malloc_r+0x53e>
1a005026:	0c9a      	lsrs	r2, r3, #18
1a005028:	f102 017d 	add.w	r1, r2, #125	; 0x7d
1a00502c:	00c9      	lsls	r1, r1, #3
1a00502e:	327c      	adds	r2, #124	; 0x7c
1a005030:	e716      	b.n	1a004e60 <_malloc_r+0x36c>
1a005032:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
1a005036:	227e      	movs	r2, #126	; 0x7e
1a005038:	e712      	b.n	1a004e60 <_malloc_r+0x36c>
1a00503a:	687b      	ldr	r3, [r7, #4]
1a00503c:	e780      	b.n	1a004f40 <_malloc_r+0x44c>
1a00503e:	08f0      	lsrs	r0, r6, #3
1a005040:	f106 0308 	add.w	r3, r6, #8
1a005044:	e604      	b.n	1a004c50 <_malloc_r+0x15c>
1a005046:	bf00      	nop

1a005048 <memcpy>:
1a005048:	4684      	mov	ip, r0
1a00504a:	ea41 0300 	orr.w	r3, r1, r0
1a00504e:	f013 0303 	ands.w	r3, r3, #3
1a005052:	d16d      	bne.n	1a005130 <memcpy+0xe8>
1a005054:	3a40      	subs	r2, #64	; 0x40
1a005056:	d341      	bcc.n	1a0050dc <memcpy+0x94>
1a005058:	f851 3b04 	ldr.w	r3, [r1], #4
1a00505c:	f840 3b04 	str.w	r3, [r0], #4
1a005060:	f851 3b04 	ldr.w	r3, [r1], #4
1a005064:	f840 3b04 	str.w	r3, [r0], #4
1a005068:	f851 3b04 	ldr.w	r3, [r1], #4
1a00506c:	f840 3b04 	str.w	r3, [r0], #4
1a005070:	f851 3b04 	ldr.w	r3, [r1], #4
1a005074:	f840 3b04 	str.w	r3, [r0], #4
1a005078:	f851 3b04 	ldr.w	r3, [r1], #4
1a00507c:	f840 3b04 	str.w	r3, [r0], #4
1a005080:	f851 3b04 	ldr.w	r3, [r1], #4
1a005084:	f840 3b04 	str.w	r3, [r0], #4
1a005088:	f851 3b04 	ldr.w	r3, [r1], #4
1a00508c:	f840 3b04 	str.w	r3, [r0], #4
1a005090:	f851 3b04 	ldr.w	r3, [r1], #4
1a005094:	f840 3b04 	str.w	r3, [r0], #4
1a005098:	f851 3b04 	ldr.w	r3, [r1], #4
1a00509c:	f840 3b04 	str.w	r3, [r0], #4
1a0050a0:	f851 3b04 	ldr.w	r3, [r1], #4
1a0050a4:	f840 3b04 	str.w	r3, [r0], #4
1a0050a8:	f851 3b04 	ldr.w	r3, [r1], #4
1a0050ac:	f840 3b04 	str.w	r3, [r0], #4
1a0050b0:	f851 3b04 	ldr.w	r3, [r1], #4
1a0050b4:	f840 3b04 	str.w	r3, [r0], #4
1a0050b8:	f851 3b04 	ldr.w	r3, [r1], #4
1a0050bc:	f840 3b04 	str.w	r3, [r0], #4
1a0050c0:	f851 3b04 	ldr.w	r3, [r1], #4
1a0050c4:	f840 3b04 	str.w	r3, [r0], #4
1a0050c8:	f851 3b04 	ldr.w	r3, [r1], #4
1a0050cc:	f840 3b04 	str.w	r3, [r0], #4
1a0050d0:	f851 3b04 	ldr.w	r3, [r1], #4
1a0050d4:	f840 3b04 	str.w	r3, [r0], #4
1a0050d8:	3a40      	subs	r2, #64	; 0x40
1a0050da:	d2bd      	bcs.n	1a005058 <memcpy+0x10>
1a0050dc:	3230      	adds	r2, #48	; 0x30
1a0050de:	d311      	bcc.n	1a005104 <memcpy+0xbc>
1a0050e0:	f851 3b04 	ldr.w	r3, [r1], #4
1a0050e4:	f840 3b04 	str.w	r3, [r0], #4
1a0050e8:	f851 3b04 	ldr.w	r3, [r1], #4
1a0050ec:	f840 3b04 	str.w	r3, [r0], #4
1a0050f0:	f851 3b04 	ldr.w	r3, [r1], #4
1a0050f4:	f840 3b04 	str.w	r3, [r0], #4
1a0050f8:	f851 3b04 	ldr.w	r3, [r1], #4
1a0050fc:	f840 3b04 	str.w	r3, [r0], #4
1a005100:	3a10      	subs	r2, #16
1a005102:	d2ed      	bcs.n	1a0050e0 <memcpy+0x98>
1a005104:	320c      	adds	r2, #12
1a005106:	d305      	bcc.n	1a005114 <memcpy+0xcc>
1a005108:	f851 3b04 	ldr.w	r3, [r1], #4
1a00510c:	f840 3b04 	str.w	r3, [r0], #4
1a005110:	3a04      	subs	r2, #4
1a005112:	d2f9      	bcs.n	1a005108 <memcpy+0xc0>
1a005114:	3204      	adds	r2, #4
1a005116:	d008      	beq.n	1a00512a <memcpy+0xe2>
1a005118:	07d2      	lsls	r2, r2, #31
1a00511a:	bf1c      	itt	ne
1a00511c:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a005120:	f800 3b01 	strbne.w	r3, [r0], #1
1a005124:	d301      	bcc.n	1a00512a <memcpy+0xe2>
1a005126:	880b      	ldrh	r3, [r1, #0]
1a005128:	8003      	strh	r3, [r0, #0]
1a00512a:	4660      	mov	r0, ip
1a00512c:	4770      	bx	lr
1a00512e:	bf00      	nop
1a005130:	2a08      	cmp	r2, #8
1a005132:	d313      	bcc.n	1a00515c <memcpy+0x114>
1a005134:	078b      	lsls	r3, r1, #30
1a005136:	d08d      	beq.n	1a005054 <memcpy+0xc>
1a005138:	f010 0303 	ands.w	r3, r0, #3
1a00513c:	d08a      	beq.n	1a005054 <memcpy+0xc>
1a00513e:	f1c3 0304 	rsb	r3, r3, #4
1a005142:	1ad2      	subs	r2, r2, r3
1a005144:	07db      	lsls	r3, r3, #31
1a005146:	bf1c      	itt	ne
1a005148:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a00514c:	f800 3b01 	strbne.w	r3, [r0], #1
1a005150:	d380      	bcc.n	1a005054 <memcpy+0xc>
1a005152:	f831 3b02 	ldrh.w	r3, [r1], #2
1a005156:	f820 3b02 	strh.w	r3, [r0], #2
1a00515a:	e77b      	b.n	1a005054 <memcpy+0xc>
1a00515c:	3a04      	subs	r2, #4
1a00515e:	d3d9      	bcc.n	1a005114 <memcpy+0xcc>
1a005160:	3a01      	subs	r2, #1
1a005162:	f811 3b01 	ldrb.w	r3, [r1], #1
1a005166:	f800 3b01 	strb.w	r3, [r0], #1
1a00516a:	d2f9      	bcs.n	1a005160 <memcpy+0x118>
1a00516c:	780b      	ldrb	r3, [r1, #0]
1a00516e:	7003      	strb	r3, [r0, #0]
1a005170:	784b      	ldrb	r3, [r1, #1]
1a005172:	7043      	strb	r3, [r0, #1]
1a005174:	788b      	ldrb	r3, [r1, #2]
1a005176:	7083      	strb	r3, [r0, #2]
1a005178:	4660      	mov	r0, ip
1a00517a:	4770      	bx	lr

1a00517c <memset>:
1a00517c:	b470      	push	{r4, r5, r6}
1a00517e:	0786      	lsls	r6, r0, #30
1a005180:	d046      	beq.n	1a005210 <memset+0x94>
1a005182:	1e54      	subs	r4, r2, #1
1a005184:	2a00      	cmp	r2, #0
1a005186:	d041      	beq.n	1a00520c <memset+0x90>
1a005188:	b2ca      	uxtb	r2, r1
1a00518a:	4603      	mov	r3, r0
1a00518c:	e002      	b.n	1a005194 <memset+0x18>
1a00518e:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
1a005192:	d33b      	bcc.n	1a00520c <memset+0x90>
1a005194:	f803 2b01 	strb.w	r2, [r3], #1
1a005198:	079d      	lsls	r5, r3, #30
1a00519a:	d1f8      	bne.n	1a00518e <memset+0x12>
1a00519c:	2c03      	cmp	r4, #3
1a00519e:	d92e      	bls.n	1a0051fe <memset+0x82>
1a0051a0:	b2cd      	uxtb	r5, r1
1a0051a2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a0051a6:	2c0f      	cmp	r4, #15
1a0051a8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a0051ac:	d919      	bls.n	1a0051e2 <memset+0x66>
1a0051ae:	f103 0210 	add.w	r2, r3, #16
1a0051b2:	4626      	mov	r6, r4
1a0051b4:	3e10      	subs	r6, #16
1a0051b6:	2e0f      	cmp	r6, #15
1a0051b8:	f842 5c10 	str.w	r5, [r2, #-16]
1a0051bc:	f842 5c0c 	str.w	r5, [r2, #-12]
1a0051c0:	f842 5c08 	str.w	r5, [r2, #-8]
1a0051c4:	f842 5c04 	str.w	r5, [r2, #-4]
1a0051c8:	f102 0210 	add.w	r2, r2, #16
1a0051cc:	d8f2      	bhi.n	1a0051b4 <memset+0x38>
1a0051ce:	f1a4 0210 	sub.w	r2, r4, #16
1a0051d2:	f022 020f 	bic.w	r2, r2, #15
1a0051d6:	f004 040f 	and.w	r4, r4, #15
1a0051da:	3210      	adds	r2, #16
1a0051dc:	2c03      	cmp	r4, #3
1a0051de:	4413      	add	r3, r2
1a0051e0:	d90d      	bls.n	1a0051fe <memset+0x82>
1a0051e2:	461e      	mov	r6, r3
1a0051e4:	4622      	mov	r2, r4
1a0051e6:	3a04      	subs	r2, #4
1a0051e8:	2a03      	cmp	r2, #3
1a0051ea:	f846 5b04 	str.w	r5, [r6], #4
1a0051ee:	d8fa      	bhi.n	1a0051e6 <memset+0x6a>
1a0051f0:	1f22      	subs	r2, r4, #4
1a0051f2:	f022 0203 	bic.w	r2, r2, #3
1a0051f6:	3204      	adds	r2, #4
1a0051f8:	4413      	add	r3, r2
1a0051fa:	f004 0403 	and.w	r4, r4, #3
1a0051fe:	b12c      	cbz	r4, 1a00520c <memset+0x90>
1a005200:	b2c9      	uxtb	r1, r1
1a005202:	441c      	add	r4, r3
1a005204:	f803 1b01 	strb.w	r1, [r3], #1
1a005208:	429c      	cmp	r4, r3
1a00520a:	d1fb      	bne.n	1a005204 <memset+0x88>
1a00520c:	bc70      	pop	{r4, r5, r6}
1a00520e:	4770      	bx	lr
1a005210:	4614      	mov	r4, r2
1a005212:	4603      	mov	r3, r0
1a005214:	e7c2      	b.n	1a00519c <memset+0x20>
1a005216:	bf00      	nop

1a005218 <__malloc_lock>:
1a005218:	4770      	bx	lr
1a00521a:	bf00      	nop

1a00521c <__malloc_unlock>:
1a00521c:	4770      	bx	lr
1a00521e:	bf00      	nop

1a005220 <_printf_r>:
1a005220:	b40e      	push	{r1, r2, r3}
1a005222:	b500      	push	{lr}
1a005224:	b082      	sub	sp, #8
1a005226:	ab03      	add	r3, sp, #12
1a005228:	6881      	ldr	r1, [r0, #8]
1a00522a:	f853 2b04 	ldr.w	r2, [r3], #4
1a00522e:	9301      	str	r3, [sp, #4]
1a005230:	f000 f916 	bl	1a005460 <_vfprintf_r>
1a005234:	b002      	add	sp, #8
1a005236:	f85d eb04 	ldr.w	lr, [sp], #4
1a00523a:	b003      	add	sp, #12
1a00523c:	4770      	bx	lr
1a00523e:	bf00      	nop

1a005240 <printf>:
1a005240:	b40f      	push	{r0, r1, r2, r3}
1a005242:	b500      	push	{lr}
1a005244:	4907      	ldr	r1, [pc, #28]	; (1a005264 <printf+0x24>)
1a005246:	b083      	sub	sp, #12
1a005248:	ab04      	add	r3, sp, #16
1a00524a:	6808      	ldr	r0, [r1, #0]
1a00524c:	f853 2b04 	ldr.w	r2, [r3], #4
1a005250:	6881      	ldr	r1, [r0, #8]
1a005252:	9301      	str	r3, [sp, #4]
1a005254:	f000 f904 	bl	1a005460 <_vfprintf_r>
1a005258:	b003      	add	sp, #12
1a00525a:	f85d eb04 	ldr.w	lr, [sp], #4
1a00525e:	b004      	add	sp, #16
1a005260:	4770      	bx	lr
1a005262:	bf00      	nop
1a005264:	10000040 	.word	0x10000040

1a005268 <_puts_r>:
1a005268:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00526a:	4605      	mov	r5, r0
1a00526c:	b089      	sub	sp, #36	; 0x24
1a00526e:	4608      	mov	r0, r1
1a005270:	460c      	mov	r4, r1
1a005272:	f000 f885 	bl	1a005380 <strlen>
1a005276:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a005278:	4f14      	ldr	r7, [pc, #80]	; (1a0052cc <_puts_r+0x64>)
1a00527a:	9404      	str	r4, [sp, #16]
1a00527c:	2601      	movs	r6, #1
1a00527e:	1c44      	adds	r4, r0, #1
1a005280:	a904      	add	r1, sp, #16
1a005282:	2202      	movs	r2, #2
1a005284:	9403      	str	r4, [sp, #12]
1a005286:	9005      	str	r0, [sp, #20]
1a005288:	68ac      	ldr	r4, [r5, #8]
1a00528a:	9706      	str	r7, [sp, #24]
1a00528c:	9607      	str	r6, [sp, #28]
1a00528e:	9101      	str	r1, [sp, #4]
1a005290:	9202      	str	r2, [sp, #8]
1a005292:	b1b3      	cbz	r3, 1a0052c2 <_puts_r+0x5a>
1a005294:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a005298:	049a      	lsls	r2, r3, #18
1a00529a:	d406      	bmi.n	1a0052aa <_puts_r+0x42>
1a00529c:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a00529e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a0052a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
1a0052a6:	81a3      	strh	r3, [r4, #12]
1a0052a8:	6662      	str	r2, [r4, #100]	; 0x64
1a0052aa:	4621      	mov	r1, r4
1a0052ac:	4628      	mov	r0, r5
1a0052ae:	aa01      	add	r2, sp, #4
1a0052b0:	f002 fba8 	bl	1a007a04 <__sfvwrite_r>
1a0052b4:	2800      	cmp	r0, #0
1a0052b6:	bf14      	ite	ne
1a0052b8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a0052bc:	200a      	moveq	r0, #10
1a0052be:	b009      	add	sp, #36	; 0x24
1a0052c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0052c2:	4628      	mov	r0, r5
1a0052c4:	f7ff fa48 	bl	1a004758 <__sinit>
1a0052c8:	e7e4      	b.n	1a005294 <_puts_r+0x2c>
1a0052ca:	bf00      	nop
1a0052cc:	1a009f78 	.word	0x1a009f78

1a0052d0 <puts>:
1a0052d0:	4b02      	ldr	r3, [pc, #8]	; (1a0052dc <puts+0xc>)
1a0052d2:	4601      	mov	r1, r0
1a0052d4:	6818      	ldr	r0, [r3, #0]
1a0052d6:	f7ff bfc7 	b.w	1a005268 <_puts_r>
1a0052da:	bf00      	nop
1a0052dc:	10000040 	.word	0x10000040

1a0052e0 <__sread>:
1a0052e0:	b510      	push	{r4, lr}
1a0052e2:	460c      	mov	r4, r1
1a0052e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0052e8:	f7fb f978 	bl	1a0005dc <_read_r>
1a0052ec:	2800      	cmp	r0, #0
1a0052ee:	db03      	blt.n	1a0052f8 <__sread+0x18>
1a0052f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a0052f2:	4403      	add	r3, r0
1a0052f4:	6523      	str	r3, [r4, #80]	; 0x50
1a0052f6:	bd10      	pop	{r4, pc}
1a0052f8:	89a3      	ldrh	r3, [r4, #12]
1a0052fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a0052fe:	81a3      	strh	r3, [r4, #12]
1a005300:	bd10      	pop	{r4, pc}
1a005302:	bf00      	nop

1a005304 <__seofread>:
1a005304:	2000      	movs	r0, #0
1a005306:	4770      	bx	lr

1a005308 <__swrite>:
1a005308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00530c:	4616      	mov	r6, r2
1a00530e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
1a005312:	461f      	mov	r7, r3
1a005314:	05d3      	lsls	r3, r2, #23
1a005316:	460c      	mov	r4, r1
1a005318:	4605      	mov	r5, r0
1a00531a:	d507      	bpl.n	1a00532c <__swrite+0x24>
1a00531c:	2200      	movs	r2, #0
1a00531e:	2302      	movs	r3, #2
1a005320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a005324:	f7fb f955 	bl	1a0005d2 <_lseek_r>
1a005328:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a00532c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a005330:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
1a005334:	81a2      	strh	r2, [r4, #12]
1a005336:	463b      	mov	r3, r7
1a005338:	4632      	mov	r2, r6
1a00533a:	4628      	mov	r0, r5
1a00533c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a005340:	f7fb b974 	b.w	1a00062c <_write_r>

1a005344 <__sseek>:
1a005344:	b510      	push	{r4, lr}
1a005346:	460c      	mov	r4, r1
1a005348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00534c:	f7fb f941 	bl	1a0005d2 <_lseek_r>
1a005350:	89a3      	ldrh	r3, [r4, #12]
1a005352:	1c42      	adds	r2, r0, #1
1a005354:	bf0e      	itee	eq
1a005356:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a00535a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a00535e:	6520      	strne	r0, [r4, #80]	; 0x50
1a005360:	81a3      	strh	r3, [r4, #12]
1a005362:	bd10      	pop	{r4, pc}

1a005364 <__sclose>:
1a005364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a005368:	f7fb b920 	b.w	1a0005ac <_close_r>
1a00536c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a005370:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a005374:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a005378:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00537c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a005380 <strlen>:
1a005380:	f890 f000 	pld	[r0]
1a005384:	e96d 4502 	strd	r4, r5, [sp, #-8]!
1a005388:	f020 0107 	bic.w	r1, r0, #7
1a00538c:	f06f 0c00 	mvn.w	ip, #0
1a005390:	f010 0407 	ands.w	r4, r0, #7
1a005394:	f891 f020 	pld	[r1, #32]
1a005398:	f040 8049 	bne.w	1a00542e <strlen+0xae>
1a00539c:	f04f 0400 	mov.w	r4, #0
1a0053a0:	f06f 0007 	mvn.w	r0, #7
1a0053a4:	e9d1 2300 	ldrd	r2, r3, [r1]
1a0053a8:	f891 f040 	pld	[r1, #64]	; 0x40
1a0053ac:	f100 0008 	add.w	r0, r0, #8
1a0053b0:	fa82 f24c 	uadd8	r2, r2, ip
1a0053b4:	faa4 f28c 	sel	r2, r4, ip
1a0053b8:	fa83 f34c 	uadd8	r3, r3, ip
1a0053bc:	faa2 f38c 	sel	r3, r2, ip
1a0053c0:	bb4b      	cbnz	r3, 1a005416 <strlen+0x96>
1a0053c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
1a0053c6:	fa82 f24c 	uadd8	r2, r2, ip
1a0053ca:	f100 0008 	add.w	r0, r0, #8
1a0053ce:	faa4 f28c 	sel	r2, r4, ip
1a0053d2:	fa83 f34c 	uadd8	r3, r3, ip
1a0053d6:	faa2 f38c 	sel	r3, r2, ip
1a0053da:	b9e3      	cbnz	r3, 1a005416 <strlen+0x96>
1a0053dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a0053e0:	fa82 f24c 	uadd8	r2, r2, ip
1a0053e4:	f100 0008 	add.w	r0, r0, #8
1a0053e8:	faa4 f28c 	sel	r2, r4, ip
1a0053ec:	fa83 f34c 	uadd8	r3, r3, ip
1a0053f0:	faa2 f38c 	sel	r3, r2, ip
1a0053f4:	b97b      	cbnz	r3, 1a005416 <strlen+0x96>
1a0053f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
1a0053fa:	f101 0120 	add.w	r1, r1, #32
1a0053fe:	fa82 f24c 	uadd8	r2, r2, ip
1a005402:	f100 0008 	add.w	r0, r0, #8
1a005406:	faa4 f28c 	sel	r2, r4, ip
1a00540a:	fa83 f34c 	uadd8	r3, r3, ip
1a00540e:	faa2 f38c 	sel	r3, r2, ip
1a005412:	2b00      	cmp	r3, #0
1a005414:	d0c6      	beq.n	1a0053a4 <strlen+0x24>
1a005416:	2a00      	cmp	r2, #0
1a005418:	bf04      	itt	eq
1a00541a:	3004      	addeq	r0, #4
1a00541c:	461a      	moveq	r2, r3
1a00541e:	ba12      	rev	r2, r2
1a005420:	fab2 f282 	clz	r2, r2
1a005424:	e8fd 4502 	ldrd	r4, r5, [sp], #8
1a005428:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
1a00542c:	4770      	bx	lr
1a00542e:	e9d1 2300 	ldrd	r2, r3, [r1]
1a005432:	f004 0503 	and.w	r5, r4, #3
1a005436:	f1c4 0000 	rsb	r0, r4, #0
1a00543a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
1a00543e:	f014 0f04 	tst.w	r4, #4
1a005442:	f891 f040 	pld	[r1, #64]	; 0x40
1a005446:	fa0c f505 	lsl.w	r5, ip, r5
1a00544a:	ea62 0205 	orn	r2, r2, r5
1a00544e:	bf1c      	itt	ne
1a005450:	ea63 0305 	ornne	r3, r3, r5
1a005454:	4662      	movne	r2, ip
1a005456:	f04f 0400 	mov.w	r4, #0
1a00545a:	e7a9      	b.n	1a0053b0 <strlen+0x30>
1a00545c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a005460 <_vfprintf_r>:
1a005460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a005464:	b0bf      	sub	sp, #252	; 0xfc
1a005466:	461d      	mov	r5, r3
1a005468:	468a      	mov	sl, r1
1a00546a:	4691      	mov	r9, r2
1a00546c:	4604      	mov	r4, r0
1a00546e:	9006      	str	r0, [sp, #24]
1a005470:	f002 fc70 	bl	1a007d54 <_localeconv_r>
1a005474:	6803      	ldr	r3, [r0, #0]
1a005476:	9312      	str	r3, [sp, #72]	; 0x48
1a005478:	4618      	mov	r0, r3
1a00547a:	f7ff ff81 	bl	1a005380 <strlen>
1a00547e:	950a      	str	r5, [sp, #40]	; 0x28
1a005480:	9010      	str	r0, [sp, #64]	; 0x40
1a005482:	b11c      	cbz	r4, 1a00548c <_vfprintf_r+0x2c>
1a005484:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a005486:	2b00      	cmp	r3, #0
1a005488:	f000 8120 	beq.w	1a0056cc <_vfprintf_r+0x26c>
1a00548c:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
1a005490:	b293      	uxth	r3, r2
1a005492:	0498      	lsls	r0, r3, #18
1a005494:	d40a      	bmi.n	1a0054ac <_vfprintf_r+0x4c>
1a005496:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
1a00549a:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
1a00549e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a0054a2:	f8aa 300c 	strh.w	r3, [sl, #12]
1a0054a6:	f8ca 1064 	str.w	r1, [sl, #100]	; 0x64
1a0054aa:	b29b      	uxth	r3, r3
1a0054ac:	0719      	lsls	r1, r3, #28
1a0054ae:	f140 80e4 	bpl.w	1a00567a <_vfprintf_r+0x21a>
1a0054b2:	f8da 2010 	ldr.w	r2, [sl, #16]
1a0054b6:	2a00      	cmp	r2, #0
1a0054b8:	f000 80df 	beq.w	1a00567a <_vfprintf_r+0x21a>
1a0054bc:	f003 031a 	and.w	r3, r3, #26
1a0054c0:	2b0a      	cmp	r3, #10
1a0054c2:	f000 80e8 	beq.w	1a005696 <_vfprintf_r+0x236>
1a0054c6:	ed9f 7b84 	vldr	d7, [pc, #528]	; 1a0056d8 <_vfprintf_r+0x278>
1a0054ca:	2300      	movs	r3, #0
1a0054cc:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
1a0054d0:	930d      	str	r3, [sp, #52]	; 0x34
1a0054d2:	9323      	str	r3, [sp, #140]	; 0x8c
1a0054d4:	9322      	str	r3, [sp, #136]	; 0x88
1a0054d6:	9311      	str	r3, [sp, #68]	; 0x44
1a0054d8:	9313      	str	r3, [sp, #76]	; 0x4c
1a0054da:	9307      	str	r3, [sp, #28]
1a0054dc:	ab2e      	add	r3, sp, #184	; 0xb8
1a0054de:	9321      	str	r3, [sp, #132]	; 0x84
1a0054e0:	4698      	mov	r8, r3
1a0054e2:	f8cd a014 	str.w	sl, [sp, #20]
1a0054e6:	f899 3000 	ldrb.w	r3, [r9]
1a0054ea:	464c      	mov	r4, r9
1a0054ec:	b1eb      	cbz	r3, 1a00552a <_vfprintf_r+0xca>
1a0054ee:	2b25      	cmp	r3, #37	; 0x25
1a0054f0:	d102      	bne.n	1a0054f8 <_vfprintf_r+0x98>
1a0054f2:	e01a      	b.n	1a00552a <_vfprintf_r+0xca>
1a0054f4:	2b25      	cmp	r3, #37	; 0x25
1a0054f6:	d003      	beq.n	1a005500 <_vfprintf_r+0xa0>
1a0054f8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
1a0054fc:	2b00      	cmp	r3, #0
1a0054fe:	d1f9      	bne.n	1a0054f4 <_vfprintf_r+0x94>
1a005500:	eba4 0509 	sub.w	r5, r4, r9
1a005504:	b18d      	cbz	r5, 1a00552a <_vfprintf_r+0xca>
1a005506:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a005508:	9a23      	ldr	r2, [sp, #140]	; 0x8c
1a00550a:	f8c8 9000 	str.w	r9, [r8]
1a00550e:	3301      	adds	r3, #1
1a005510:	442a      	add	r2, r5
1a005512:	2b07      	cmp	r3, #7
1a005514:	f8c8 5004 	str.w	r5, [r8, #4]
1a005518:	9223      	str	r2, [sp, #140]	; 0x8c
1a00551a:	9322      	str	r3, [sp, #136]	; 0x88
1a00551c:	f300 80cb 	bgt.w	1a0056b6 <_vfprintf_r+0x256>
1a005520:	f108 0808 	add.w	r8, r8, #8
1a005524:	9b07      	ldr	r3, [sp, #28]
1a005526:	442b      	add	r3, r5
1a005528:	9307      	str	r3, [sp, #28]
1a00552a:	7823      	ldrb	r3, [r4, #0]
1a00552c:	2b00      	cmp	r3, #0
1a00552e:	f000 83d5 	beq.w	1a005cdc <_vfprintf_r+0x87c>
1a005532:	2300      	movs	r3, #0
1a005534:	461a      	mov	r2, r3
1a005536:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
1a00553a:	4619      	mov	r1, r3
1a00553c:	9308      	str	r3, [sp, #32]
1a00553e:	469b      	mov	fp, r3
1a005540:	7866      	ldrb	r6, [r4, #1]
1a005542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a005546:	f104 0901 	add.w	r9, r4, #1
1a00554a:	9304      	str	r3, [sp, #16]
1a00554c:	f109 0901 	add.w	r9, r9, #1
1a005550:	f1a6 0320 	sub.w	r3, r6, #32
1a005554:	2b58      	cmp	r3, #88	; 0x58
1a005556:	f200 8398 	bhi.w	1a005c8a <_vfprintf_r+0x82a>
1a00555a:	e8df f013 	tbh	[pc, r3, lsl #1]
1a00555e:	029a      	.short	0x029a
1a005560:	03960396 	.word	0x03960396
1a005564:	03960391 	.word	0x03960391
1a005568:	03960396 	.word	0x03960396
1a00556c:	03960396 	.word	0x03960396
1a005570:	037e0396 	.word	0x037e0396
1a005574:	0396038c 	.word	0x0396038c
1a005578:	02b60089 	.word	0x02b60089
1a00557c:	02a20396 	.word	0x02a20396
1a005580:	02a702a7 	.word	0x02a702a7
1a005584:	02a702a7 	.word	0x02a702a7
1a005588:	02a702a7 	.word	0x02a702a7
1a00558c:	02a702a7 	.word	0x02a702a7
1a005590:	039602a7 	.word	0x039602a7
1a005594:	03960396 	.word	0x03960396
1a005598:	03960396 	.word	0x03960396
1a00559c:	03960396 	.word	0x03960396
1a0055a0:	03960396 	.word	0x03960396
1a0055a4:	02550396 	.word	0x02550396
1a0055a8:	039602e2 	.word	0x039602e2
1a0055ac:	039602e2 	.word	0x039602e2
1a0055b0:	03960396 	.word	0x03960396
1a0055b4:	032b0396 	.word	0x032b0396
1a0055b8:	03960396 	.word	0x03960396
1a0055bc:	0396006f 	.word	0x0396006f
1a0055c0:	03960396 	.word	0x03960396
1a0055c4:	03960396 	.word	0x03960396
1a0055c8:	03960059 	.word	0x03960059
1a0055cc:	03780396 	.word	0x03780396
1a0055d0:	03960396 	.word	0x03960396
1a0055d4:	03960396 	.word	0x03960396
1a0055d8:	03960396 	.word	0x03960396
1a0055dc:	03960396 	.word	0x03960396
1a0055e0:	03960396 	.word	0x03960396
1a0055e4:	0372035c 	.word	0x0372035c
1a0055e8:	02e202e2 	.word	0x02e202e2
1a0055ec:	033002e2 	.word	0x033002e2
1a0055f0:	03960372 	.word	0x03960372
1a0055f4:	03350396 	.word	0x03350396
1a0055f8:	03420396 	.word	0x03420396
1a0055fc:	02d10071 	.word	0x02d10071
1a005600:	03960357 	.word	0x03960357
1a005604:	039600c1 	.word	0x039600c1
1a005608:	0396005b 	.word	0x0396005b
1a00560c:	02030396 	.word	0x02030396
1a005610:	f04b 0b10 	orr.w	fp, fp, #16
1a005614:	f01b 0f20 	tst.w	fp, #32
1a005618:	f040 8665 	bne.w	1a0062e6 <_vfprintf_r+0xe86>
1a00561c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a00561e:	f01b 0f10 	tst.w	fp, #16
1a005622:	4613      	mov	r3, r2
1a005624:	f040 8344 	bne.w	1a005cb0 <_vfprintf_r+0x850>
1a005628:	f01b 0f40 	tst.w	fp, #64	; 0x40
1a00562c:	f000 8340 	beq.w	1a005cb0 <_vfprintf_r+0x850>
1a005630:	8814      	ldrh	r4, [r2, #0]
1a005632:	3204      	adds	r2, #4
1a005634:	2500      	movs	r5, #0
1a005636:	2301      	movs	r3, #1
1a005638:	920a      	str	r2, [sp, #40]	; 0x28
1a00563a:	e1ba      	b.n	1a0059b2 <_vfprintf_r+0x552>
1a00563c:	f04b 0b10 	orr.w	fp, fp, #16
1a005640:	f01b 0320 	ands.w	r3, fp, #32
1a005644:	f040 865b 	bne.w	1a0062fe <_vfprintf_r+0xe9e>
1a005648:	f01b 0210 	ands.w	r2, fp, #16
1a00564c:	f040 8336 	bne.w	1a005cbc <_vfprintf_r+0x85c>
1a005650:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
1a005654:	f000 8332 	beq.w	1a005cbc <_vfprintf_r+0x85c>
1a005658:	990a      	ldr	r1, [sp, #40]	; 0x28
1a00565a:	4613      	mov	r3, r2
1a00565c:	460a      	mov	r2, r1
1a00565e:	3204      	adds	r2, #4
1a005660:	880c      	ldrh	r4, [r1, #0]
1a005662:	920a      	str	r2, [sp, #40]	; 0x28
1a005664:	2500      	movs	r5, #0
1a005666:	e1a4      	b.n	1a0059b2 <_vfprintf_r+0x552>
1a005668:	9808      	ldr	r0, [sp, #32]
1a00566a:	930a      	str	r3, [sp, #40]	; 0x28
1a00566c:	4240      	negs	r0, r0
1a00566e:	9008      	str	r0, [sp, #32]
1a005670:	f04b 0b04 	orr.w	fp, fp, #4
1a005674:	f899 6000 	ldrb.w	r6, [r9]
1a005678:	e768      	b.n	1a00554c <_vfprintf_r+0xec>
1a00567a:	4651      	mov	r1, sl
1a00567c:	9806      	ldr	r0, [sp, #24]
1a00567e:	f001 f9a3 	bl	1a0069c8 <__swsetup_r>
1a005682:	2800      	cmp	r0, #0
1a005684:	f040 8338 	bne.w	1a005cf8 <_vfprintf_r+0x898>
1a005688:	f8ba 300c 	ldrh.w	r3, [sl, #12]
1a00568c:	f003 031a 	and.w	r3, r3, #26
1a005690:	2b0a      	cmp	r3, #10
1a005692:	f47f af18 	bne.w	1a0054c6 <_vfprintf_r+0x66>
1a005696:	f9ba 300e 	ldrsh.w	r3, [sl, #14]
1a00569a:	2b00      	cmp	r3, #0
1a00569c:	f6ff af13 	blt.w	1a0054c6 <_vfprintf_r+0x66>
1a0056a0:	462b      	mov	r3, r5
1a0056a2:	464a      	mov	r2, r9
1a0056a4:	4651      	mov	r1, sl
1a0056a6:	9806      	ldr	r0, [sp, #24]
1a0056a8:	f001 f958 	bl	1a00695c <__sbprintf>
1a0056ac:	9007      	str	r0, [sp, #28]
1a0056ae:	9807      	ldr	r0, [sp, #28]
1a0056b0:	b03f      	add	sp, #252	; 0xfc
1a0056b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0056b6:	aa21      	add	r2, sp, #132	; 0x84
1a0056b8:	9905      	ldr	r1, [sp, #20]
1a0056ba:	9806      	ldr	r0, [sp, #24]
1a0056bc:	f003 fc5e 	bl	1a008f7c <__sprint_r>
1a0056c0:	2800      	cmp	r0, #0
1a0056c2:	f040 8431 	bne.w	1a005f28 <_vfprintf_r+0xac8>
1a0056c6:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
1a0056ca:	e72b      	b.n	1a005524 <_vfprintf_r+0xc4>
1a0056cc:	9806      	ldr	r0, [sp, #24]
1a0056ce:	f7ff f843 	bl	1a004758 <__sinit>
1a0056d2:	e6db      	b.n	1a00548c <_vfprintf_r+0x2c>
1a0056d4:	f3af 8000 	nop.w
	...
1a0056e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a0056e2:	6817      	ldr	r7, [r2, #0]
1a0056e4:	2400      	movs	r4, #0
1a0056e6:	f88d 4067 	strb.w	r4, [sp, #103]	; 0x67
1a0056ea:	1d15      	adds	r5, r2, #4
1a0056ec:	2f00      	cmp	r7, #0
1a0056ee:	f000 87e7 	beq.w	1a0066c0 <_vfprintf_r+0x1260>
1a0056f2:	9a04      	ldr	r2, [sp, #16]
1a0056f4:	1c53      	adds	r3, r2, #1
1a0056f6:	f000 8749 	beq.w	1a00658c <_vfprintf_r+0x112c>
1a0056fa:	4621      	mov	r1, r4
1a0056fc:	4638      	mov	r0, r7
1a0056fe:	f002 fbaf 	bl	1a007e60 <memchr>
1a005702:	2800      	cmp	r0, #0
1a005704:	f001 8046 	beq.w	1a006794 <_vfprintf_r+0x1334>
1a005708:	1bc3      	subs	r3, r0, r7
1a00570a:	9309      	str	r3, [sp, #36]	; 0x24
1a00570c:	9404      	str	r4, [sp, #16]
1a00570e:	950a      	str	r5, [sp, #40]	; 0x28
1a005710:	f8cd b008 	str.w	fp, [sp, #8]
1a005714:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a005718:	f89d a067 	ldrb.w	sl, [sp, #103]	; 0x67
1a00571c:	9303      	str	r3, [sp, #12]
1a00571e:	940c      	str	r4, [sp, #48]	; 0x30
1a005720:	f1ba 0f00 	cmp.w	sl, #0
1a005724:	d002      	beq.n	1a00572c <_vfprintf_r+0x2cc>
1a005726:	9b03      	ldr	r3, [sp, #12]
1a005728:	3301      	adds	r3, #1
1a00572a:	9303      	str	r3, [sp, #12]
1a00572c:	9b02      	ldr	r3, [sp, #8]
1a00572e:	f013 0302 	ands.w	r3, r3, #2
1a005732:	930b      	str	r3, [sp, #44]	; 0x2c
1a005734:	d002      	beq.n	1a00573c <_vfprintf_r+0x2dc>
1a005736:	9b03      	ldr	r3, [sp, #12]
1a005738:	3302      	adds	r3, #2
1a00573a:	9303      	str	r3, [sp, #12]
1a00573c:	9b02      	ldr	r3, [sp, #8]
1a00573e:	f013 0584 	ands.w	r5, r3, #132	; 0x84
1a005742:	f040 82c9 	bne.w	1a005cd8 <_vfprintf_r+0x878>
1a005746:	9b08      	ldr	r3, [sp, #32]
1a005748:	9a03      	ldr	r2, [sp, #12]
1a00574a:	eba3 0b02 	sub.w	fp, r3, r2
1a00574e:	f1bb 0f00 	cmp.w	fp, #0
1a005752:	f340 82c1 	ble.w	1a005cd8 <_vfprintf_r+0x878>
1a005756:	f1bb 0f10 	cmp.w	fp, #16
1a00575a:	9923      	ldr	r1, [sp, #140]	; 0x8c
1a00575c:	9a22      	ldr	r2, [sp, #136]	; 0x88
1a00575e:	dd28      	ble.n	1a0057b2 <_vfprintf_r+0x352>
1a005760:	4643      	mov	r3, r8
1a005762:	2410      	movs	r4, #16
1a005764:	46a8      	mov	r8, r5
1a005766:	f8dd a018 	ldr.w	sl, [sp, #24]
1a00576a:	9d05      	ldr	r5, [sp, #20]
1a00576c:	e006      	b.n	1a00577c <_vfprintf_r+0x31c>
1a00576e:	f1ab 0b10 	sub.w	fp, fp, #16
1a005772:	f1bb 0f10 	cmp.w	fp, #16
1a005776:	f103 0308 	add.w	r3, r3, #8
1a00577a:	dd18      	ble.n	1a0057ae <_vfprintf_r+0x34e>
1a00577c:	3201      	adds	r2, #1
1a00577e:	489f      	ldr	r0, [pc, #636]	; (1a0059fc <_vfprintf_r+0x59c>)
1a005780:	9222      	str	r2, [sp, #136]	; 0x88
1a005782:	3110      	adds	r1, #16
1a005784:	2a07      	cmp	r2, #7
1a005786:	9123      	str	r1, [sp, #140]	; 0x8c
1a005788:	e883 0011 	stmia.w	r3, {r0, r4}
1a00578c:	ddef      	ble.n	1a00576e <_vfprintf_r+0x30e>
1a00578e:	aa21      	add	r2, sp, #132	; 0x84
1a005790:	4629      	mov	r1, r5
1a005792:	4650      	mov	r0, sl
1a005794:	f003 fbf2 	bl	1a008f7c <__sprint_r>
1a005798:	2800      	cmp	r0, #0
1a00579a:	f040 8311 	bne.w	1a005dc0 <_vfprintf_r+0x960>
1a00579e:	f1ab 0b10 	sub.w	fp, fp, #16
1a0057a2:	f1bb 0f10 	cmp.w	fp, #16
1a0057a6:	9923      	ldr	r1, [sp, #140]	; 0x8c
1a0057a8:	9a22      	ldr	r2, [sp, #136]	; 0x88
1a0057aa:	ab2e      	add	r3, sp, #184	; 0xb8
1a0057ac:	dce6      	bgt.n	1a00577c <_vfprintf_r+0x31c>
1a0057ae:	4645      	mov	r5, r8
1a0057b0:	4698      	mov	r8, r3
1a0057b2:	3201      	adds	r2, #1
1a0057b4:	4b91      	ldr	r3, [pc, #580]	; (1a0059fc <_vfprintf_r+0x59c>)
1a0057b6:	9222      	str	r2, [sp, #136]	; 0x88
1a0057b8:	eb0b 0401 	add.w	r4, fp, r1
1a0057bc:	2a07      	cmp	r2, #7
1a0057be:	9423      	str	r4, [sp, #140]	; 0x8c
1a0057c0:	e888 0808 	stmia.w	r8, {r3, fp}
1a0057c4:	f300 8473 	bgt.w	1a0060ae <_vfprintf_r+0xc4e>
1a0057c8:	f89d a067 	ldrb.w	sl, [sp, #103]	; 0x67
1a0057cc:	f108 0808 	add.w	r8, r8, #8
1a0057d0:	f1ba 0f00 	cmp.w	sl, #0
1a0057d4:	d00e      	beq.n	1a0057f4 <_vfprintf_r+0x394>
1a0057d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0057d8:	3301      	adds	r3, #1
1a0057da:	3401      	adds	r4, #1
1a0057dc:	f10d 0167 	add.w	r1, sp, #103	; 0x67
1a0057e0:	2201      	movs	r2, #1
1a0057e2:	2b07      	cmp	r3, #7
1a0057e4:	9423      	str	r4, [sp, #140]	; 0x8c
1a0057e6:	9322      	str	r3, [sp, #136]	; 0x88
1a0057e8:	e888 0006 	stmia.w	r8, {r1, r2}
1a0057ec:	f300 83b6 	bgt.w	1a005f5c <_vfprintf_r+0xafc>
1a0057f0:	f108 0808 	add.w	r8, r8, #8
1a0057f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0057f6:	b16b      	cbz	r3, 1a005814 <_vfprintf_r+0x3b4>
1a0057f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0057fa:	3301      	adds	r3, #1
1a0057fc:	3402      	adds	r4, #2
1a0057fe:	a91a      	add	r1, sp, #104	; 0x68
1a005800:	2202      	movs	r2, #2
1a005802:	2b07      	cmp	r3, #7
1a005804:	9423      	str	r4, [sp, #140]	; 0x8c
1a005806:	9322      	str	r3, [sp, #136]	; 0x88
1a005808:	e888 0006 	stmia.w	r8, {r1, r2}
1a00580c:	f300 83b1 	bgt.w	1a005f72 <_vfprintf_r+0xb12>
1a005810:	f108 0808 	add.w	r8, r8, #8
1a005814:	2d80      	cmp	r5, #128	; 0x80
1a005816:	f000 82e9 	beq.w	1a005dec <_vfprintf_r+0x98c>
1a00581a:	9b04      	ldr	r3, [sp, #16]
1a00581c:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a00581e:	eba3 0a02 	sub.w	sl, r3, r2
1a005822:	f1ba 0f00 	cmp.w	sl, #0
1a005826:	dd3b      	ble.n	1a0058a0 <_vfprintf_r+0x440>
1a005828:	f1ba 0f10 	cmp.w	sl, #16
1a00582c:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a00582e:	4d74      	ldr	r5, [pc, #464]	; (1a005a00 <_vfprintf_r+0x5a0>)
1a005830:	dd2b      	ble.n	1a00588a <_vfprintf_r+0x42a>
1a005832:	4642      	mov	r2, r8
1a005834:	4621      	mov	r1, r4
1a005836:	46b0      	mov	r8, r6
1a005838:	f04f 0b10 	mov.w	fp, #16
1a00583c:	462e      	mov	r6, r5
1a00583e:	9c06      	ldr	r4, [sp, #24]
1a005840:	9d05      	ldr	r5, [sp, #20]
1a005842:	e006      	b.n	1a005852 <_vfprintf_r+0x3f2>
1a005844:	f1aa 0a10 	sub.w	sl, sl, #16
1a005848:	f1ba 0f10 	cmp.w	sl, #16
1a00584c:	f102 0208 	add.w	r2, r2, #8
1a005850:	dd17      	ble.n	1a005882 <_vfprintf_r+0x422>
1a005852:	3301      	adds	r3, #1
1a005854:	3110      	adds	r1, #16
1a005856:	2b07      	cmp	r3, #7
1a005858:	9123      	str	r1, [sp, #140]	; 0x8c
1a00585a:	9322      	str	r3, [sp, #136]	; 0x88
1a00585c:	e882 0840 	stmia.w	r2, {r6, fp}
1a005860:	ddf0      	ble.n	1a005844 <_vfprintf_r+0x3e4>
1a005862:	aa21      	add	r2, sp, #132	; 0x84
1a005864:	4629      	mov	r1, r5
1a005866:	4620      	mov	r0, r4
1a005868:	f003 fb88 	bl	1a008f7c <__sprint_r>
1a00586c:	2800      	cmp	r0, #0
1a00586e:	f040 82a7 	bne.w	1a005dc0 <_vfprintf_r+0x960>
1a005872:	f1aa 0a10 	sub.w	sl, sl, #16
1a005876:	f1ba 0f10 	cmp.w	sl, #16
1a00587a:	9923      	ldr	r1, [sp, #140]	; 0x8c
1a00587c:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a00587e:	aa2e      	add	r2, sp, #184	; 0xb8
1a005880:	dce7      	bgt.n	1a005852 <_vfprintf_r+0x3f2>
1a005882:	4635      	mov	r5, r6
1a005884:	460c      	mov	r4, r1
1a005886:	4646      	mov	r6, r8
1a005888:	4690      	mov	r8, r2
1a00588a:	3301      	adds	r3, #1
1a00588c:	4454      	add	r4, sl
1a00588e:	2b07      	cmp	r3, #7
1a005890:	9423      	str	r4, [sp, #140]	; 0x8c
1a005892:	9322      	str	r3, [sp, #136]	; 0x88
1a005894:	e888 0420 	stmia.w	r8, {r5, sl}
1a005898:	f300 8355 	bgt.w	1a005f46 <_vfprintf_r+0xae6>
1a00589c:	f108 0808 	add.w	r8, r8, #8
1a0058a0:	9b02      	ldr	r3, [sp, #8]
1a0058a2:	05db      	lsls	r3, r3, #23
1a0058a4:	f100 822c 	bmi.w	1a005d00 <_vfprintf_r+0x8a0>
1a0058a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0058aa:	9909      	ldr	r1, [sp, #36]	; 0x24
1a0058ac:	f8c8 7000 	str.w	r7, [r8]
1a0058b0:	3301      	adds	r3, #1
1a0058b2:	440c      	add	r4, r1
1a0058b4:	2b07      	cmp	r3, #7
1a0058b6:	9423      	str	r4, [sp, #140]	; 0x8c
1a0058b8:	f8c8 1004 	str.w	r1, [r8, #4]
1a0058bc:	9322      	str	r3, [sp, #136]	; 0x88
1a0058be:	f300 8321 	bgt.w	1a005f04 <_vfprintf_r+0xaa4>
1a0058c2:	f108 0808 	add.w	r8, r8, #8
1a0058c6:	9b02      	ldr	r3, [sp, #8]
1a0058c8:	075a      	lsls	r2, r3, #29
1a0058ca:	d53b      	bpl.n	1a005944 <_vfprintf_r+0x4e4>
1a0058cc:	9b08      	ldr	r3, [sp, #32]
1a0058ce:	9a03      	ldr	r2, [sp, #12]
1a0058d0:	1a9d      	subs	r5, r3, r2
1a0058d2:	2d00      	cmp	r5, #0
1a0058d4:	dd36      	ble.n	1a005944 <_vfprintf_r+0x4e4>
1a0058d6:	2d10      	cmp	r5, #16
1a0058d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0058da:	dd21      	ble.n	1a005920 <_vfprintf_r+0x4c0>
1a0058dc:	2610      	movs	r6, #16
1a0058de:	9f06      	ldr	r7, [sp, #24]
1a0058e0:	f8dd a014 	ldr.w	sl, [sp, #20]
1a0058e4:	e004      	b.n	1a0058f0 <_vfprintf_r+0x490>
1a0058e6:	3d10      	subs	r5, #16
1a0058e8:	2d10      	cmp	r5, #16
1a0058ea:	f108 0808 	add.w	r8, r8, #8
1a0058ee:	dd17      	ble.n	1a005920 <_vfprintf_r+0x4c0>
1a0058f0:	3301      	adds	r3, #1
1a0058f2:	4a42      	ldr	r2, [pc, #264]	; (1a0059fc <_vfprintf_r+0x59c>)
1a0058f4:	9322      	str	r3, [sp, #136]	; 0x88
1a0058f6:	3410      	adds	r4, #16
1a0058f8:	2b07      	cmp	r3, #7
1a0058fa:	9423      	str	r4, [sp, #140]	; 0x8c
1a0058fc:	e888 0044 	stmia.w	r8, {r2, r6}
1a005900:	ddf1      	ble.n	1a0058e6 <_vfprintf_r+0x486>
1a005902:	aa21      	add	r2, sp, #132	; 0x84
1a005904:	4651      	mov	r1, sl
1a005906:	4638      	mov	r0, r7
1a005908:	f003 fb38 	bl	1a008f7c <__sprint_r>
1a00590c:	2800      	cmp	r0, #0
1a00590e:	f040 81ee 	bne.w	1a005cee <_vfprintf_r+0x88e>
1a005912:	3d10      	subs	r5, #16
1a005914:	2d10      	cmp	r5, #16
1a005916:	9c23      	ldr	r4, [sp, #140]	; 0x8c
1a005918:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a00591a:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
1a00591e:	dce7      	bgt.n	1a0058f0 <_vfprintf_r+0x490>
1a005920:	3301      	adds	r3, #1
1a005922:	4a36      	ldr	r2, [pc, #216]	; (1a0059fc <_vfprintf_r+0x59c>)
1a005924:	9322      	str	r3, [sp, #136]	; 0x88
1a005926:	442c      	add	r4, r5
1a005928:	2b07      	cmp	r3, #7
1a00592a:	9423      	str	r4, [sp, #140]	; 0x8c
1a00592c:	e888 0024 	stmia.w	r8, {r2, r5}
1a005930:	dd08      	ble.n	1a005944 <_vfprintf_r+0x4e4>
1a005932:	aa21      	add	r2, sp, #132	; 0x84
1a005934:	9905      	ldr	r1, [sp, #20]
1a005936:	9806      	ldr	r0, [sp, #24]
1a005938:	f003 fb20 	bl	1a008f7c <__sprint_r>
1a00593c:	2800      	cmp	r0, #0
1a00593e:	f040 82f3 	bne.w	1a005f28 <_vfprintf_r+0xac8>
1a005942:	9c23      	ldr	r4, [sp, #140]	; 0x8c
1a005944:	9b07      	ldr	r3, [sp, #28]
1a005946:	9a08      	ldr	r2, [sp, #32]
1a005948:	9903      	ldr	r1, [sp, #12]
1a00594a:	428a      	cmp	r2, r1
1a00594c:	bfac      	ite	ge
1a00594e:	189b      	addge	r3, r3, r2
1a005950:	185b      	addlt	r3, r3, r1
1a005952:	9307      	str	r3, [sp, #28]
1a005954:	2c00      	cmp	r4, #0
1a005956:	f040 82df 	bne.w	1a005f18 <_vfprintf_r+0xab8>
1a00595a:	2300      	movs	r3, #0
1a00595c:	9322      	str	r3, [sp, #136]	; 0x88
1a00595e:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
1a005962:	e5c0      	b.n	1a0054e6 <_vfprintf_r+0x86>
1a005964:	2a00      	cmp	r2, #0
1a005966:	f040 87e2 	bne.w	1a00692e <_vfprintf_r+0x14ce>
1a00596a:	4b26      	ldr	r3, [pc, #152]	; (1a005a04 <_vfprintf_r+0x5a4>)
1a00596c:	9311      	str	r3, [sp, #68]	; 0x44
1a00596e:	f01b 0f20 	tst.w	fp, #32
1a005972:	f040 84a0 	bne.w	1a0062b6 <_vfprintf_r+0xe56>
1a005976:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a005978:	f01b 0f10 	tst.w	fp, #16
1a00597c:	4613      	mov	r3, r2
1a00597e:	f040 83d0 	bne.w	1a006122 <_vfprintf_r+0xcc2>
1a005982:	f01b 0f40 	tst.w	fp, #64	; 0x40
1a005986:	f000 83cc 	beq.w	1a006122 <_vfprintf_r+0xcc2>
1a00598a:	3304      	adds	r3, #4
1a00598c:	8814      	ldrh	r4, [r2, #0]
1a00598e:	930a      	str	r3, [sp, #40]	; 0x28
1a005990:	2500      	movs	r5, #0
1a005992:	f01b 0f01 	tst.w	fp, #1
1a005996:	f000 831e 	beq.w	1a005fd6 <_vfprintf_r+0xb76>
1a00599a:	ea54 0305 	orrs.w	r3, r4, r5
1a00599e:	f000 831a 	beq.w	1a005fd6 <_vfprintf_r+0xb76>
1a0059a2:	2330      	movs	r3, #48	; 0x30
1a0059a4:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
1a0059a8:	f88d 6069 	strb.w	r6, [sp, #105]	; 0x69
1a0059ac:	f04b 0b02 	orr.w	fp, fp, #2
1a0059b0:	2302      	movs	r3, #2
1a0059b2:	f04f 0a00 	mov.w	sl, #0
1a0059b6:	f88d a067 	strb.w	sl, [sp, #103]	; 0x67
1a0059ba:	9904      	ldr	r1, [sp, #16]
1a0059bc:	1c4a      	adds	r2, r1, #1
1a0059be:	d048      	beq.n	1a005a52 <_vfprintf_r+0x5f2>
1a0059c0:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
1a0059c4:	9202      	str	r2, [sp, #8]
1a0059c6:	ea54 0205 	orrs.w	r2, r4, r5
1a0059ca:	d148      	bne.n	1a005a5e <_vfprintf_r+0x5fe>
1a0059cc:	2900      	cmp	r1, #0
1a0059ce:	f040 82ae 	bne.w	1a005f2e <_vfprintf_r+0xace>
1a0059d2:	2b00      	cmp	r3, #0
1a0059d4:	f040 8367 	bne.w	1a0060a6 <_vfprintf_r+0xc46>
1a0059d8:	f01b 0301 	ands.w	r3, fp, #1
1a0059dc:	9309      	str	r3, [sp, #36]	; 0x24
1a0059de:	f000 849a 	beq.w	1a006316 <_vfprintf_r+0xeb6>
1a0059e2:	af3e      	add	r7, sp, #248	; 0xf8
1a0059e4:	2330      	movs	r3, #48	; 0x30
1a0059e6:	f807 3d41 	strb.w	r3, [r7, #-65]!
1a0059ea:	9b04      	ldr	r3, [sp, #16]
1a0059ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a0059ee:	4293      	cmp	r3, r2
1a0059f0:	bfb8      	it	lt
1a0059f2:	4613      	movlt	r3, r2
1a0059f4:	9303      	str	r3, [sp, #12]
1a0059f6:	2300      	movs	r3, #0
1a0059f8:	930c      	str	r3, [sp, #48]	; 0x30
1a0059fa:	e691      	b.n	1a005720 <_vfprintf_r+0x2c0>
1a0059fc:	1a00a2b0 	.word	0x1a00a2b0
1a005a00:	1a00a2c0 	.word	0x1a00a2c0
1a005a04:	1a00a2f4 	.word	0x1a00a2f4
1a005a08:	2a00      	cmp	r2, #0
1a005a0a:	f040 877d 	bne.w	1a006908 <_vfprintf_r+0x14a8>
1a005a0e:	f04b 0b10 	orr.w	fp, fp, #16
1a005a12:	f01b 0f20 	tst.w	fp, #32
1a005a16:	f040 8459 	bne.w	1a0062cc <_vfprintf_r+0xe6c>
1a005a1a:	f01b 0f10 	tst.w	fp, #16
1a005a1e:	f040 838f 	bne.w	1a006140 <_vfprintf_r+0xce0>
1a005a22:	f01b 0f40 	tst.w	fp, #64	; 0x40
1a005a26:	f000 838b 	beq.w	1a006140 <_vfprintf_r+0xce0>
1a005a2a:	990a      	ldr	r1, [sp, #40]	; 0x28
1a005a2c:	f9b1 4000 	ldrsh.w	r4, [r1]
1a005a30:	3104      	adds	r1, #4
1a005a32:	17e5      	asrs	r5, r4, #31
1a005a34:	4622      	mov	r2, r4
1a005a36:	462b      	mov	r3, r5
1a005a38:	910a      	str	r1, [sp, #40]	; 0x28
1a005a3a:	2a00      	cmp	r2, #0
1a005a3c:	f173 0300 	sbcs.w	r3, r3, #0
1a005a40:	f2c0 8479 	blt.w	1a006336 <_vfprintf_r+0xed6>
1a005a44:	9904      	ldr	r1, [sp, #16]
1a005a46:	f89d a067 	ldrb.w	sl, [sp, #103]	; 0x67
1a005a4a:	1c4a      	adds	r2, r1, #1
1a005a4c:	f04f 0301 	mov.w	r3, #1
1a005a50:	d1b6      	bne.n	1a0059c0 <_vfprintf_r+0x560>
1a005a52:	ea54 0205 	orrs.w	r2, r4, r5
1a005a56:	f000 826c 	beq.w	1a005f32 <_vfprintf_r+0xad2>
1a005a5a:	f8cd b008 	str.w	fp, [sp, #8]
1a005a5e:	2b01      	cmp	r3, #1
1a005a60:	f000 8304 	beq.w	1a00606c <_vfprintf_r+0xc0c>
1a005a64:	2b02      	cmp	r3, #2
1a005a66:	f040 8293 	bne.w	1a005f90 <_vfprintf_r+0xb30>
1a005a6a:	9811      	ldr	r0, [sp, #68]	; 0x44
1a005a6c:	af2e      	add	r7, sp, #184	; 0xb8
1a005a6e:	0923      	lsrs	r3, r4, #4
1a005a70:	f004 010f 	and.w	r1, r4, #15
1a005a74:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
1a005a78:	092a      	lsrs	r2, r5, #4
1a005a7a:	461c      	mov	r4, r3
1a005a7c:	4615      	mov	r5, r2
1a005a7e:	5c43      	ldrb	r3, [r0, r1]
1a005a80:	f807 3d01 	strb.w	r3, [r7, #-1]!
1a005a84:	ea54 0305 	orrs.w	r3, r4, r5
1a005a88:	d1f1      	bne.n	1a005a6e <_vfprintf_r+0x60e>
1a005a8a:	ab2e      	add	r3, sp, #184	; 0xb8
1a005a8c:	1bdb      	subs	r3, r3, r7
1a005a8e:	9309      	str	r3, [sp, #36]	; 0x24
1a005a90:	e7ab      	b.n	1a0059ea <_vfprintf_r+0x58a>
1a005a92:	f899 6000 	ldrb.w	r6, [r9]
1a005a96:	2900      	cmp	r1, #0
1a005a98:	f47f ad58 	bne.w	1a00554c <_vfprintf_r+0xec>
1a005a9c:	2201      	movs	r2, #1
1a005a9e:	2120      	movs	r1, #32
1a005aa0:	e554      	b.n	1a00554c <_vfprintf_r+0xec>
1a005aa2:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
1a005aa6:	f899 6000 	ldrb.w	r6, [r9]
1a005aaa:	e54f      	b.n	1a00554c <_vfprintf_r+0xec>
1a005aac:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
1a005ab0:	2000      	movs	r0, #0
1a005ab2:	f819 6b01 	ldrb.w	r6, [r9], #1
1a005ab6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a005aba:	eb03 0040 	add.w	r0, r3, r0, lsl #1
1a005abe:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
1a005ac2:	2b09      	cmp	r3, #9
1a005ac4:	d9f5      	bls.n	1a005ab2 <_vfprintf_r+0x652>
1a005ac6:	9008      	str	r0, [sp, #32]
1a005ac8:	e542      	b.n	1a005550 <_vfprintf_r+0xf0>
1a005aca:	f899 6000 	ldrb.w	r6, [r9]
1a005ace:	2e2a      	cmp	r6, #42	; 0x2a
1a005ad0:	f109 0001 	add.w	r0, r9, #1
1a005ad4:	f000 8707 	beq.w	1a0068e6 <_vfprintf_r+0x1486>
1a005ad8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
1a005adc:	2b09      	cmp	r3, #9
1a005ade:	4681      	mov	r9, r0
1a005ae0:	bf98      	it	ls
1a005ae2:	2000      	movls	r0, #0
1a005ae4:	f200 8696 	bhi.w	1a006814 <_vfprintf_r+0x13b4>
1a005ae8:	f819 6b01 	ldrb.w	r6, [r9], #1
1a005aec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a005af0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
1a005af4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
1a005af8:	2b09      	cmp	r3, #9
1a005afa:	d9f5      	bls.n	1a005ae8 <_vfprintf_r+0x688>
1a005afc:	9004      	str	r0, [sp, #16]
1a005afe:	e527      	b.n	1a005550 <_vfprintf_r+0xf0>
1a005b00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a005b02:	4bb3      	ldr	r3, [pc, #716]	; (1a005dd0 <_vfprintf_r+0x970>)
1a005b04:	6814      	ldr	r4, [r2, #0]
1a005b06:	9311      	str	r3, [sp, #68]	; 0x44
1a005b08:	2678      	movs	r6, #120	; 0x78
1a005b0a:	2330      	movs	r3, #48	; 0x30
1a005b0c:	3204      	adds	r2, #4
1a005b0e:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
1a005b12:	f04b 0b02 	orr.w	fp, fp, #2
1a005b16:	920a      	str	r2, [sp, #40]	; 0x28
1a005b18:	2500      	movs	r5, #0
1a005b1a:	f88d 6069 	strb.w	r6, [sp, #105]	; 0x69
1a005b1e:	2302      	movs	r3, #2
1a005b20:	e747      	b.n	1a0059b2 <_vfprintf_r+0x552>
1a005b22:	2a00      	cmp	r2, #0
1a005b24:	f040 86ff 	bne.w	1a006926 <_vfprintf_r+0x14c6>
1a005b28:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a005b2a:	f01b 0f08 	tst.w	fp, #8
1a005b2e:	f105 0507 	add.w	r5, r5, #7
1a005b32:	f000 8485 	beq.w	1a006440 <_vfprintf_r+0xfe0>
1a005b36:	f025 0307 	bic.w	r3, r5, #7
1a005b3a:	ed93 7b00 	vldr	d7, [r3]
1a005b3e:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
1a005b42:	f103 0208 	add.w	r2, r3, #8
1a005b46:	920a      	str	r2, [sp, #40]	; 0x28
1a005b48:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
1a005b4c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
1a005b50:	9114      	str	r1, [sp, #80]	; 0x50
1a005b52:	9315      	str	r3, [sp, #84]	; 0x54
1a005b54:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
1a005b58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a005b5c:	4620      	mov	r0, r4
1a005b5e:	4629      	mov	r1, r5
1a005b60:	4b9c      	ldr	r3, [pc, #624]	; (1a005dd4 <_vfprintf_r+0x974>)
1a005b62:	f7fe fa39 	bl	1a003fd8 <__aeabi_dcmpun>
1a005b66:	2800      	cmp	r0, #0
1a005b68:	f040 83ef 	bne.w	1a00634a <_vfprintf_r+0xeea>
1a005b6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a005b70:	4b98      	ldr	r3, [pc, #608]	; (1a005dd4 <_vfprintf_r+0x974>)
1a005b72:	4620      	mov	r0, r4
1a005b74:	4629      	mov	r1, r5
1a005b76:	f7fe fa11 	bl	1a003f9c <__aeabi_dcmple>
1a005b7a:	2800      	cmp	r0, #0
1a005b7c:	f040 83e5 	bne.w	1a00634a <_vfprintf_r+0xeea>
1a005b80:	2200      	movs	r2, #0
1a005b82:	2300      	movs	r3, #0
1a005b84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a005b88:	f7fe f9fe 	bl	1a003f88 <__aeabi_dcmplt>
1a005b8c:	2800      	cmp	r0, #0
1a005b8e:	f040 85be 	bne.w	1a00670e <_vfprintf_r+0x12ae>
1a005b92:	f89d a067 	ldrb.w	sl, [sp, #103]	; 0x67
1a005b96:	4f90      	ldr	r7, [pc, #576]	; (1a005dd8 <_vfprintf_r+0x978>)
1a005b98:	4b90      	ldr	r3, [pc, #576]	; (1a005ddc <_vfprintf_r+0x97c>)
1a005b9a:	2203      	movs	r2, #3
1a005b9c:	2100      	movs	r1, #0
1a005b9e:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
1a005ba2:	9203      	str	r2, [sp, #12]
1a005ba4:	9104      	str	r1, [sp, #16]
1a005ba6:	9002      	str	r0, [sp, #8]
1a005ba8:	2e47      	cmp	r6, #71	; 0x47
1a005baa:	bfd8      	it	le
1a005bac:	461f      	movle	r7, r3
1a005bae:	9209      	str	r2, [sp, #36]	; 0x24
1a005bb0:	910c      	str	r1, [sp, #48]	; 0x30
1a005bb2:	e5b5      	b.n	1a005720 <_vfprintf_r+0x2c0>
1a005bb4:	f04b 0b08 	orr.w	fp, fp, #8
1a005bb8:	f899 6000 	ldrb.w	r6, [r9]
1a005bbc:	e4c6      	b.n	1a00554c <_vfprintf_r+0xec>
1a005bbe:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
1a005bc2:	f899 6000 	ldrb.w	r6, [r9]
1a005bc6:	e4c1      	b.n	1a00554c <_vfprintf_r+0xec>
1a005bc8:	f899 6000 	ldrb.w	r6, [r9]
1a005bcc:	2e6c      	cmp	r6, #108	; 0x6c
1a005bce:	bf03      	ittte	eq
1a005bd0:	f899 6001 	ldrbeq.w	r6, [r9, #1]
1a005bd4:	f04b 0b20 	orreq.w	fp, fp, #32
1a005bd8:	f109 0901 	addeq.w	r9, r9, #1
1a005bdc:	f04b 0b10 	orrne.w	fp, fp, #16
1a005be0:	e4b4      	b.n	1a00554c <_vfprintf_r+0xec>
1a005be2:	2a00      	cmp	r2, #0
1a005be4:	f040 8697 	bne.w	1a006916 <_vfprintf_r+0x14b6>
1a005be8:	f01b 0f20 	tst.w	fp, #32
1a005bec:	f040 8485 	bne.w	1a0064fa <_vfprintf_r+0x109a>
1a005bf0:	f01b 0f10 	tst.w	fp, #16
1a005bf4:	d169      	bne.n	1a005cca <_vfprintf_r+0x86a>
1a005bf6:	f01b 0f40 	tst.w	fp, #64	; 0x40
1a005bfa:	d066      	beq.n	1a005cca <_vfprintf_r+0x86a>
1a005bfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a005bfe:	6813      	ldr	r3, [r2, #0]
1a005c00:	3204      	adds	r2, #4
1a005c02:	920a      	str	r2, [sp, #40]	; 0x28
1a005c04:	f8bd 201c 	ldrh.w	r2, [sp, #28]
1a005c08:	801a      	strh	r2, [r3, #0]
1a005c0a:	e46c      	b.n	1a0054e6 <_vfprintf_r+0x86>
1a005c0c:	f04b 0b20 	orr.w	fp, fp, #32
1a005c10:	f899 6000 	ldrb.w	r6, [r9]
1a005c14:	e49a      	b.n	1a00554c <_vfprintf_r+0xec>
1a005c16:	990a      	ldr	r1, [sp, #40]	; 0x28
1a005c18:	f8cd b008 	str.w	fp, [sp, #8]
1a005c1c:	680a      	ldr	r2, [r1, #0]
1a005c1e:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
1a005c22:	2300      	movs	r3, #0
1a005c24:	460a      	mov	r2, r1
1a005c26:	469a      	mov	sl, r3
1a005c28:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
1a005c2c:	3204      	adds	r2, #4
1a005c2e:	2301      	movs	r3, #1
1a005c30:	9303      	str	r3, [sp, #12]
1a005c32:	f8cd a010 	str.w	sl, [sp, #16]
1a005c36:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
1a005c3a:	920a      	str	r2, [sp, #40]	; 0x28
1a005c3c:	9309      	str	r3, [sp, #36]	; 0x24
1a005c3e:	af24      	add	r7, sp, #144	; 0x90
1a005c40:	e574      	b.n	1a00572c <_vfprintf_r+0x2cc>
1a005c42:	2a00      	cmp	r2, #0
1a005c44:	f43f aee5 	beq.w	1a005a12 <_vfprintf_r+0x5b2>
1a005c48:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
1a005c4c:	e6e1      	b.n	1a005a12 <_vfprintf_r+0x5b2>
1a005c4e:	2a00      	cmp	r2, #0
1a005c50:	f040 8665 	bne.w	1a00691e <_vfprintf_r+0x14be>
1a005c54:	4b62      	ldr	r3, [pc, #392]	; (1a005de0 <_vfprintf_r+0x980>)
1a005c56:	9311      	str	r3, [sp, #68]	; 0x44
1a005c58:	e689      	b.n	1a00596e <_vfprintf_r+0x50e>
1a005c5a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
1a005c5c:	6823      	ldr	r3, [r4, #0]
1a005c5e:	9308      	str	r3, [sp, #32]
1a005c60:	4618      	mov	r0, r3
1a005c62:	2800      	cmp	r0, #0
1a005c64:	4623      	mov	r3, r4
1a005c66:	f103 0304 	add.w	r3, r3, #4
1a005c6a:	f6ff acfd 	blt.w	1a005668 <_vfprintf_r+0x208>
1a005c6e:	930a      	str	r3, [sp, #40]	; 0x28
1a005c70:	f899 6000 	ldrb.w	r6, [r9]
1a005c74:	e46a      	b.n	1a00554c <_vfprintf_r+0xec>
1a005c76:	f899 6000 	ldrb.w	r6, [r9]
1a005c7a:	2201      	movs	r2, #1
1a005c7c:	212b      	movs	r1, #43	; 0x2b
1a005c7e:	e465      	b.n	1a00554c <_vfprintf_r+0xec>
1a005c80:	f04b 0b01 	orr.w	fp, fp, #1
1a005c84:	f899 6000 	ldrb.w	r6, [r9]
1a005c88:	e460      	b.n	1a00554c <_vfprintf_r+0xec>
1a005c8a:	2a00      	cmp	r2, #0
1a005c8c:	f040 8638 	bne.w	1a006900 <_vfprintf_r+0x14a0>
1a005c90:	b326      	cbz	r6, 1a005cdc <_vfprintf_r+0x87c>
1a005c92:	2300      	movs	r3, #0
1a005c94:	2201      	movs	r2, #1
1a005c96:	469a      	mov	sl, r3
1a005c98:	9203      	str	r2, [sp, #12]
1a005c9a:	f88d 6090 	strb.w	r6, [sp, #144]	; 0x90
1a005c9e:	f8cd b008 	str.w	fp, [sp, #8]
1a005ca2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
1a005ca6:	9304      	str	r3, [sp, #16]
1a005ca8:	930c      	str	r3, [sp, #48]	; 0x30
1a005caa:	9209      	str	r2, [sp, #36]	; 0x24
1a005cac:	af24      	add	r7, sp, #144	; 0x90
1a005cae:	e53d      	b.n	1a00572c <_vfprintf_r+0x2cc>
1a005cb0:	3204      	adds	r2, #4
1a005cb2:	681c      	ldr	r4, [r3, #0]
1a005cb4:	920a      	str	r2, [sp, #40]	; 0x28
1a005cb6:	2301      	movs	r3, #1
1a005cb8:	2500      	movs	r5, #0
1a005cba:	e67a      	b.n	1a0059b2 <_vfprintf_r+0x552>
1a005cbc:	990a      	ldr	r1, [sp, #40]	; 0x28
1a005cbe:	460a      	mov	r2, r1
1a005cc0:	3204      	adds	r2, #4
1a005cc2:	680c      	ldr	r4, [r1, #0]
1a005cc4:	920a      	str	r2, [sp, #40]	; 0x28
1a005cc6:	2500      	movs	r5, #0
1a005cc8:	e673      	b.n	1a0059b2 <_vfprintf_r+0x552>
1a005cca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a005ccc:	6813      	ldr	r3, [r2, #0]
1a005cce:	3204      	adds	r2, #4
1a005cd0:	920a      	str	r2, [sp, #40]	; 0x28
1a005cd2:	9a07      	ldr	r2, [sp, #28]
1a005cd4:	601a      	str	r2, [r3, #0]
1a005cd6:	e406      	b.n	1a0054e6 <_vfprintf_r+0x86>
1a005cd8:	9c23      	ldr	r4, [sp, #140]	; 0x8c
1a005cda:	e579      	b.n	1a0057d0 <_vfprintf_r+0x370>
1a005cdc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
1a005cde:	f8dd a014 	ldr.w	sl, [sp, #20]
1a005ce2:	b123      	cbz	r3, 1a005cee <_vfprintf_r+0x88e>
1a005ce4:	9806      	ldr	r0, [sp, #24]
1a005ce6:	aa21      	add	r2, sp, #132	; 0x84
1a005ce8:	4651      	mov	r1, sl
1a005cea:	f003 f947 	bl	1a008f7c <__sprint_r>
1a005cee:	f8ba 300c 	ldrh.w	r3, [sl, #12]
1a005cf2:	065b      	lsls	r3, r3, #25
1a005cf4:	f57f acdb 	bpl.w	1a0056ae <_vfprintf_r+0x24e>
1a005cf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a005cfc:	9307      	str	r3, [sp, #28]
1a005cfe:	e4d6      	b.n	1a0056ae <_vfprintf_r+0x24e>
1a005d00:	2e65      	cmp	r6, #101	; 0x65
1a005d02:	f340 80b7 	ble.w	1a005e74 <_vfprintf_r+0xa14>
1a005d06:	2200      	movs	r2, #0
1a005d08:	2300      	movs	r3, #0
1a005d0a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a005d0e:	f7fe f931 	bl	1a003f74 <__aeabi_dcmpeq>
1a005d12:	2800      	cmp	r0, #0
1a005d14:	f000 8161 	beq.w	1a005fda <_vfprintf_r+0xb7a>
1a005d18:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a005d1a:	4a32      	ldr	r2, [pc, #200]	; (1a005de4 <_vfprintf_r+0x984>)
1a005d1c:	f8c8 2000 	str.w	r2, [r8]
1a005d20:	3301      	adds	r3, #1
1a005d22:	3401      	adds	r4, #1
1a005d24:	2201      	movs	r2, #1
1a005d26:	2b07      	cmp	r3, #7
1a005d28:	9423      	str	r4, [sp, #140]	; 0x8c
1a005d2a:	9322      	str	r3, [sp, #136]	; 0x88
1a005d2c:	f8c8 2004 	str.w	r2, [r8, #4]
1a005d30:	f300 839e 	bgt.w	1a006470 <_vfprintf_r+0x1010>
1a005d34:	f108 0808 	add.w	r8, r8, #8
1a005d38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a005d3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a005d3c:	9c23      	ldr	r4, [sp, #140]	; 0x8c
1a005d3e:	4293      	cmp	r3, r2
1a005d40:	db03      	blt.n	1a005d4a <_vfprintf_r+0x8ea>
1a005d42:	9b02      	ldr	r3, [sp, #8]
1a005d44:	07de      	lsls	r6, r3, #31
1a005d46:	f57f adbe 	bpl.w	1a0058c6 <_vfprintf_r+0x466>
1a005d4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a005d4c:	9910      	ldr	r1, [sp, #64]	; 0x40
1a005d4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a005d50:	f8c8 2000 	str.w	r2, [r8]
1a005d54:	3301      	adds	r3, #1
1a005d56:	440c      	add	r4, r1
1a005d58:	2b07      	cmp	r3, #7
1a005d5a:	f8c8 1004 	str.w	r1, [r8, #4]
1a005d5e:	9423      	str	r4, [sp, #140]	; 0x8c
1a005d60:	9322      	str	r3, [sp, #136]	; 0x88
1a005d62:	f300 8406 	bgt.w	1a006572 <_vfprintf_r+0x1112>
1a005d66:	f108 0808 	add.w	r8, r8, #8
1a005d6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a005d6c:	1e5e      	subs	r6, r3, #1
1a005d6e:	2e00      	cmp	r6, #0
1a005d70:	f77f ada9 	ble.w	1a0058c6 <_vfprintf_r+0x466>
1a005d74:	2e10      	cmp	r6, #16
1a005d76:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a005d78:	4d1b      	ldr	r5, [pc, #108]	; (1a005de8 <_vfprintf_r+0x988>)
1a005d7a:	f340 81d7 	ble.w	1a00612c <_vfprintf_r+0xccc>
1a005d7e:	2710      	movs	r7, #16
1a005d80:	f8dd a018 	ldr.w	sl, [sp, #24]
1a005d84:	f8dd b014 	ldr.w	fp, [sp, #20]
1a005d88:	e005      	b.n	1a005d96 <_vfprintf_r+0x936>
1a005d8a:	f108 0808 	add.w	r8, r8, #8
1a005d8e:	3e10      	subs	r6, #16
1a005d90:	2e10      	cmp	r6, #16
1a005d92:	f340 81cb 	ble.w	1a00612c <_vfprintf_r+0xccc>
1a005d96:	3301      	adds	r3, #1
1a005d98:	3410      	adds	r4, #16
1a005d9a:	2b07      	cmp	r3, #7
1a005d9c:	9423      	str	r4, [sp, #140]	; 0x8c
1a005d9e:	9322      	str	r3, [sp, #136]	; 0x88
1a005da0:	e888 00a0 	stmia.w	r8, {r5, r7}
1a005da4:	ddf1      	ble.n	1a005d8a <_vfprintf_r+0x92a>
1a005da6:	aa21      	add	r2, sp, #132	; 0x84
1a005da8:	4659      	mov	r1, fp
1a005daa:	4650      	mov	r0, sl
1a005dac:	f003 f8e6 	bl	1a008f7c <__sprint_r>
1a005db0:	2800      	cmp	r0, #0
1a005db2:	f040 83db 	bne.w	1a00656c <_vfprintf_r+0x110c>
1a005db6:	9c23      	ldr	r4, [sp, #140]	; 0x8c
1a005db8:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a005dba:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
1a005dbe:	e7e6      	b.n	1a005d8e <_vfprintf_r+0x92e>
1a005dc0:	46aa      	mov	sl, r5
1a005dc2:	f8ba 300c 	ldrh.w	r3, [sl, #12]
1a005dc6:	065b      	lsls	r3, r3, #25
1a005dc8:	f57f ac71 	bpl.w	1a0056ae <_vfprintf_r+0x24e>
1a005dcc:	e794      	b.n	1a005cf8 <_vfprintf_r+0x898>
1a005dce:	bf00      	nop
1a005dd0:	1a00a2f4 	.word	0x1a00a2f4
1a005dd4:	7fefffff 	.word	0x7fefffff
1a005dd8:	1a00a2d4 	.word	0x1a00a2d4
1a005ddc:	1a00a2d0 	.word	0x1a00a2d0
1a005de0:	1a00a2e0 	.word	0x1a00a2e0
1a005de4:	1a00a310 	.word	0x1a00a310
1a005de8:	1a00a2c0 	.word	0x1a00a2c0
1a005dec:	9b08      	ldr	r3, [sp, #32]
1a005dee:	9a03      	ldr	r2, [sp, #12]
1a005df0:	eba3 0a02 	sub.w	sl, r3, r2
1a005df4:	f1ba 0f00 	cmp.w	sl, #0
1a005df8:	f77f ad0f 	ble.w	1a00581a <_vfprintf_r+0x3ba>
1a005dfc:	f1ba 0f10 	cmp.w	sl, #16
1a005e00:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a005e02:	4db9      	ldr	r5, [pc, #740]	; (1a0060e8 <_vfprintf_r+0xc88>)
1a005e04:	dd2a      	ble.n	1a005e5c <_vfprintf_r+0x9fc>
1a005e06:	4642      	mov	r2, r8
1a005e08:	4621      	mov	r1, r4
1a005e0a:	46b0      	mov	r8, r6
1a005e0c:	f04f 0b10 	mov.w	fp, #16
1a005e10:	462e      	mov	r6, r5
1a005e12:	9c06      	ldr	r4, [sp, #24]
1a005e14:	9d05      	ldr	r5, [sp, #20]
1a005e16:	e006      	b.n	1a005e26 <_vfprintf_r+0x9c6>
1a005e18:	f1aa 0a10 	sub.w	sl, sl, #16
1a005e1c:	f1ba 0f10 	cmp.w	sl, #16
1a005e20:	f102 0208 	add.w	r2, r2, #8
1a005e24:	dd16      	ble.n	1a005e54 <_vfprintf_r+0x9f4>
1a005e26:	3301      	adds	r3, #1
1a005e28:	3110      	adds	r1, #16
1a005e2a:	2b07      	cmp	r3, #7
1a005e2c:	9123      	str	r1, [sp, #140]	; 0x8c
1a005e2e:	9322      	str	r3, [sp, #136]	; 0x88
1a005e30:	e882 0840 	stmia.w	r2, {r6, fp}
1a005e34:	ddf0      	ble.n	1a005e18 <_vfprintf_r+0x9b8>
1a005e36:	aa21      	add	r2, sp, #132	; 0x84
1a005e38:	4629      	mov	r1, r5
1a005e3a:	4620      	mov	r0, r4
1a005e3c:	f003 f89e 	bl	1a008f7c <__sprint_r>
1a005e40:	2800      	cmp	r0, #0
1a005e42:	d1bd      	bne.n	1a005dc0 <_vfprintf_r+0x960>
1a005e44:	f1aa 0a10 	sub.w	sl, sl, #16
1a005e48:	f1ba 0f10 	cmp.w	sl, #16
1a005e4c:	9923      	ldr	r1, [sp, #140]	; 0x8c
1a005e4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a005e50:	aa2e      	add	r2, sp, #184	; 0xb8
1a005e52:	dce8      	bgt.n	1a005e26 <_vfprintf_r+0x9c6>
1a005e54:	4635      	mov	r5, r6
1a005e56:	460c      	mov	r4, r1
1a005e58:	4646      	mov	r6, r8
1a005e5a:	4690      	mov	r8, r2
1a005e5c:	3301      	adds	r3, #1
1a005e5e:	4454      	add	r4, sl
1a005e60:	2b07      	cmp	r3, #7
1a005e62:	9423      	str	r4, [sp, #140]	; 0x8c
1a005e64:	9322      	str	r3, [sp, #136]	; 0x88
1a005e66:	e888 0420 	stmia.w	r8, {r5, sl}
1a005e6a:	f300 8257 	bgt.w	1a00631c <_vfprintf_r+0xebc>
1a005e6e:	f108 0808 	add.w	r8, r8, #8
1a005e72:	e4d2      	b.n	1a00581a <_vfprintf_r+0x3ba>
1a005e74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a005e76:	9e22      	ldr	r6, [sp, #136]	; 0x88
1a005e78:	2b01      	cmp	r3, #1
1a005e7a:	f340 81db 	ble.w	1a006234 <_vfprintf_r+0xdd4>
1a005e7e:	3601      	adds	r6, #1
1a005e80:	3401      	adds	r4, #1
1a005e82:	2301      	movs	r3, #1
1a005e84:	2e07      	cmp	r6, #7
1a005e86:	9423      	str	r4, [sp, #140]	; 0x8c
1a005e88:	9622      	str	r6, [sp, #136]	; 0x88
1a005e8a:	f8c8 7000 	str.w	r7, [r8]
1a005e8e:	f8c8 3004 	str.w	r3, [r8, #4]
1a005e92:	f300 81ec 	bgt.w	1a00626e <_vfprintf_r+0xe0e>
1a005e96:	f108 0808 	add.w	r8, r8, #8
1a005e9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a005e9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a005e9e:	f8c8 3000 	str.w	r3, [r8]
1a005ea2:	3601      	adds	r6, #1
1a005ea4:	4414      	add	r4, r2
1a005ea6:	2e07      	cmp	r6, #7
1a005ea8:	9423      	str	r4, [sp, #140]	; 0x8c
1a005eaa:	9622      	str	r6, [sp, #136]	; 0x88
1a005eac:	f8c8 2004 	str.w	r2, [r8, #4]
1a005eb0:	f300 81f4 	bgt.w	1a00629c <_vfprintf_r+0xe3c>
1a005eb4:	f108 0808 	add.w	r8, r8, #8
1a005eb8:	2300      	movs	r3, #0
1a005eba:	2200      	movs	r2, #0
1a005ebc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a005ec0:	f7fe f858 	bl	1a003f74 <__aeabi_dcmpeq>
1a005ec4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a005ec6:	2800      	cmp	r0, #0
1a005ec8:	f040 8100 	bne.w	1a0060cc <_vfprintf_r+0xc6c>
1a005ecc:	3b01      	subs	r3, #1
1a005ece:	3601      	adds	r6, #1
1a005ed0:	3701      	adds	r7, #1
1a005ed2:	441c      	add	r4, r3
1a005ed4:	2e07      	cmp	r6, #7
1a005ed6:	9622      	str	r6, [sp, #136]	; 0x88
1a005ed8:	9423      	str	r4, [sp, #140]	; 0x8c
1a005eda:	f8c8 7000 	str.w	r7, [r8]
1a005ede:	f8c8 3004 	str.w	r3, [r8, #4]
1a005ee2:	f300 81b7 	bgt.w	1a006254 <_vfprintf_r+0xdf4>
1a005ee6:	f108 0808 	add.w	r8, r8, #8
1a005eea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a005eec:	f8c8 2004 	str.w	r2, [r8, #4]
1a005ef0:	3601      	adds	r6, #1
1a005ef2:	4414      	add	r4, r2
1a005ef4:	ab1d      	add	r3, sp, #116	; 0x74
1a005ef6:	2e07      	cmp	r6, #7
1a005ef8:	9423      	str	r4, [sp, #140]	; 0x8c
1a005efa:	9622      	str	r6, [sp, #136]	; 0x88
1a005efc:	f8c8 3000 	str.w	r3, [r8]
1a005f00:	f77f acdf 	ble.w	1a0058c2 <_vfprintf_r+0x462>
1a005f04:	aa21      	add	r2, sp, #132	; 0x84
1a005f06:	9905      	ldr	r1, [sp, #20]
1a005f08:	9806      	ldr	r0, [sp, #24]
1a005f0a:	f003 f837 	bl	1a008f7c <__sprint_r>
1a005f0e:	b958      	cbnz	r0, 1a005f28 <_vfprintf_r+0xac8>
1a005f10:	9c23      	ldr	r4, [sp, #140]	; 0x8c
1a005f12:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
1a005f16:	e4d6      	b.n	1a0058c6 <_vfprintf_r+0x466>
1a005f18:	aa21      	add	r2, sp, #132	; 0x84
1a005f1a:	9905      	ldr	r1, [sp, #20]
1a005f1c:	9806      	ldr	r0, [sp, #24]
1a005f1e:	f003 f82d 	bl	1a008f7c <__sprint_r>
1a005f22:	2800      	cmp	r0, #0
1a005f24:	f43f ad19 	beq.w	1a00595a <_vfprintf_r+0x4fa>
1a005f28:	f8dd a014 	ldr.w	sl, [sp, #20]
1a005f2c:	e6df      	b.n	1a005cee <_vfprintf_r+0x88e>
1a005f2e:	f8dd b008 	ldr.w	fp, [sp, #8]
1a005f32:	2b01      	cmp	r3, #1
1a005f34:	f000 810f 	beq.w	1a006156 <_vfprintf_r+0xcf6>
1a005f38:	2b02      	cmp	r3, #2
1a005f3a:	d125      	bne.n	1a005f88 <_vfprintf_r+0xb28>
1a005f3c:	f8cd b008 	str.w	fp, [sp, #8]
1a005f40:	2400      	movs	r4, #0
1a005f42:	2500      	movs	r5, #0
1a005f44:	e591      	b.n	1a005a6a <_vfprintf_r+0x60a>
1a005f46:	aa21      	add	r2, sp, #132	; 0x84
1a005f48:	9905      	ldr	r1, [sp, #20]
1a005f4a:	9806      	ldr	r0, [sp, #24]
1a005f4c:	f003 f816 	bl	1a008f7c <__sprint_r>
1a005f50:	2800      	cmp	r0, #0
1a005f52:	d1e9      	bne.n	1a005f28 <_vfprintf_r+0xac8>
1a005f54:	9c23      	ldr	r4, [sp, #140]	; 0x8c
1a005f56:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
1a005f5a:	e4a1      	b.n	1a0058a0 <_vfprintf_r+0x440>
1a005f5c:	aa21      	add	r2, sp, #132	; 0x84
1a005f5e:	9905      	ldr	r1, [sp, #20]
1a005f60:	9806      	ldr	r0, [sp, #24]
1a005f62:	f003 f80b 	bl	1a008f7c <__sprint_r>
1a005f66:	2800      	cmp	r0, #0
1a005f68:	d1de      	bne.n	1a005f28 <_vfprintf_r+0xac8>
1a005f6a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
1a005f6c:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
1a005f70:	e440      	b.n	1a0057f4 <_vfprintf_r+0x394>
1a005f72:	aa21      	add	r2, sp, #132	; 0x84
1a005f74:	9905      	ldr	r1, [sp, #20]
1a005f76:	9806      	ldr	r0, [sp, #24]
1a005f78:	f003 f800 	bl	1a008f7c <__sprint_r>
1a005f7c:	2800      	cmp	r0, #0
1a005f7e:	d1d3      	bne.n	1a005f28 <_vfprintf_r+0xac8>
1a005f80:	9c23      	ldr	r4, [sp, #140]	; 0x8c
1a005f82:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
1a005f86:	e445      	b.n	1a005814 <_vfprintf_r+0x3b4>
1a005f88:	f8cd b008 	str.w	fp, [sp, #8]
1a005f8c:	2400      	movs	r4, #0
1a005f8e:	2500      	movs	r5, #0
1a005f90:	a92e      	add	r1, sp, #184	; 0xb8
1a005f92:	e000      	b.n	1a005f96 <_vfprintf_r+0xb36>
1a005f94:	4639      	mov	r1, r7
1a005f96:	08e2      	lsrs	r2, r4, #3
1a005f98:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
1a005f9c:	08e8      	lsrs	r0, r5, #3
1a005f9e:	f004 0307 	and.w	r3, r4, #7
1a005fa2:	4605      	mov	r5, r0
1a005fa4:	4614      	mov	r4, r2
1a005fa6:	3330      	adds	r3, #48	; 0x30
1a005fa8:	ea54 0205 	orrs.w	r2, r4, r5
1a005fac:	f801 3c01 	strb.w	r3, [r1, #-1]
1a005fb0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
1a005fb4:	d1ee      	bne.n	1a005f94 <_vfprintf_r+0xb34>
1a005fb6:	9a02      	ldr	r2, [sp, #8]
1a005fb8:	07d2      	lsls	r2, r2, #31
1a005fba:	f57f ad66 	bpl.w	1a005a8a <_vfprintf_r+0x62a>
1a005fbe:	2b30      	cmp	r3, #48	; 0x30
1a005fc0:	f43f ad63 	beq.w	1a005a8a <_vfprintf_r+0x62a>
1a005fc4:	2330      	movs	r3, #48	; 0x30
1a005fc6:	3902      	subs	r1, #2
1a005fc8:	f807 3c01 	strb.w	r3, [r7, #-1]
1a005fcc:	ab2e      	add	r3, sp, #184	; 0xb8
1a005fce:	1a5b      	subs	r3, r3, r1
1a005fd0:	9309      	str	r3, [sp, #36]	; 0x24
1a005fd2:	460f      	mov	r7, r1
1a005fd4:	e509      	b.n	1a0059ea <_vfprintf_r+0x58a>
1a005fd6:	2302      	movs	r3, #2
1a005fd8:	e4eb      	b.n	1a0059b2 <_vfprintf_r+0x552>
1a005fda:	991b      	ldr	r1, [sp, #108]	; 0x6c
1a005fdc:	2900      	cmp	r1, #0
1a005fde:	f340 8255 	ble.w	1a00648c <_vfprintf_r+0x102c>
1a005fe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a005fe4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a005fe6:	4293      	cmp	r3, r2
1a005fe8:	bfa8      	it	ge
1a005fea:	4613      	movge	r3, r2
1a005fec:	2b00      	cmp	r3, #0
1a005fee:	461e      	mov	r6, r3
1a005ff0:	dd0d      	ble.n	1a00600e <_vfprintf_r+0xbae>
1a005ff2:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a005ff4:	f8c8 7000 	str.w	r7, [r8]
1a005ff8:	3301      	adds	r3, #1
1a005ffa:	4434      	add	r4, r6
1a005ffc:	2b07      	cmp	r3, #7
1a005ffe:	9423      	str	r4, [sp, #140]	; 0x8c
1a006000:	f8c8 6004 	str.w	r6, [r8, #4]
1a006004:	9322      	str	r3, [sp, #136]	; 0x88
1a006006:	f300 8331 	bgt.w	1a00666c <_vfprintf_r+0x120c>
1a00600a:	f108 0808 	add.w	r8, r8, #8
1a00600e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a006010:	2e00      	cmp	r6, #0
1a006012:	bfa8      	it	ge
1a006014:	1b9b      	subge	r3, r3, r6
1a006016:	2b00      	cmp	r3, #0
1a006018:	461e      	mov	r6, r3
1a00601a:	f340 80b0 	ble.w	1a00617e <_vfprintf_r+0xd1e>
1a00601e:	2e10      	cmp	r6, #16
1a006020:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a006022:	4d31      	ldr	r5, [pc, #196]	; (1a0060e8 <_vfprintf_r+0xc88>)
1a006024:	f340 8218 	ble.w	1a006458 <_vfprintf_r+0xff8>
1a006028:	4622      	mov	r2, r4
1a00602a:	f04f 0a10 	mov.w	sl, #16
1a00602e:	f8dd b018 	ldr.w	fp, [sp, #24]
1a006032:	9c05      	ldr	r4, [sp, #20]
1a006034:	e005      	b.n	1a006042 <_vfprintf_r+0xbe2>
1a006036:	f108 0808 	add.w	r8, r8, #8
1a00603a:	3e10      	subs	r6, #16
1a00603c:	2e10      	cmp	r6, #16
1a00603e:	f340 820a 	ble.w	1a006456 <_vfprintf_r+0xff6>
1a006042:	3301      	adds	r3, #1
1a006044:	3210      	adds	r2, #16
1a006046:	2b07      	cmp	r3, #7
1a006048:	9223      	str	r2, [sp, #140]	; 0x8c
1a00604a:	9322      	str	r3, [sp, #136]	; 0x88
1a00604c:	e888 0420 	stmia.w	r8, {r5, sl}
1a006050:	ddf1      	ble.n	1a006036 <_vfprintf_r+0xbd6>
1a006052:	aa21      	add	r2, sp, #132	; 0x84
1a006054:	4621      	mov	r1, r4
1a006056:	4658      	mov	r0, fp
1a006058:	f002 ff90 	bl	1a008f7c <__sprint_r>
1a00605c:	2800      	cmp	r0, #0
1a00605e:	f040 8353 	bne.w	1a006708 <_vfprintf_r+0x12a8>
1a006062:	9a23      	ldr	r2, [sp, #140]	; 0x8c
1a006064:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a006066:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
1a00606a:	e7e6      	b.n	1a00603a <_vfprintf_r+0xbda>
1a00606c:	2d00      	cmp	r5, #0
1a00606e:	bf08      	it	eq
1a006070:	2c0a      	cmpeq	r4, #10
1a006072:	d36e      	bcc.n	1a006152 <_vfprintf_r+0xcf2>
1a006074:	af2e      	add	r7, sp, #184	; 0xb8
1a006076:	4620      	mov	r0, r4
1a006078:	4629      	mov	r1, r5
1a00607a:	220a      	movs	r2, #10
1a00607c:	2300      	movs	r3, #0
1a00607e:	f7fd ffe9 	bl	1a004054 <__aeabi_uldivmod>
1a006082:	3230      	adds	r2, #48	; 0x30
1a006084:	f807 2d01 	strb.w	r2, [r7, #-1]!
1a006088:	4620      	mov	r0, r4
1a00608a:	4629      	mov	r1, r5
1a00608c:	2300      	movs	r3, #0
1a00608e:	220a      	movs	r2, #10
1a006090:	f7fd ffe0 	bl	1a004054 <__aeabi_uldivmod>
1a006094:	4604      	mov	r4, r0
1a006096:	460d      	mov	r5, r1
1a006098:	ea54 0305 	orrs.w	r3, r4, r5
1a00609c:	d1eb      	bne.n	1a006076 <_vfprintf_r+0xc16>
1a00609e:	ab2e      	add	r3, sp, #184	; 0xb8
1a0060a0:	1bdb      	subs	r3, r3, r7
1a0060a2:	9309      	str	r3, [sp, #36]	; 0x24
1a0060a4:	e4a1      	b.n	1a0059ea <_vfprintf_r+0x58a>
1a0060a6:	9b04      	ldr	r3, [sp, #16]
1a0060a8:	9309      	str	r3, [sp, #36]	; 0x24
1a0060aa:	af2e      	add	r7, sp, #184	; 0xb8
1a0060ac:	e49d      	b.n	1a0059ea <_vfprintf_r+0x58a>
1a0060ae:	aa21      	add	r2, sp, #132	; 0x84
1a0060b0:	9905      	ldr	r1, [sp, #20]
1a0060b2:	9806      	ldr	r0, [sp, #24]
1a0060b4:	f002 ff62 	bl	1a008f7c <__sprint_r>
1a0060b8:	2800      	cmp	r0, #0
1a0060ba:	f47f af35 	bne.w	1a005f28 <_vfprintf_r+0xac8>
1a0060be:	f89d a067 	ldrb.w	sl, [sp, #103]	; 0x67
1a0060c2:	9c23      	ldr	r4, [sp, #140]	; 0x8c
1a0060c4:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
1a0060c8:	f7ff bb82 	b.w	1a0057d0 <_vfprintf_r+0x370>
1a0060cc:	1e5f      	subs	r7, r3, #1
1a0060ce:	2f00      	cmp	r7, #0
1a0060d0:	f77f af0b 	ble.w	1a005eea <_vfprintf_r+0xa8a>
1a0060d4:	2f10      	cmp	r7, #16
1a0060d6:	4d04      	ldr	r5, [pc, #16]	; (1a0060e8 <_vfprintf_r+0xc88>)
1a0060d8:	f340 80d6 	ble.w	1a006288 <_vfprintf_r+0xe28>
1a0060dc:	f04f 0a10 	mov.w	sl, #16
1a0060e0:	f8dd b018 	ldr.w	fp, [sp, #24]
1a0060e4:	e008      	b.n	1a0060f8 <_vfprintf_r+0xc98>
1a0060e6:	bf00      	nop
1a0060e8:	1a00a2c0 	.word	0x1a00a2c0
1a0060ec:	f108 0808 	add.w	r8, r8, #8
1a0060f0:	3f10      	subs	r7, #16
1a0060f2:	2f10      	cmp	r7, #16
1a0060f4:	f340 80c8 	ble.w	1a006288 <_vfprintf_r+0xe28>
1a0060f8:	3601      	adds	r6, #1
1a0060fa:	3410      	adds	r4, #16
1a0060fc:	2e07      	cmp	r6, #7
1a0060fe:	9423      	str	r4, [sp, #140]	; 0x8c
1a006100:	9622      	str	r6, [sp, #136]	; 0x88
1a006102:	e888 0420 	stmia.w	r8, {r5, sl}
1a006106:	ddf1      	ble.n	1a0060ec <_vfprintf_r+0xc8c>
1a006108:	aa21      	add	r2, sp, #132	; 0x84
1a00610a:	9905      	ldr	r1, [sp, #20]
1a00610c:	4658      	mov	r0, fp
1a00610e:	f002 ff35 	bl	1a008f7c <__sprint_r>
1a006112:	2800      	cmp	r0, #0
1a006114:	f47f af08 	bne.w	1a005f28 <_vfprintf_r+0xac8>
1a006118:	9c23      	ldr	r4, [sp, #140]	; 0x8c
1a00611a:	9e22      	ldr	r6, [sp, #136]	; 0x88
1a00611c:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
1a006120:	e7e6      	b.n	1a0060f0 <_vfprintf_r+0xc90>
1a006122:	681c      	ldr	r4, [r3, #0]
1a006124:	3304      	adds	r3, #4
1a006126:	930a      	str	r3, [sp, #40]	; 0x28
1a006128:	2500      	movs	r5, #0
1a00612a:	e432      	b.n	1a005992 <_vfprintf_r+0x532>
1a00612c:	3301      	adds	r3, #1
1a00612e:	4434      	add	r4, r6
1a006130:	2b07      	cmp	r3, #7
1a006132:	9423      	str	r4, [sp, #140]	; 0x8c
1a006134:	9322      	str	r3, [sp, #136]	; 0x88
1a006136:	e888 0060 	stmia.w	r8, {r5, r6}
1a00613a:	f77f abc2 	ble.w	1a0058c2 <_vfprintf_r+0x462>
1a00613e:	e6e1      	b.n	1a005f04 <_vfprintf_r+0xaa4>
1a006140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a006142:	6814      	ldr	r4, [r2, #0]
1a006144:	4613      	mov	r3, r2
1a006146:	3304      	adds	r3, #4
1a006148:	17e5      	asrs	r5, r4, #31
1a00614a:	930a      	str	r3, [sp, #40]	; 0x28
1a00614c:	4622      	mov	r2, r4
1a00614e:	462b      	mov	r3, r5
1a006150:	e473      	b.n	1a005a3a <_vfprintf_r+0x5da>
1a006152:	f8dd b008 	ldr.w	fp, [sp, #8]
1a006156:	f8cd b008 	str.w	fp, [sp, #8]
1a00615a:	af3e      	add	r7, sp, #248	; 0xf8
1a00615c:	3430      	adds	r4, #48	; 0x30
1a00615e:	2301      	movs	r3, #1
1a006160:	f807 4d41 	strb.w	r4, [r7, #-65]!
1a006164:	9309      	str	r3, [sp, #36]	; 0x24
1a006166:	e440      	b.n	1a0059ea <_vfprintf_r+0x58a>
1a006168:	aa21      	add	r2, sp, #132	; 0x84
1a00616a:	9905      	ldr	r1, [sp, #20]
1a00616c:	9806      	ldr	r0, [sp, #24]
1a00616e:	f002 ff05 	bl	1a008f7c <__sprint_r>
1a006172:	2800      	cmp	r0, #0
1a006174:	f47f aed8 	bne.w	1a005f28 <_vfprintf_r+0xac8>
1a006178:	9c23      	ldr	r4, [sp, #140]	; 0x8c
1a00617a:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
1a00617e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a006180:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a006182:	4293      	cmp	r3, r2
1a006184:	db45      	blt.n	1a006212 <_vfprintf_r+0xdb2>
1a006186:	9a02      	ldr	r2, [sp, #8]
1a006188:	07d0      	lsls	r0, r2, #31
1a00618a:	d442      	bmi.n	1a006212 <_vfprintf_r+0xdb2>
1a00618c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a00618e:	990c      	ldr	r1, [sp, #48]	; 0x30
1a006190:	1ad3      	subs	r3, r2, r3
1a006192:	1a56      	subs	r6, r2, r1
1a006194:	429e      	cmp	r6, r3
1a006196:	bfa8      	it	ge
1a006198:	461e      	movge	r6, r3
1a00619a:	2e00      	cmp	r6, #0
1a00619c:	dd0e      	ble.n	1a0061bc <_vfprintf_r+0xd5c>
1a00619e:	9a22      	ldr	r2, [sp, #136]	; 0x88
1a0061a0:	f8c8 6004 	str.w	r6, [r8, #4]
1a0061a4:	3201      	adds	r2, #1
1a0061a6:	440f      	add	r7, r1
1a0061a8:	4434      	add	r4, r6
1a0061aa:	2a07      	cmp	r2, #7
1a0061ac:	f8c8 7000 	str.w	r7, [r8]
1a0061b0:	9423      	str	r4, [sp, #140]	; 0x8c
1a0061b2:	9222      	str	r2, [sp, #136]	; 0x88
1a0061b4:	f300 8275 	bgt.w	1a0066a2 <_vfprintf_r+0x1242>
1a0061b8:	f108 0808 	add.w	r8, r8, #8
1a0061bc:	2e00      	cmp	r6, #0
1a0061be:	bfac      	ite	ge
1a0061c0:	1b9e      	subge	r6, r3, r6
1a0061c2:	461e      	movlt	r6, r3
1a0061c4:	2e00      	cmp	r6, #0
1a0061c6:	f77f ab7e 	ble.w	1a0058c6 <_vfprintf_r+0x466>
1a0061ca:	2e10      	cmp	r6, #16
1a0061cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0061ce:	4dae      	ldr	r5, [pc, #696]	; (1a006488 <_vfprintf_r+0x1028>)
1a0061d0:	ddac      	ble.n	1a00612c <_vfprintf_r+0xccc>
1a0061d2:	2710      	movs	r7, #16
1a0061d4:	f8dd a018 	ldr.w	sl, [sp, #24]
1a0061d8:	f8dd b014 	ldr.w	fp, [sp, #20]
1a0061dc:	e004      	b.n	1a0061e8 <_vfprintf_r+0xd88>
1a0061de:	f108 0808 	add.w	r8, r8, #8
1a0061e2:	3e10      	subs	r6, #16
1a0061e4:	2e10      	cmp	r6, #16
1a0061e6:	dda1      	ble.n	1a00612c <_vfprintf_r+0xccc>
1a0061e8:	3301      	adds	r3, #1
1a0061ea:	3410      	adds	r4, #16
1a0061ec:	2b07      	cmp	r3, #7
1a0061ee:	9423      	str	r4, [sp, #140]	; 0x8c
1a0061f0:	9322      	str	r3, [sp, #136]	; 0x88
1a0061f2:	e888 00a0 	stmia.w	r8, {r5, r7}
1a0061f6:	ddf2      	ble.n	1a0061de <_vfprintf_r+0xd7e>
1a0061f8:	aa21      	add	r2, sp, #132	; 0x84
1a0061fa:	4659      	mov	r1, fp
1a0061fc:	4650      	mov	r0, sl
1a0061fe:	f002 febd 	bl	1a008f7c <__sprint_r>
1a006202:	2800      	cmp	r0, #0
1a006204:	f040 81b2 	bne.w	1a00656c <_vfprintf_r+0x110c>
1a006208:	9c23      	ldr	r4, [sp, #140]	; 0x8c
1a00620a:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a00620c:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
1a006210:	e7e7      	b.n	1a0061e2 <_vfprintf_r+0xd82>
1a006212:	9a22      	ldr	r2, [sp, #136]	; 0x88
1a006214:	9810      	ldr	r0, [sp, #64]	; 0x40
1a006216:	9912      	ldr	r1, [sp, #72]	; 0x48
1a006218:	f8c8 1000 	str.w	r1, [r8]
1a00621c:	3201      	adds	r2, #1
1a00621e:	4404      	add	r4, r0
1a006220:	2a07      	cmp	r2, #7
1a006222:	9423      	str	r4, [sp, #140]	; 0x8c
1a006224:	f8c8 0004 	str.w	r0, [r8, #4]
1a006228:	9222      	str	r2, [sp, #136]	; 0x88
1a00622a:	f300 822d 	bgt.w	1a006688 <_vfprintf_r+0x1228>
1a00622e:	f108 0808 	add.w	r8, r8, #8
1a006232:	e7ab      	b.n	1a00618c <_vfprintf_r+0xd2c>
1a006234:	9b02      	ldr	r3, [sp, #8]
1a006236:	07d9      	lsls	r1, r3, #31
1a006238:	f53f ae21 	bmi.w	1a005e7e <_vfprintf_r+0xa1e>
1a00623c:	3601      	adds	r6, #1
1a00623e:	3401      	adds	r4, #1
1a006240:	2301      	movs	r3, #1
1a006242:	2e07      	cmp	r6, #7
1a006244:	9423      	str	r4, [sp, #140]	; 0x8c
1a006246:	9622      	str	r6, [sp, #136]	; 0x88
1a006248:	f8c8 7000 	str.w	r7, [r8]
1a00624c:	f8c8 3004 	str.w	r3, [r8, #4]
1a006250:	f77f ae49 	ble.w	1a005ee6 <_vfprintf_r+0xa86>
1a006254:	aa21      	add	r2, sp, #132	; 0x84
1a006256:	9905      	ldr	r1, [sp, #20]
1a006258:	9806      	ldr	r0, [sp, #24]
1a00625a:	f002 fe8f 	bl	1a008f7c <__sprint_r>
1a00625e:	2800      	cmp	r0, #0
1a006260:	f47f ae62 	bne.w	1a005f28 <_vfprintf_r+0xac8>
1a006264:	9c23      	ldr	r4, [sp, #140]	; 0x8c
1a006266:	9e22      	ldr	r6, [sp, #136]	; 0x88
1a006268:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
1a00626c:	e63d      	b.n	1a005eea <_vfprintf_r+0xa8a>
1a00626e:	aa21      	add	r2, sp, #132	; 0x84
1a006270:	9905      	ldr	r1, [sp, #20]
1a006272:	9806      	ldr	r0, [sp, #24]
1a006274:	f002 fe82 	bl	1a008f7c <__sprint_r>
1a006278:	2800      	cmp	r0, #0
1a00627a:	f47f ae55 	bne.w	1a005f28 <_vfprintf_r+0xac8>
1a00627e:	9c23      	ldr	r4, [sp, #140]	; 0x8c
1a006280:	9e22      	ldr	r6, [sp, #136]	; 0x88
1a006282:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
1a006286:	e608      	b.n	1a005e9a <_vfprintf_r+0xa3a>
1a006288:	3601      	adds	r6, #1
1a00628a:	443c      	add	r4, r7
1a00628c:	2e07      	cmp	r6, #7
1a00628e:	9423      	str	r4, [sp, #140]	; 0x8c
1a006290:	9622      	str	r6, [sp, #136]	; 0x88
1a006292:	e888 00a0 	stmia.w	r8, {r5, r7}
1a006296:	f77f ae26 	ble.w	1a005ee6 <_vfprintf_r+0xa86>
1a00629a:	e7db      	b.n	1a006254 <_vfprintf_r+0xdf4>
1a00629c:	aa21      	add	r2, sp, #132	; 0x84
1a00629e:	9905      	ldr	r1, [sp, #20]
1a0062a0:	9806      	ldr	r0, [sp, #24]
1a0062a2:	f002 fe6b 	bl	1a008f7c <__sprint_r>
1a0062a6:	2800      	cmp	r0, #0
1a0062a8:	f47f ae3e 	bne.w	1a005f28 <_vfprintf_r+0xac8>
1a0062ac:	9c23      	ldr	r4, [sp, #140]	; 0x8c
1a0062ae:	9e22      	ldr	r6, [sp, #136]	; 0x88
1a0062b0:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
1a0062b4:	e600      	b.n	1a005eb8 <_vfprintf_r+0xa58>
1a0062b6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a0062b8:	3507      	adds	r5, #7
1a0062ba:	f025 0307 	bic.w	r3, r5, #7
1a0062be:	f103 0208 	add.w	r2, r3, #8
1a0062c2:	920a      	str	r2, [sp, #40]	; 0x28
1a0062c4:	e9d3 4500 	ldrd	r4, r5, [r3]
1a0062c8:	f7ff bb63 	b.w	1a005992 <_vfprintf_r+0x532>
1a0062cc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a0062ce:	3507      	adds	r5, #7
1a0062d0:	f025 0507 	bic.w	r5, r5, #7
1a0062d4:	e9d5 2300 	ldrd	r2, r3, [r5]
1a0062d8:	f105 0108 	add.w	r1, r5, #8
1a0062dc:	910a      	str	r1, [sp, #40]	; 0x28
1a0062de:	4614      	mov	r4, r2
1a0062e0:	461d      	mov	r5, r3
1a0062e2:	f7ff bbaa 	b.w	1a005a3a <_vfprintf_r+0x5da>
1a0062e6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a0062e8:	3507      	adds	r5, #7
1a0062ea:	f025 0307 	bic.w	r3, r5, #7
1a0062ee:	f103 0208 	add.w	r2, r3, #8
1a0062f2:	e9d3 4500 	ldrd	r4, r5, [r3]
1a0062f6:	920a      	str	r2, [sp, #40]	; 0x28
1a0062f8:	2301      	movs	r3, #1
1a0062fa:	f7ff bb5a 	b.w	1a0059b2 <_vfprintf_r+0x552>
1a0062fe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a006300:	3507      	adds	r5, #7
1a006302:	f025 0307 	bic.w	r3, r5, #7
1a006306:	f103 0208 	add.w	r2, r3, #8
1a00630a:	e9d3 4500 	ldrd	r4, r5, [r3]
1a00630e:	920a      	str	r2, [sp, #40]	; 0x28
1a006310:	2300      	movs	r3, #0
1a006312:	f7ff bb4e 	b.w	1a0059b2 <_vfprintf_r+0x552>
1a006316:	af2e      	add	r7, sp, #184	; 0xb8
1a006318:	f7ff bb67 	b.w	1a0059ea <_vfprintf_r+0x58a>
1a00631c:	aa21      	add	r2, sp, #132	; 0x84
1a00631e:	9905      	ldr	r1, [sp, #20]
1a006320:	9806      	ldr	r0, [sp, #24]
1a006322:	f002 fe2b 	bl	1a008f7c <__sprint_r>
1a006326:	2800      	cmp	r0, #0
1a006328:	f47f adfe 	bne.w	1a005f28 <_vfprintf_r+0xac8>
1a00632c:	9c23      	ldr	r4, [sp, #140]	; 0x8c
1a00632e:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
1a006332:	f7ff ba72 	b.w	1a00581a <_vfprintf_r+0x3ba>
1a006336:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
1a00633a:	4264      	negs	r4, r4
1a00633c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
1a006340:	f88d a067 	strb.w	sl, [sp, #103]	; 0x67
1a006344:	2301      	movs	r3, #1
1a006346:	f7ff bb38 	b.w	1a0059ba <_vfprintf_r+0x55a>
1a00634a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a00634e:	4602      	mov	r2, r0
1a006350:	460b      	mov	r3, r1
1a006352:	f7fd fe41 	bl	1a003fd8 <__aeabi_dcmpun>
1a006356:	2800      	cmp	r0, #0
1a006358:	f040 828b 	bne.w	1a006872 <_vfprintf_r+0x1412>
1a00635c:	9b04      	ldr	r3, [sp, #16]
1a00635e:	3301      	adds	r3, #1
1a006360:	f026 0a20 	bic.w	sl, r6, #32
1a006364:	f000 81bb 	beq.w	1a0066de <_vfprintf_r+0x127e>
1a006368:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
1a00636c:	f000 80f8 	beq.w	1a006560 <_vfprintf_r+0x1100>
1a006370:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a006372:	f44b 7280 	orr.w	r2, fp, #256	; 0x100
1a006376:	2b00      	cmp	r3, #0
1a006378:	9202      	str	r2, [sp, #8]
1a00637a:	f2c0 81ce 	blt.w	1a00671a <_vfprintf_r+0x12ba>
1a00637e:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
1a006382:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
1a006386:	2300      	movs	r3, #0
1a006388:	930b      	str	r3, [sp, #44]	; 0x2c
1a00638a:	2e66      	cmp	r6, #102	; 0x66
1a00638c:	f000 81aa 	beq.w	1a0066e4 <_vfprintf_r+0x1284>
1a006390:	2e46      	cmp	r6, #70	; 0x46
1a006392:	f000 80be 	beq.w	1a006512 <_vfprintf_r+0x10b2>
1a006396:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
1a00639a:	bf0c      	ite	eq
1a00639c:	9b04      	ldreq	r3, [sp, #16]
1a00639e:	9d04      	ldrne	r5, [sp, #16]
1a0063a0:	9806      	ldr	r0, [sp, #24]
1a0063a2:	bf08      	it	eq
1a0063a4:	1c5d      	addeq	r5, r3, #1
1a0063a6:	aa1f      	add	r2, sp, #124	; 0x7c
1a0063a8:	ab1c      	add	r3, sp, #112	; 0x70
1a0063aa:	9201      	str	r2, [sp, #4]
1a0063ac:	9300      	str	r3, [sp, #0]
1a0063ae:	462a      	mov	r2, r5
1a0063b0:	ab1b      	add	r3, sp, #108	; 0x6c
1a0063b2:	2102      	movs	r1, #2
1a0063b4:	ed9d 0b16 	vldr	d0, [sp, #88]	; 0x58
1a0063b8:	f000 fbfe 	bl	1a006bb8 <_dtoa_r>
1a0063bc:	2e67      	cmp	r6, #103	; 0x67
1a0063be:	4607      	mov	r7, r0
1a0063c0:	f040 81c8 	bne.w	1a006754 <_vfprintf_r+0x12f4>
1a0063c4:	f01b 0f01 	tst.w	fp, #1
1a0063c8:	f000 8240 	beq.w	1a00684c <_vfprintf_r+0x13ec>
1a0063cc:	197c      	adds	r4, r7, r5
1a0063ce:	2200      	movs	r2, #0
1a0063d0:	2300      	movs	r3, #0
1a0063d2:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
1a0063d6:	f7fd fdcd 	bl	1a003f74 <__aeabi_dcmpeq>
1a0063da:	2800      	cmp	r0, #0
1a0063dc:	f040 8152 	bne.w	1a006684 <_vfprintf_r+0x1224>
1a0063e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
1a0063e2:	42a3      	cmp	r3, r4
1a0063e4:	d206      	bcs.n	1a0063f4 <_vfprintf_r+0xf94>
1a0063e6:	2130      	movs	r1, #48	; 0x30
1a0063e8:	1c5a      	adds	r2, r3, #1
1a0063ea:	921f      	str	r2, [sp, #124]	; 0x7c
1a0063ec:	7019      	strb	r1, [r3, #0]
1a0063ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
1a0063f0:	429c      	cmp	r4, r3
1a0063f2:	d8f9      	bhi.n	1a0063e8 <_vfprintf_r+0xf88>
1a0063f4:	1bdb      	subs	r3, r3, r7
1a0063f6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
1a0063fa:	930d      	str	r3, [sp, #52]	; 0x34
1a0063fc:	f000 80d9 	beq.w	1a0065b2 <_vfprintf_r+0x1152>
1a006400:	2e65      	cmp	r6, #101	; 0x65
1a006402:	f340 81b6 	ble.w	1a006772 <_vfprintf_r+0x1312>
1a006406:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a006408:	930c      	str	r3, [sp, #48]	; 0x30
1a00640a:	2e66      	cmp	r6, #102	; 0x66
1a00640c:	f000 81b4 	beq.w	1a006778 <_vfprintf_r+0x1318>
1a006410:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a006412:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a006414:	4619      	mov	r1, r3
1a006416:	4291      	cmp	r1, r2
1a006418:	f300 8188 	bgt.w	1a00672c <_vfprintf_r+0x12cc>
1a00641c:	f01b 0f01 	tst.w	fp, #1
1a006420:	f040 821e 	bne.w	1a006860 <_vfprintf_r+0x1400>
1a006424:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
1a006428:	9303      	str	r3, [sp, #12]
1a00642a:	9209      	str	r2, [sp, #36]	; 0x24
1a00642c:	2667      	movs	r6, #103	; 0x67
1a00642e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a006430:	2b00      	cmp	r3, #0
1a006432:	f040 80b6 	bne.w	1a0065a2 <_vfprintf_r+0x1142>
1a006436:	9304      	str	r3, [sp, #16]
1a006438:	f89d a067 	ldrb.w	sl, [sp, #103]	; 0x67
1a00643c:	f7ff b970 	b.w	1a005720 <_vfprintf_r+0x2c0>
1a006440:	f025 0507 	bic.w	r5, r5, #7
1a006444:	ed95 7b00 	vldr	d7, [r5]
1a006448:	f105 0308 	add.w	r3, r5, #8
1a00644c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
1a006450:	930a      	str	r3, [sp, #40]	; 0x28
1a006452:	f7ff bb79 	b.w	1a005b48 <_vfprintf_r+0x6e8>
1a006456:	4614      	mov	r4, r2
1a006458:	3301      	adds	r3, #1
1a00645a:	4434      	add	r4, r6
1a00645c:	2b07      	cmp	r3, #7
1a00645e:	9423      	str	r4, [sp, #140]	; 0x8c
1a006460:	9322      	str	r3, [sp, #136]	; 0x88
1a006462:	e888 0060 	stmia.w	r8, {r5, r6}
1a006466:	f73f ae7f 	bgt.w	1a006168 <_vfprintf_r+0xd08>
1a00646a:	f108 0808 	add.w	r8, r8, #8
1a00646e:	e686      	b.n	1a00617e <_vfprintf_r+0xd1e>
1a006470:	aa21      	add	r2, sp, #132	; 0x84
1a006472:	9905      	ldr	r1, [sp, #20]
1a006474:	9806      	ldr	r0, [sp, #24]
1a006476:	f002 fd81 	bl	1a008f7c <__sprint_r>
1a00647a:	2800      	cmp	r0, #0
1a00647c:	f47f ad54 	bne.w	1a005f28 <_vfprintf_r+0xac8>
1a006480:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
1a006484:	e458      	b.n	1a005d38 <_vfprintf_r+0x8d8>
1a006486:	bf00      	nop
1a006488:	1a00a2c0 	.word	0x1a00a2c0
1a00648c:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a00648e:	4aae      	ldr	r2, [pc, #696]	; (1a006748 <_vfprintf_r+0x12e8>)
1a006490:	f8c8 2000 	str.w	r2, [r8]
1a006494:	3301      	adds	r3, #1
1a006496:	3401      	adds	r4, #1
1a006498:	2201      	movs	r2, #1
1a00649a:	2b07      	cmp	r3, #7
1a00649c:	9423      	str	r4, [sp, #140]	; 0x8c
1a00649e:	9322      	str	r3, [sp, #136]	; 0x88
1a0064a0:	f8c8 2004 	str.w	r2, [r8, #4]
1a0064a4:	dc4f      	bgt.n	1a006546 <_vfprintf_r+0x10e6>
1a0064a6:	f108 0808 	add.w	r8, r8, #8
1a0064aa:	b929      	cbnz	r1, 1a0064b8 <_vfprintf_r+0x1058>
1a0064ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0064ae:	b91b      	cbnz	r3, 1a0064b8 <_vfprintf_r+0x1058>
1a0064b0:	9b02      	ldr	r3, [sp, #8]
1a0064b2:	07dd      	lsls	r5, r3, #31
1a0064b4:	f57f aa07 	bpl.w	1a0058c6 <_vfprintf_r+0x466>
1a0064b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0064ba:	9810      	ldr	r0, [sp, #64]	; 0x40
1a0064bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0064be:	f8c8 2000 	str.w	r2, [r8]
1a0064c2:	3301      	adds	r3, #1
1a0064c4:	4602      	mov	r2, r0
1a0064c6:	4422      	add	r2, r4
1a0064c8:	2b07      	cmp	r3, #7
1a0064ca:	9223      	str	r2, [sp, #140]	; 0x8c
1a0064cc:	f8c8 0004 	str.w	r0, [r8, #4]
1a0064d0:	9322      	str	r3, [sp, #136]	; 0x88
1a0064d2:	f300 8191 	bgt.w	1a0067f8 <_vfprintf_r+0x1398>
1a0064d6:	f108 0808 	add.w	r8, r8, #8
1a0064da:	2900      	cmp	r1, #0
1a0064dc:	f2c0 8166 	blt.w	1a0067ac <_vfprintf_r+0x134c>
1a0064e0:	990d      	ldr	r1, [sp, #52]	; 0x34
1a0064e2:	f8c8 7000 	str.w	r7, [r8]
1a0064e6:	3301      	adds	r3, #1
1a0064e8:	188c      	adds	r4, r1, r2
1a0064ea:	2b07      	cmp	r3, #7
1a0064ec:	9423      	str	r4, [sp, #140]	; 0x8c
1a0064ee:	9322      	str	r3, [sp, #136]	; 0x88
1a0064f0:	f8c8 1004 	str.w	r1, [r8, #4]
1a0064f4:	f77f a9e5 	ble.w	1a0058c2 <_vfprintf_r+0x462>
1a0064f8:	e504      	b.n	1a005f04 <_vfprintf_r+0xaa4>
1a0064fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a0064fc:	9907      	ldr	r1, [sp, #28]
1a0064fe:	6813      	ldr	r3, [r2, #0]
1a006500:	17cd      	asrs	r5, r1, #31
1a006502:	4608      	mov	r0, r1
1a006504:	3204      	adds	r2, #4
1a006506:	4629      	mov	r1, r5
1a006508:	920a      	str	r2, [sp, #40]	; 0x28
1a00650a:	e9c3 0100 	strd	r0, r1, [r3]
1a00650e:	f7fe bfea 	b.w	1a0054e6 <_vfprintf_r+0x86>
1a006512:	9d04      	ldr	r5, [sp, #16]
1a006514:	9806      	ldr	r0, [sp, #24]
1a006516:	aa1f      	add	r2, sp, #124	; 0x7c
1a006518:	ab1c      	add	r3, sp, #112	; 0x70
1a00651a:	9201      	str	r2, [sp, #4]
1a00651c:	9300      	str	r3, [sp, #0]
1a00651e:	462a      	mov	r2, r5
1a006520:	ab1b      	add	r3, sp, #108	; 0x6c
1a006522:	2103      	movs	r1, #3
1a006524:	ed9d 0b16 	vldr	d0, [sp, #88]	; 0x58
1a006528:	f000 fb46 	bl	1a006bb8 <_dtoa_r>
1a00652c:	4607      	mov	r7, r0
1a00652e:	2e46      	cmp	r6, #70	; 0x46
1a006530:	eb07 0405 	add.w	r4, r7, r5
1a006534:	f47f af4b 	bne.w	1a0063ce <_vfprintf_r+0xf6e>
1a006538:	783b      	ldrb	r3, [r7, #0]
1a00653a:	2b30      	cmp	r3, #48	; 0x30
1a00653c:	f000 819f 	beq.w	1a00687e <_vfprintf_r+0x141e>
1a006540:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
1a006542:	442c      	add	r4, r5
1a006544:	e743      	b.n	1a0063ce <_vfprintf_r+0xf6e>
1a006546:	aa21      	add	r2, sp, #132	; 0x84
1a006548:	9905      	ldr	r1, [sp, #20]
1a00654a:	9806      	ldr	r0, [sp, #24]
1a00654c:	f002 fd16 	bl	1a008f7c <__sprint_r>
1a006550:	2800      	cmp	r0, #0
1a006552:	f47f ace9 	bne.w	1a005f28 <_vfprintf_r+0xac8>
1a006556:	991b      	ldr	r1, [sp, #108]	; 0x6c
1a006558:	9c23      	ldr	r4, [sp, #140]	; 0x8c
1a00655a:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
1a00655e:	e7a4      	b.n	1a0064aa <_vfprintf_r+0x104a>
1a006560:	9b04      	ldr	r3, [sp, #16]
1a006562:	2b00      	cmp	r3, #0
1a006564:	bf08      	it	eq
1a006566:	2301      	moveq	r3, #1
1a006568:	9304      	str	r3, [sp, #16]
1a00656a:	e701      	b.n	1a006370 <_vfprintf_r+0xf10>
1a00656c:	46da      	mov	sl, fp
1a00656e:	f7ff bbbe 	b.w	1a005cee <_vfprintf_r+0x88e>
1a006572:	aa21      	add	r2, sp, #132	; 0x84
1a006574:	9905      	ldr	r1, [sp, #20]
1a006576:	9806      	ldr	r0, [sp, #24]
1a006578:	f002 fd00 	bl	1a008f7c <__sprint_r>
1a00657c:	2800      	cmp	r0, #0
1a00657e:	f47f acd3 	bne.w	1a005f28 <_vfprintf_r+0xac8>
1a006582:	9c23      	ldr	r4, [sp, #140]	; 0x8c
1a006584:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
1a006588:	f7ff bbef 	b.w	1a005d6a <_vfprintf_r+0x90a>
1a00658c:	4638      	mov	r0, r7
1a00658e:	9404      	str	r4, [sp, #16]
1a006590:	f7fe fef6 	bl	1a005380 <strlen>
1a006594:	950a      	str	r5, [sp, #40]	; 0x28
1a006596:	9009      	str	r0, [sp, #36]	; 0x24
1a006598:	f8cd b008 	str.w	fp, [sp, #8]
1a00659c:	4603      	mov	r3, r0
1a00659e:	f7ff b8b9 	b.w	1a005714 <_vfprintf_r+0x2b4>
1a0065a2:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
1a0065a6:	2300      	movs	r3, #0
1a0065a8:	f88d a067 	strb.w	sl, [sp, #103]	; 0x67
1a0065ac:	9304      	str	r3, [sp, #16]
1a0065ae:	f7ff b8ba 	b.w	1a005726 <_vfprintf_r+0x2c6>
1a0065b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a0065b4:	930c      	str	r3, [sp, #48]	; 0x30
1a0065b6:	461a      	mov	r2, r3
1a0065b8:	3303      	adds	r3, #3
1a0065ba:	db04      	blt.n	1a0065c6 <_vfprintf_r+0x1166>
1a0065bc:	9b04      	ldr	r3, [sp, #16]
1a0065be:	4619      	mov	r1, r3
1a0065c0:	4291      	cmp	r1, r2
1a0065c2:	f6bf af25 	bge.w	1a006410 <_vfprintf_r+0xfb0>
1a0065c6:	3e02      	subs	r6, #2
1a0065c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0065ca:	f88d 6074 	strb.w	r6, [sp, #116]	; 0x74
1a0065ce:	3b01      	subs	r3, #1
1a0065d0:	2b00      	cmp	r3, #0
1a0065d2:	931b      	str	r3, [sp, #108]	; 0x6c
1a0065d4:	bfbd      	ittte	lt
1a0065d6:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
1a0065d8:	f1c3 0301 	rsblt	r3, r3, #1
1a0065dc:	222d      	movlt	r2, #45	; 0x2d
1a0065de:	222b      	movge	r2, #43	; 0x2b
1a0065e0:	2b09      	cmp	r3, #9
1a0065e2:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
1a0065e6:	f340 8133 	ble.w	1a006850 <_vfprintf_r+0x13f0>
1a0065ea:	f10d 0483 	add.w	r4, sp, #131	; 0x83
1a0065ee:	4620      	mov	r0, r4
1a0065f0:	4d56      	ldr	r5, [pc, #344]	; (1a00674c <_vfprintf_r+0x12ec>)
1a0065f2:	e000      	b.n	1a0065f6 <_vfprintf_r+0x1196>
1a0065f4:	4610      	mov	r0, r2
1a0065f6:	fb85 1203 	smull	r1, r2, r5, r3
1a0065fa:	17d9      	asrs	r1, r3, #31
1a0065fc:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
1a006600:	eb01 0281 	add.w	r2, r1, r1, lsl #2
1a006604:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
1a006608:	3230      	adds	r2, #48	; 0x30
1a00660a:	2909      	cmp	r1, #9
1a00660c:	f800 2c01 	strb.w	r2, [r0, #-1]
1a006610:	460b      	mov	r3, r1
1a006612:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
1a006616:	dced      	bgt.n	1a0065f4 <_vfprintf_r+0x1194>
1a006618:	3330      	adds	r3, #48	; 0x30
1a00661a:	3802      	subs	r0, #2
1a00661c:	b2d9      	uxtb	r1, r3
1a00661e:	4284      	cmp	r4, r0
1a006620:	f802 1c01 	strb.w	r1, [r2, #-1]
1a006624:	f240 8174 	bls.w	1a006910 <_vfprintf_r+0x14b0>
1a006628:	f10d 0076 	add.w	r0, sp, #118	; 0x76
1a00662c:	4613      	mov	r3, r2
1a00662e:	e001      	b.n	1a006634 <_vfprintf_r+0x11d4>
1a006630:	f813 1b01 	ldrb.w	r1, [r3], #1
1a006634:	f800 1b01 	strb.w	r1, [r0], #1
1a006638:	42a3      	cmp	r3, r4
1a00663a:	d1f9      	bne.n	1a006630 <_vfprintf_r+0x11d0>
1a00663c:	3301      	adds	r3, #1
1a00663e:	1a9b      	subs	r3, r3, r2
1a006640:	f10d 0276 	add.w	r2, sp, #118	; 0x76
1a006644:	4413      	add	r3, r2
1a006646:	aa1d      	add	r2, sp, #116	; 0x74
1a006648:	1a9b      	subs	r3, r3, r2
1a00664a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a00664c:	9313      	str	r3, [sp, #76]	; 0x4c
1a00664e:	2a01      	cmp	r2, #1
1a006650:	4413      	add	r3, r2
1a006652:	9309      	str	r3, [sp, #36]	; 0x24
1a006654:	f340 8133 	ble.w	1a0068be <_vfprintf_r+0x145e>
1a006658:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00665a:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a00665c:	4413      	add	r3, r2
1a00665e:	9309      	str	r3, [sp, #36]	; 0x24
1a006660:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a006664:	9303      	str	r3, [sp, #12]
1a006666:	2300      	movs	r3, #0
1a006668:	930c      	str	r3, [sp, #48]	; 0x30
1a00666a:	e6e0      	b.n	1a00642e <_vfprintf_r+0xfce>
1a00666c:	aa21      	add	r2, sp, #132	; 0x84
1a00666e:	9905      	ldr	r1, [sp, #20]
1a006670:	9806      	ldr	r0, [sp, #24]
1a006672:	f002 fc83 	bl	1a008f7c <__sprint_r>
1a006676:	2800      	cmp	r0, #0
1a006678:	f47f ac56 	bne.w	1a005f28 <_vfprintf_r+0xac8>
1a00667c:	9c23      	ldr	r4, [sp, #140]	; 0x8c
1a00667e:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
1a006682:	e4c4      	b.n	1a00600e <_vfprintf_r+0xbae>
1a006684:	4623      	mov	r3, r4
1a006686:	e6b5      	b.n	1a0063f4 <_vfprintf_r+0xf94>
1a006688:	aa21      	add	r2, sp, #132	; 0x84
1a00668a:	9905      	ldr	r1, [sp, #20]
1a00668c:	9806      	ldr	r0, [sp, #24]
1a00668e:	f002 fc75 	bl	1a008f7c <__sprint_r>
1a006692:	2800      	cmp	r0, #0
1a006694:	f47f ac48 	bne.w	1a005f28 <_vfprintf_r+0xac8>
1a006698:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a00669a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
1a00669c:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
1a0066a0:	e574      	b.n	1a00618c <_vfprintf_r+0xd2c>
1a0066a2:	aa21      	add	r2, sp, #132	; 0x84
1a0066a4:	9905      	ldr	r1, [sp, #20]
1a0066a6:	9806      	ldr	r0, [sp, #24]
1a0066a8:	f002 fc68 	bl	1a008f7c <__sprint_r>
1a0066ac:	2800      	cmp	r0, #0
1a0066ae:	f47f ac3b 	bne.w	1a005f28 <_vfprintf_r+0xac8>
1a0066b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a0066b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a0066b6:	9c23      	ldr	r4, [sp, #140]	; 0x8c
1a0066b8:	1ad3      	subs	r3, r2, r3
1a0066ba:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
1a0066be:	e57d      	b.n	1a0061bc <_vfprintf_r+0xd5c>
1a0066c0:	9b04      	ldr	r3, [sp, #16]
1a0066c2:	970c      	str	r7, [sp, #48]	; 0x30
1a0066c4:	2b06      	cmp	r3, #6
1a0066c6:	bf28      	it	cs
1a0066c8:	2306      	movcs	r3, #6
1a0066ca:	9704      	str	r7, [sp, #16]
1a0066cc:	46ba      	mov	sl, r7
1a0066ce:	9303      	str	r3, [sp, #12]
1a0066d0:	950a      	str	r5, [sp, #40]	; 0x28
1a0066d2:	f8cd b008 	str.w	fp, [sp, #8]
1a0066d6:	9309      	str	r3, [sp, #36]	; 0x24
1a0066d8:	4f1d      	ldr	r7, [pc, #116]	; (1a006750 <_vfprintf_r+0x12f0>)
1a0066da:	f7ff b821 	b.w	1a005720 <_vfprintf_r+0x2c0>
1a0066de:	2306      	movs	r3, #6
1a0066e0:	9304      	str	r3, [sp, #16]
1a0066e2:	e645      	b.n	1a006370 <_vfprintf_r+0xf10>
1a0066e4:	9c04      	ldr	r4, [sp, #16]
1a0066e6:	9806      	ldr	r0, [sp, #24]
1a0066e8:	aa1f      	add	r2, sp, #124	; 0x7c
1a0066ea:	ab1c      	add	r3, sp, #112	; 0x70
1a0066ec:	9201      	str	r2, [sp, #4]
1a0066ee:	9300      	str	r3, [sp, #0]
1a0066f0:	4622      	mov	r2, r4
1a0066f2:	ab1b      	add	r3, sp, #108	; 0x6c
1a0066f4:	2103      	movs	r1, #3
1a0066f6:	ed9d 0b16 	vldr	d0, [sp, #88]	; 0x58
1a0066fa:	f000 fa5d 	bl	1a006bb8 <_dtoa_r>
1a0066fe:	4623      	mov	r3, r4
1a006700:	4607      	mov	r7, r0
1a006702:	1904      	adds	r4, r0, r4
1a006704:	461d      	mov	r5, r3
1a006706:	e717      	b.n	1a006538 <_vfprintf_r+0x10d8>
1a006708:	46a2      	mov	sl, r4
1a00670a:	f7ff baf0 	b.w	1a005cee <_vfprintf_r+0x88e>
1a00670e:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
1a006712:	f88d a067 	strb.w	sl, [sp, #103]	; 0x67
1a006716:	f7ff ba3e 	b.w	1a005b96 <_vfprintf_r+0x736>
1a00671a:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
1a00671e:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
1a006722:	9317      	str	r3, [sp, #92]	; 0x5c
1a006724:	232d      	movs	r3, #45	; 0x2d
1a006726:	9116      	str	r1, [sp, #88]	; 0x58
1a006728:	930b      	str	r3, [sp, #44]	; 0x2c
1a00672a:	e62e      	b.n	1a00638a <_vfprintf_r+0xf2a>
1a00672c:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a00672e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a006730:	4413      	add	r3, r2
1a006732:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a006734:	9309      	str	r3, [sp, #36]	; 0x24
1a006736:	2a00      	cmp	r2, #0
1a006738:	f340 80b9 	ble.w	1a0068ae <_vfprintf_r+0x144e>
1a00673c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a006740:	9303      	str	r3, [sp, #12]
1a006742:	2667      	movs	r6, #103	; 0x67
1a006744:	e673      	b.n	1a00642e <_vfprintf_r+0xfce>
1a006746:	bf00      	nop
1a006748:	1a00a310 	.word	0x1a00a310
1a00674c:	66666667 	.word	0x66666667
1a006750:	1a00a308 	.word	0x1a00a308
1a006754:	2e47      	cmp	r6, #71	; 0x47
1a006756:	f47f ae39 	bne.w	1a0063cc <_vfprintf_r+0xf6c>
1a00675a:	f01b 0f01 	tst.w	fp, #1
1a00675e:	f47f aee6 	bne.w	1a00652e <_vfprintf_r+0x10ce>
1a006762:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
1a006764:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
1a006768:	eba3 0307 	sub.w	r3, r3, r7
1a00676c:	930d      	str	r3, [sp, #52]	; 0x34
1a00676e:	f43f af20 	beq.w	1a0065b2 <_vfprintf_r+0x1152>
1a006772:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a006774:	930c      	str	r3, [sp, #48]	; 0x30
1a006776:	e727      	b.n	1a0065c8 <_vfprintf_r+0x1168>
1a006778:	2b00      	cmp	r3, #0
1a00677a:	f340 80aa 	ble.w	1a0068d2 <_vfprintf_r+0x1472>
1a00677e:	9a04      	ldr	r2, [sp, #16]
1a006780:	2a00      	cmp	r2, #0
1a006782:	f040 808a 	bne.w	1a00689a <_vfprintf_r+0x143a>
1a006786:	f01b 0f01 	tst.w	fp, #1
1a00678a:	f040 8086 	bne.w	1a00689a <_vfprintf_r+0x143a>
1a00678e:	9303      	str	r3, [sp, #12]
1a006790:	9309      	str	r3, [sp, #36]	; 0x24
1a006792:	e64c      	b.n	1a00642e <_vfprintf_r+0xfce>
1a006794:	9b04      	ldr	r3, [sp, #16]
1a006796:	9303      	str	r3, [sp, #12]
1a006798:	9309      	str	r3, [sp, #36]	; 0x24
1a00679a:	9004      	str	r0, [sp, #16]
1a00679c:	950a      	str	r5, [sp, #40]	; 0x28
1a00679e:	f8cd b008 	str.w	fp, [sp, #8]
1a0067a2:	900c      	str	r0, [sp, #48]	; 0x30
1a0067a4:	f89d a067 	ldrb.w	sl, [sp, #103]	; 0x67
1a0067a8:	f7fe bfba 	b.w	1a005720 <_vfprintf_r+0x2c0>
1a0067ac:	424e      	negs	r6, r1
1a0067ae:	3110      	adds	r1, #16
1a0067b0:	4d61      	ldr	r5, [pc, #388]	; (1a006938 <_vfprintf_r+0x14d8>)
1a0067b2:	da33      	bge.n	1a00681c <_vfprintf_r+0x13bc>
1a0067b4:	2410      	movs	r4, #16
1a0067b6:	f8dd a018 	ldr.w	sl, [sp, #24]
1a0067ba:	f8dd b014 	ldr.w	fp, [sp, #20]
1a0067be:	e004      	b.n	1a0067ca <_vfprintf_r+0x136a>
1a0067c0:	f108 0808 	add.w	r8, r8, #8
1a0067c4:	3e10      	subs	r6, #16
1a0067c6:	2e10      	cmp	r6, #16
1a0067c8:	dd28      	ble.n	1a00681c <_vfprintf_r+0x13bc>
1a0067ca:	3301      	adds	r3, #1
1a0067cc:	3210      	adds	r2, #16
1a0067ce:	2b07      	cmp	r3, #7
1a0067d0:	9223      	str	r2, [sp, #140]	; 0x8c
1a0067d2:	9322      	str	r3, [sp, #136]	; 0x88
1a0067d4:	f8c8 5000 	str.w	r5, [r8]
1a0067d8:	f8c8 4004 	str.w	r4, [r8, #4]
1a0067dc:	ddf0      	ble.n	1a0067c0 <_vfprintf_r+0x1360>
1a0067de:	aa21      	add	r2, sp, #132	; 0x84
1a0067e0:	4659      	mov	r1, fp
1a0067e2:	4650      	mov	r0, sl
1a0067e4:	f002 fbca 	bl	1a008f7c <__sprint_r>
1a0067e8:	2800      	cmp	r0, #0
1a0067ea:	f47f aebf 	bne.w	1a00656c <_vfprintf_r+0x110c>
1a0067ee:	9a23      	ldr	r2, [sp, #140]	; 0x8c
1a0067f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0067f2:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
1a0067f6:	e7e5      	b.n	1a0067c4 <_vfprintf_r+0x1364>
1a0067f8:	aa21      	add	r2, sp, #132	; 0x84
1a0067fa:	9905      	ldr	r1, [sp, #20]
1a0067fc:	9806      	ldr	r0, [sp, #24]
1a0067fe:	f002 fbbd 	bl	1a008f7c <__sprint_r>
1a006802:	2800      	cmp	r0, #0
1a006804:	f47f ab90 	bne.w	1a005f28 <_vfprintf_r+0xac8>
1a006808:	991b      	ldr	r1, [sp, #108]	; 0x6c
1a00680a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
1a00680c:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a00680e:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
1a006812:	e662      	b.n	1a0064da <_vfprintf_r+0x107a>
1a006814:	2300      	movs	r3, #0
1a006816:	9304      	str	r3, [sp, #16]
1a006818:	f7fe be9a 	b.w	1a005550 <_vfprintf_r+0xf0>
1a00681c:	3301      	adds	r3, #1
1a00681e:	4432      	add	r2, r6
1a006820:	2b07      	cmp	r3, #7
1a006822:	e888 0060 	stmia.w	r8, {r5, r6}
1a006826:	9223      	str	r2, [sp, #140]	; 0x8c
1a006828:	9322      	str	r3, [sp, #136]	; 0x88
1a00682a:	f108 0808 	add.w	r8, r8, #8
1a00682e:	f77f ae57 	ble.w	1a0064e0 <_vfprintf_r+0x1080>
1a006832:	aa21      	add	r2, sp, #132	; 0x84
1a006834:	9905      	ldr	r1, [sp, #20]
1a006836:	9806      	ldr	r0, [sp, #24]
1a006838:	f002 fba0 	bl	1a008f7c <__sprint_r>
1a00683c:	2800      	cmp	r0, #0
1a00683e:	f47f ab73 	bne.w	1a005f28 <_vfprintf_r+0xac8>
1a006842:	9a23      	ldr	r2, [sp, #140]	; 0x8c
1a006844:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a006846:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
1a00684a:	e649      	b.n	1a0064e0 <_vfprintf_r+0x1080>
1a00684c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
1a00684e:	e5d1      	b.n	1a0063f4 <_vfprintf_r+0xf94>
1a006850:	3330      	adds	r3, #48	; 0x30
1a006852:	2230      	movs	r2, #48	; 0x30
1a006854:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
1a006858:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
1a00685c:	ab1e      	add	r3, sp, #120	; 0x78
1a00685e:	e6f2      	b.n	1a006646 <_vfprintf_r+0x11e6>
1a006860:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a006862:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a006864:	4413      	add	r3, r2
1a006866:	9309      	str	r3, [sp, #36]	; 0x24
1a006868:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a00686c:	9303      	str	r3, [sp, #12]
1a00686e:	2667      	movs	r6, #103	; 0x67
1a006870:	e5dd      	b.n	1a00642e <_vfprintf_r+0xfce>
1a006872:	4f32      	ldr	r7, [pc, #200]	; (1a00693c <_vfprintf_r+0x14dc>)
1a006874:	4b32      	ldr	r3, [pc, #200]	; (1a006940 <_vfprintf_r+0x14e0>)
1a006876:	f89d a067 	ldrb.w	sl, [sp, #103]	; 0x67
1a00687a:	f7ff b98e 	b.w	1a005b9a <_vfprintf_r+0x73a>
1a00687e:	2200      	movs	r2, #0
1a006880:	2300      	movs	r3, #0
1a006882:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
1a006886:	f7fd fb75 	bl	1a003f74 <__aeabi_dcmpeq>
1a00688a:	2800      	cmp	r0, #0
1a00688c:	f47f ae58 	bne.w	1a006540 <_vfprintf_r+0x10e0>
1a006890:	f1c5 0501 	rsb	r5, r5, #1
1a006894:	951b      	str	r5, [sp, #108]	; 0x6c
1a006896:	442c      	add	r4, r5
1a006898:	e599      	b.n	1a0063ce <_vfprintf_r+0xf6e>
1a00689a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00689c:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a00689e:	4413      	add	r3, r2
1a0068a0:	9a04      	ldr	r2, [sp, #16]
1a0068a2:	441a      	add	r2, r3
1a0068a4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
1a0068a8:	9209      	str	r2, [sp, #36]	; 0x24
1a0068aa:	9303      	str	r3, [sp, #12]
1a0068ac:	e5bf      	b.n	1a00642e <_vfprintf_r+0xfce>
1a0068ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0068b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a0068b2:	f1c3 0301 	rsb	r3, r3, #1
1a0068b6:	441a      	add	r2, r3
1a0068b8:	4613      	mov	r3, r2
1a0068ba:	9209      	str	r2, [sp, #36]	; 0x24
1a0068bc:	e73e      	b.n	1a00673c <_vfprintf_r+0x12dc>
1a0068be:	f01b 0301 	ands.w	r3, fp, #1
1a0068c2:	930c      	str	r3, [sp, #48]	; 0x30
1a0068c4:	f47f aec8 	bne.w	1a006658 <_vfprintf_r+0x11f8>
1a0068c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0068ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a0068ce:	9303      	str	r3, [sp, #12]
1a0068d0:	e5ad      	b.n	1a00642e <_vfprintf_r+0xfce>
1a0068d2:	9b04      	ldr	r3, [sp, #16]
1a0068d4:	b913      	cbnz	r3, 1a0068dc <_vfprintf_r+0x147c>
1a0068d6:	f01b 0f01 	tst.w	fp, #1
1a0068da:	d002      	beq.n	1a0068e2 <_vfprintf_r+0x1482>
1a0068dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0068de:	3301      	adds	r3, #1
1a0068e0:	e7de      	b.n	1a0068a0 <_vfprintf_r+0x1440>
1a0068e2:	2301      	movs	r3, #1
1a0068e4:	e753      	b.n	1a00678e <_vfprintf_r+0x132e>
1a0068e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
1a0068e8:	f899 6001 	ldrb.w	r6, [r9, #1]
1a0068ec:	6823      	ldr	r3, [r4, #0]
1a0068ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
1a0068f2:	9304      	str	r3, [sp, #16]
1a0068f4:	4623      	mov	r3, r4
1a0068f6:	3304      	adds	r3, #4
1a0068f8:	4681      	mov	r9, r0
1a0068fa:	930a      	str	r3, [sp, #40]	; 0x28
1a0068fc:	f7fe be26 	b.w	1a00554c <_vfprintf_r+0xec>
1a006900:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
1a006904:	f7ff b9c4 	b.w	1a005c90 <_vfprintf_r+0x830>
1a006908:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
1a00690c:	f7ff b87f 	b.w	1a005a0e <_vfprintf_r+0x5ae>
1a006910:	f10d 0376 	add.w	r3, sp, #118	; 0x76
1a006914:	e697      	b.n	1a006646 <_vfprintf_r+0x11e6>
1a006916:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
1a00691a:	f7ff b965 	b.w	1a005be8 <_vfprintf_r+0x788>
1a00691e:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
1a006922:	f7ff b997 	b.w	1a005c54 <_vfprintf_r+0x7f4>
1a006926:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
1a00692a:	f7ff b8fd 	b.w	1a005b28 <_vfprintf_r+0x6c8>
1a00692e:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
1a006932:	f7ff b81a 	b.w	1a00596a <_vfprintf_r+0x50a>
1a006936:	bf00      	nop
1a006938:	1a00a2c0 	.word	0x1a00a2c0
1a00693c:	1a00a2dc 	.word	0x1a00a2dc
1a006940:	1a00a2d8 	.word	0x1a00a2d8

1a006944 <vfprintf>:
1a006944:	b410      	push	{r4}
1a006946:	4c04      	ldr	r4, [pc, #16]	; (1a006958 <vfprintf+0x14>)
1a006948:	4613      	mov	r3, r2
1a00694a:	460a      	mov	r2, r1
1a00694c:	4601      	mov	r1, r0
1a00694e:	6820      	ldr	r0, [r4, #0]
1a006950:	f85d 4b04 	ldr.w	r4, [sp], #4
1a006954:	f7fe bd84 	b.w	1a005460 <_vfprintf_r>
1a006958:	10000040 	.word	0x10000040

1a00695c <__sbprintf>:
1a00695c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00695e:	460c      	mov	r4, r1
1a006960:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
1a006964:	8989      	ldrh	r1, [r1, #12]
1a006966:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a006968:	89e5      	ldrh	r5, [r4, #14]
1a00696a:	9619      	str	r6, [sp, #100]	; 0x64
1a00696c:	f021 0102 	bic.w	r1, r1, #2
1a006970:	6a66      	ldr	r6, [r4, #36]	; 0x24
1a006972:	f8ad 500e 	strh.w	r5, [sp, #14]
1a006976:	2500      	movs	r5, #0
1a006978:	69e7      	ldr	r7, [r4, #28]
1a00697a:	f8ad 100c 	strh.w	r1, [sp, #12]
1a00697e:	9609      	str	r6, [sp, #36]	; 0x24
1a006980:	9506      	str	r5, [sp, #24]
1a006982:	ae1a      	add	r6, sp, #104	; 0x68
1a006984:	f44f 6580 	mov.w	r5, #1024	; 0x400
1a006988:	4669      	mov	r1, sp
1a00698a:	9600      	str	r6, [sp, #0]
1a00698c:	9604      	str	r6, [sp, #16]
1a00698e:	9502      	str	r5, [sp, #8]
1a006990:	9505      	str	r5, [sp, #20]
1a006992:	9707      	str	r7, [sp, #28]
1a006994:	4606      	mov	r6, r0
1a006996:	f7fe fd63 	bl	1a005460 <_vfprintf_r>
1a00699a:	1e05      	subs	r5, r0, #0
1a00699c:	db07      	blt.n	1a0069ae <__sbprintf+0x52>
1a00699e:	4630      	mov	r0, r6
1a0069a0:	4669      	mov	r1, sp
1a0069a2:	f7fd fdc7 	bl	1a004534 <_fflush_r>
1a0069a6:	2800      	cmp	r0, #0
1a0069a8:	bf18      	it	ne
1a0069aa:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
1a0069ae:	f8bd 300c 	ldrh.w	r3, [sp, #12]
1a0069b2:	065b      	lsls	r3, r3, #25
1a0069b4:	d503      	bpl.n	1a0069be <__sbprintf+0x62>
1a0069b6:	89a3      	ldrh	r3, [r4, #12]
1a0069b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0069bc:	81a3      	strh	r3, [r4, #12]
1a0069be:	4628      	mov	r0, r5
1a0069c0:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
1a0069c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0069c6:	bf00      	nop

1a0069c8 <__swsetup_r>:
1a0069c8:	b538      	push	{r3, r4, r5, lr}
1a0069ca:	4b30      	ldr	r3, [pc, #192]	; (1a006a8c <__swsetup_r+0xc4>)
1a0069cc:	681b      	ldr	r3, [r3, #0]
1a0069ce:	4605      	mov	r5, r0
1a0069d0:	460c      	mov	r4, r1
1a0069d2:	b113      	cbz	r3, 1a0069da <__swsetup_r+0x12>
1a0069d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1a0069d6:	2a00      	cmp	r2, #0
1a0069d8:	d038      	beq.n	1a006a4c <__swsetup_r+0x84>
1a0069da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a0069de:	b293      	uxth	r3, r2
1a0069e0:	0718      	lsls	r0, r3, #28
1a0069e2:	d50c      	bpl.n	1a0069fe <__swsetup_r+0x36>
1a0069e4:	6920      	ldr	r0, [r4, #16]
1a0069e6:	b1a8      	cbz	r0, 1a006a14 <__swsetup_r+0x4c>
1a0069e8:	f013 0201 	ands.w	r2, r3, #1
1a0069ec:	d01e      	beq.n	1a006a2c <__swsetup_r+0x64>
1a0069ee:	6963      	ldr	r3, [r4, #20]
1a0069f0:	2200      	movs	r2, #0
1a0069f2:	425b      	negs	r3, r3
1a0069f4:	61a3      	str	r3, [r4, #24]
1a0069f6:	60a2      	str	r2, [r4, #8]
1a0069f8:	b1f0      	cbz	r0, 1a006a38 <__swsetup_r+0x70>
1a0069fa:	2000      	movs	r0, #0
1a0069fc:	bd38      	pop	{r3, r4, r5, pc}
1a0069fe:	06d9      	lsls	r1, r3, #27
1a006a00:	d53c      	bpl.n	1a006a7c <__swsetup_r+0xb4>
1a006a02:	0758      	lsls	r0, r3, #29
1a006a04:	d426      	bmi.n	1a006a54 <__swsetup_r+0x8c>
1a006a06:	6920      	ldr	r0, [r4, #16]
1a006a08:	f042 0308 	orr.w	r3, r2, #8
1a006a0c:	81a3      	strh	r3, [r4, #12]
1a006a0e:	b29b      	uxth	r3, r3
1a006a10:	2800      	cmp	r0, #0
1a006a12:	d1e9      	bne.n	1a0069e8 <__swsetup_r+0x20>
1a006a14:	f403 7220 	and.w	r2, r3, #640	; 0x280
1a006a18:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
1a006a1c:	d0e4      	beq.n	1a0069e8 <__swsetup_r+0x20>
1a006a1e:	4628      	mov	r0, r5
1a006a20:	4621      	mov	r1, r4
1a006a22:	f001 f9d5 	bl	1a007dd0 <__smakebuf_r>
1a006a26:	89a3      	ldrh	r3, [r4, #12]
1a006a28:	6920      	ldr	r0, [r4, #16]
1a006a2a:	e7dd      	b.n	1a0069e8 <__swsetup_r+0x20>
1a006a2c:	0799      	lsls	r1, r3, #30
1a006a2e:	bf58      	it	pl
1a006a30:	6962      	ldrpl	r2, [r4, #20]
1a006a32:	60a2      	str	r2, [r4, #8]
1a006a34:	2800      	cmp	r0, #0
1a006a36:	d1e0      	bne.n	1a0069fa <__swsetup_r+0x32>
1a006a38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006a3c:	061a      	lsls	r2, r3, #24
1a006a3e:	d5dd      	bpl.n	1a0069fc <__swsetup_r+0x34>
1a006a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a006a44:	81a3      	strh	r3, [r4, #12]
1a006a46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a006a4a:	bd38      	pop	{r3, r4, r5, pc}
1a006a4c:	4618      	mov	r0, r3
1a006a4e:	f7fd fe83 	bl	1a004758 <__sinit>
1a006a52:	e7c2      	b.n	1a0069da <__swsetup_r+0x12>
1a006a54:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a006a56:	b151      	cbz	r1, 1a006a6e <__swsetup_r+0xa6>
1a006a58:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a006a5c:	4299      	cmp	r1, r3
1a006a5e:	d004      	beq.n	1a006a6a <__swsetup_r+0xa2>
1a006a60:	4628      	mov	r0, r5
1a006a62:	f7fd fee9 	bl	1a004838 <_free_r>
1a006a66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a006a6a:	2300      	movs	r3, #0
1a006a6c:	6323      	str	r3, [r4, #48]	; 0x30
1a006a6e:	2300      	movs	r3, #0
1a006a70:	6920      	ldr	r0, [r4, #16]
1a006a72:	6063      	str	r3, [r4, #4]
1a006a74:	f022 0224 	bic.w	r2, r2, #36	; 0x24
1a006a78:	6020      	str	r0, [r4, #0]
1a006a7a:	e7c5      	b.n	1a006a08 <__swsetup_r+0x40>
1a006a7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
1a006a80:	2309      	movs	r3, #9
1a006a82:	602b      	str	r3, [r5, #0]
1a006a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a006a88:	81a2      	strh	r2, [r4, #12]
1a006a8a:	bd38      	pop	{r3, r4, r5, pc}
1a006a8c:	10000040 	.word	0x10000040

1a006a90 <quorem>:
1a006a90:	6902      	ldr	r2, [r0, #16]
1a006a92:	690b      	ldr	r3, [r1, #16]
1a006a94:	4293      	cmp	r3, r2
1a006a96:	f300 808d 	bgt.w	1a006bb4 <quorem+0x124>
1a006a9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006a9e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
1a006aa2:	f101 0714 	add.w	r7, r1, #20
1a006aa6:	f100 0b14 	add.w	fp, r0, #20
1a006aaa:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
1a006aae:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
1a006ab2:	ea4f 0488 	mov.w	r4, r8, lsl #2
1a006ab6:	b083      	sub	sp, #12
1a006ab8:	3201      	adds	r2, #1
1a006aba:	fbb3 f9f2 	udiv	r9, r3, r2
1a006abe:	eb0b 0304 	add.w	r3, fp, r4
1a006ac2:	9400      	str	r4, [sp, #0]
1a006ac4:	eb07 0a04 	add.w	sl, r7, r4
1a006ac8:	9301      	str	r3, [sp, #4]
1a006aca:	f1b9 0f00 	cmp.w	r9, #0
1a006ace:	d039      	beq.n	1a006b44 <quorem+0xb4>
1a006ad0:	2500      	movs	r5, #0
1a006ad2:	462e      	mov	r6, r5
1a006ad4:	46bc      	mov	ip, r7
1a006ad6:	46de      	mov	lr, fp
1a006ad8:	f85c 4b04 	ldr.w	r4, [ip], #4
1a006adc:	f8de 3000 	ldr.w	r3, [lr]
1a006ae0:	b2a2      	uxth	r2, r4
1a006ae2:	fb09 5502 	mla	r5, r9, r2, r5
1a006ae6:	0c22      	lsrs	r2, r4, #16
1a006ae8:	0c2c      	lsrs	r4, r5, #16
1a006aea:	fb09 4202 	mla	r2, r9, r2, r4
1a006aee:	b2ad      	uxth	r5, r5
1a006af0:	1b75      	subs	r5, r6, r5
1a006af2:	b296      	uxth	r6, r2
1a006af4:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
1a006af8:	fa15 f383 	uxtah	r3, r5, r3
1a006afc:	eb06 4623 	add.w	r6, r6, r3, asr #16
1a006b00:	b29b      	uxth	r3, r3
1a006b02:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
1a006b06:	45e2      	cmp	sl, ip
1a006b08:	ea4f 4512 	mov.w	r5, r2, lsr #16
1a006b0c:	f84e 3b04 	str.w	r3, [lr], #4
1a006b10:	ea4f 4626 	mov.w	r6, r6, asr #16
1a006b14:	d2e0      	bcs.n	1a006ad8 <quorem+0x48>
1a006b16:	9b00      	ldr	r3, [sp, #0]
1a006b18:	f85b 3003 	ldr.w	r3, [fp, r3]
1a006b1c:	b993      	cbnz	r3, 1a006b44 <quorem+0xb4>
1a006b1e:	9c01      	ldr	r4, [sp, #4]
1a006b20:	1f23      	subs	r3, r4, #4
1a006b22:	459b      	cmp	fp, r3
1a006b24:	d20c      	bcs.n	1a006b40 <quorem+0xb0>
1a006b26:	f854 3c04 	ldr.w	r3, [r4, #-4]
1a006b2a:	b94b      	cbnz	r3, 1a006b40 <quorem+0xb0>
1a006b2c:	f1a4 0308 	sub.w	r3, r4, #8
1a006b30:	e002      	b.n	1a006b38 <quorem+0xa8>
1a006b32:	681a      	ldr	r2, [r3, #0]
1a006b34:	3b04      	subs	r3, #4
1a006b36:	b91a      	cbnz	r2, 1a006b40 <quorem+0xb0>
1a006b38:	459b      	cmp	fp, r3
1a006b3a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
1a006b3e:	d3f8      	bcc.n	1a006b32 <quorem+0xa2>
1a006b40:	f8c0 8010 	str.w	r8, [r0, #16]
1a006b44:	4604      	mov	r4, r0
1a006b46:	f001 fc8b 	bl	1a008460 <__mcmp>
1a006b4a:	2800      	cmp	r0, #0
1a006b4c:	db2e      	blt.n	1a006bac <quorem+0x11c>
1a006b4e:	f109 0901 	add.w	r9, r9, #1
1a006b52:	465d      	mov	r5, fp
1a006b54:	2300      	movs	r3, #0
1a006b56:	f857 1b04 	ldr.w	r1, [r7], #4
1a006b5a:	6828      	ldr	r0, [r5, #0]
1a006b5c:	b28a      	uxth	r2, r1
1a006b5e:	1a9a      	subs	r2, r3, r2
1a006b60:	0c0b      	lsrs	r3, r1, #16
1a006b62:	fa12 f280 	uxtah	r2, r2, r0
1a006b66:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
1a006b6a:	eb03 4322 	add.w	r3, r3, r2, asr #16
1a006b6e:	b292      	uxth	r2, r2
1a006b70:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a006b74:	45ba      	cmp	sl, r7
1a006b76:	f845 2b04 	str.w	r2, [r5], #4
1a006b7a:	ea4f 4323 	mov.w	r3, r3, asr #16
1a006b7e:	d2ea      	bcs.n	1a006b56 <quorem+0xc6>
1a006b80:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
1a006b84:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
1a006b88:	b982      	cbnz	r2, 1a006bac <quorem+0x11c>
1a006b8a:	1f1a      	subs	r2, r3, #4
1a006b8c:	4593      	cmp	fp, r2
1a006b8e:	d20b      	bcs.n	1a006ba8 <quorem+0x118>
1a006b90:	f853 2c04 	ldr.w	r2, [r3, #-4]
1a006b94:	b942      	cbnz	r2, 1a006ba8 <quorem+0x118>
1a006b96:	3b08      	subs	r3, #8
1a006b98:	e002      	b.n	1a006ba0 <quorem+0x110>
1a006b9a:	681a      	ldr	r2, [r3, #0]
1a006b9c:	3b04      	subs	r3, #4
1a006b9e:	b91a      	cbnz	r2, 1a006ba8 <quorem+0x118>
1a006ba0:	459b      	cmp	fp, r3
1a006ba2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
1a006ba6:	d3f8      	bcc.n	1a006b9a <quorem+0x10a>
1a006ba8:	f8c4 8010 	str.w	r8, [r4, #16]
1a006bac:	4648      	mov	r0, r9
1a006bae:	b003      	add	sp, #12
1a006bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006bb4:	2000      	movs	r0, #0
1a006bb6:	4770      	bx	lr

1a006bb8 <_dtoa_r>:
1a006bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006bbc:	ec57 6b10 	vmov	r6, r7, d0
1a006bc0:	b097      	sub	sp, #92	; 0x5c
1a006bc2:	6c05      	ldr	r5, [r0, #64]	; 0x40
1a006bc4:	9102      	str	r1, [sp, #8]
1a006bc6:	4604      	mov	r4, r0
1a006bc8:	4693      	mov	fp, r2
1a006bca:	9303      	str	r3, [sp, #12]
1a006bcc:	e9cd 6700 	strd	r6, r7, [sp]
1a006bd0:	b14d      	cbz	r5, 1a006be6 <_dtoa_r+0x2e>
1a006bd2:	6c42      	ldr	r2, [r0, #68]	; 0x44
1a006bd4:	606a      	str	r2, [r5, #4]
1a006bd6:	2301      	movs	r3, #1
1a006bd8:	4093      	lsls	r3, r2
1a006bda:	60ab      	str	r3, [r5, #8]
1a006bdc:	4629      	mov	r1, r5
1a006bde:	f001 fa19 	bl	1a008014 <_Bfree>
1a006be2:	2300      	movs	r3, #0
1a006be4:	6423      	str	r3, [r4, #64]	; 0x40
1a006be6:	e9dd 2300 	ldrd	r2, r3, [sp]
1a006bea:	2b00      	cmp	r3, #0
1a006bec:	4699      	mov	r9, r3
1a006bee:	db38      	blt.n	1a006c62 <_dtoa_r+0xaa>
1a006bf0:	9a20      	ldr	r2, [sp, #128]	; 0x80
1a006bf2:	2300      	movs	r3, #0
1a006bf4:	6013      	str	r3, [r2, #0]
1a006bf6:	4ba0      	ldr	r3, [pc, #640]	; (1a006e78 <_dtoa_r+0x2c0>)
1a006bf8:	ea33 0309 	bics.w	r3, r3, r9
1a006bfc:	d017      	beq.n	1a006c2e <_dtoa_r+0x76>
1a006bfe:	e9dd 6700 	ldrd	r6, r7, [sp]
1a006c02:	2200      	movs	r2, #0
1a006c04:	2300      	movs	r3, #0
1a006c06:	4630      	mov	r0, r6
1a006c08:	4639      	mov	r1, r7
1a006c0a:	f7fd f9b3 	bl	1a003f74 <__aeabi_dcmpeq>
1a006c0e:	4680      	mov	r8, r0
1a006c10:	2800      	cmp	r0, #0
1a006c12:	d02f      	beq.n	1a006c74 <_dtoa_r+0xbc>
1a006c14:	9a03      	ldr	r2, [sp, #12]
1a006c16:	2301      	movs	r3, #1
1a006c18:	6013      	str	r3, [r2, #0]
1a006c1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a006c1c:	2b00      	cmp	r3, #0
1a006c1e:	f000 80c4 	beq.w	1a006daa <_dtoa_r+0x1f2>
1a006c22:	4896      	ldr	r0, [pc, #600]	; (1a006e7c <_dtoa_r+0x2c4>)
1a006c24:	6018      	str	r0, [r3, #0]
1a006c26:	3801      	subs	r0, #1
1a006c28:	b017      	add	sp, #92	; 0x5c
1a006c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006c2e:	9a03      	ldr	r2, [sp, #12]
1a006c30:	f242 730f 	movw	r3, #9999	; 0x270f
1a006c34:	6013      	str	r3, [r2, #0]
1a006c36:	9b00      	ldr	r3, [sp, #0]
1a006c38:	b96b      	cbnz	r3, 1a006c56 <_dtoa_r+0x9e>
1a006c3a:	f3c9 0313 	ubfx	r3, r9, #0, #20
1a006c3e:	b953      	cbnz	r3, 1a006c56 <_dtoa_r+0x9e>
1a006c40:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a006c42:	488f      	ldr	r0, [pc, #572]	; (1a006e80 <_dtoa_r+0x2c8>)
1a006c44:	2b00      	cmp	r3, #0
1a006c46:	d0ef      	beq.n	1a006c28 <_dtoa_r+0x70>
1a006c48:	f100 0308 	add.w	r3, r0, #8
1a006c4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a006c4e:	6013      	str	r3, [r2, #0]
1a006c50:	b017      	add	sp, #92	; 0x5c
1a006c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006c56:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a006c58:	488a      	ldr	r0, [pc, #552]	; (1a006e84 <_dtoa_r+0x2cc>)
1a006c5a:	2b00      	cmp	r3, #0
1a006c5c:	d0e4      	beq.n	1a006c28 <_dtoa_r+0x70>
1a006c5e:	1cc3      	adds	r3, r0, #3
1a006c60:	e7f4      	b.n	1a006c4c <_dtoa_r+0x94>
1a006c62:	9a01      	ldr	r2, [sp, #4]
1a006c64:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
1a006c68:	9a20      	ldr	r2, [sp, #128]	; 0x80
1a006c6a:	f8cd 9004 	str.w	r9, [sp, #4]
1a006c6e:	2301      	movs	r3, #1
1a006c70:	6013      	str	r3, [r2, #0]
1a006c72:	e7c0      	b.n	1a006bf6 <_dtoa_r+0x3e>
1a006c74:	aa14      	add	r2, sp, #80	; 0x50
1a006c76:	a915      	add	r1, sp, #84	; 0x54
1a006c78:	ec47 6b10 	vmov	d0, r6, r7
1a006c7c:	4620      	mov	r0, r4
1a006c7e:	f001 fd1b 	bl	1a0086b8 <__d2b>
1a006c82:	ea5f 5519 	movs.w	r5, r9, lsr #20
1a006c86:	4682      	mov	sl, r0
1a006c88:	d073      	beq.n	1a006d72 <_dtoa_r+0x1ba>
1a006c8a:	f3c7 0313 	ubfx	r3, r7, #0, #20
1a006c8e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
1a006c92:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
1a006c96:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
1a006c9a:	4630      	mov	r0, r6
1a006c9c:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
1a006ca0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
1a006ca4:	2200      	movs	r2, #0
1a006ca6:	4b78      	ldr	r3, [pc, #480]	; (1a006e88 <_dtoa_r+0x2d0>)
1a006ca8:	f7fc fd48 	bl	1a00373c <__aeabi_dsub>
1a006cac:	a36c      	add	r3, pc, #432	; (adr r3, 1a006e60 <_dtoa_r+0x2a8>)
1a006cae:	e9d3 2300 	ldrd	r2, r3, [r3]
1a006cb2:	f7fc fef7 	bl	1a003aa4 <__aeabi_dmul>
1a006cb6:	a36c      	add	r3, pc, #432	; (adr r3, 1a006e68 <_dtoa_r+0x2b0>)
1a006cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
1a006cbc:	f7fc fd40 	bl	1a003740 <__adddf3>
1a006cc0:	4606      	mov	r6, r0
1a006cc2:	4628      	mov	r0, r5
1a006cc4:	460f      	mov	r7, r1
1a006cc6:	f7fc fe87 	bl	1a0039d8 <__aeabi_i2d>
1a006cca:	a369      	add	r3, pc, #420	; (adr r3, 1a006e70 <_dtoa_r+0x2b8>)
1a006ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
1a006cd0:	f7fc fee8 	bl	1a003aa4 <__aeabi_dmul>
1a006cd4:	4602      	mov	r2, r0
1a006cd6:	460b      	mov	r3, r1
1a006cd8:	4630      	mov	r0, r6
1a006cda:	4639      	mov	r1, r7
1a006cdc:	f7fc fd30 	bl	1a003740 <__adddf3>
1a006ce0:	4606      	mov	r6, r0
1a006ce2:	460f      	mov	r7, r1
1a006ce4:	f7fd f98e 	bl	1a004004 <__aeabi_d2iz>
1a006ce8:	2200      	movs	r2, #0
1a006cea:	9004      	str	r0, [sp, #16]
1a006cec:	2300      	movs	r3, #0
1a006cee:	4630      	mov	r0, r6
1a006cf0:	4639      	mov	r1, r7
1a006cf2:	f7fd f949 	bl	1a003f88 <__aeabi_dcmplt>
1a006cf6:	2800      	cmp	r0, #0
1a006cf8:	f040 816f 	bne.w	1a006fda <_dtoa_r+0x422>
1a006cfc:	9e04      	ldr	r6, [sp, #16]
1a006cfe:	2e16      	cmp	r6, #22
1a006d00:	f200 8159 	bhi.w	1a006fb6 <_dtoa_r+0x3fe>
1a006d04:	4b61      	ldr	r3, [pc, #388]	; (1a006e8c <_dtoa_r+0x2d4>)
1a006d06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
1a006d0a:	e9d3 0100 	ldrd	r0, r1, [r3]
1a006d0e:	e9dd 2300 	ldrd	r2, r3, [sp]
1a006d12:	f7fd f957 	bl	1a003fc4 <__aeabi_dcmpgt>
1a006d16:	2800      	cmp	r0, #0
1a006d18:	f000 81c4 	beq.w	1a0070a4 <_dtoa_r+0x4ec>
1a006d1c:	1e73      	subs	r3, r6, #1
1a006d1e:	9304      	str	r3, [sp, #16]
1a006d20:	2300      	movs	r3, #0
1a006d22:	930c      	str	r3, [sp, #48]	; 0x30
1a006d24:	eba8 0505 	sub.w	r5, r8, r5
1a006d28:	1e6b      	subs	r3, r5, #1
1a006d2a:	9305      	str	r3, [sp, #20]
1a006d2c:	f100 814f 	bmi.w	1a006fce <_dtoa_r+0x416>
1a006d30:	2300      	movs	r3, #0
1a006d32:	9306      	str	r3, [sp, #24]
1a006d34:	9b04      	ldr	r3, [sp, #16]
1a006d36:	2b00      	cmp	r3, #0
1a006d38:	f2c0 8140 	blt.w	1a006fbc <_dtoa_r+0x404>
1a006d3c:	9a05      	ldr	r2, [sp, #20]
1a006d3e:	930b      	str	r3, [sp, #44]	; 0x2c
1a006d40:	4611      	mov	r1, r2
1a006d42:	4419      	add	r1, r3
1a006d44:	2300      	movs	r3, #0
1a006d46:	9105      	str	r1, [sp, #20]
1a006d48:	930a      	str	r3, [sp, #40]	; 0x28
1a006d4a:	9b02      	ldr	r3, [sp, #8]
1a006d4c:	2b09      	cmp	r3, #9
1a006d4e:	d82e      	bhi.n	1a006dae <_dtoa_r+0x1f6>
1a006d50:	2b05      	cmp	r3, #5
1a006d52:	f340 8651 	ble.w	1a0079f8 <_dtoa_r+0xe40>
1a006d56:	3b04      	subs	r3, #4
1a006d58:	9302      	str	r3, [sp, #8]
1a006d5a:	2700      	movs	r7, #0
1a006d5c:	9b02      	ldr	r3, [sp, #8]
1a006d5e:	3b02      	subs	r3, #2
1a006d60:	2b03      	cmp	r3, #3
1a006d62:	f200 8633 	bhi.w	1a0079cc <_dtoa_r+0xe14>
1a006d66:	e8df f013 	tbh	[pc, r3, lsl #1]
1a006d6a:	03d6      	.short	0x03d6
1a006d6c:	03e302cb 	.word	0x03e302cb
1a006d70:	0464      	.short	0x0464
1a006d72:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
1a006d76:	9d15      	ldr	r5, [sp, #84]	; 0x54
1a006d78:	4445      	add	r5, r8
1a006d7a:	f205 4332 	addw	r3, r5, #1074	; 0x432
1a006d7e:	2b20      	cmp	r3, #32
1a006d80:	f340 818a 	ble.w	1a007098 <_dtoa_r+0x4e0>
1a006d84:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
1a006d88:	fa09 f903 	lsl.w	r9, r9, r3
1a006d8c:	9b00      	ldr	r3, [sp, #0]
1a006d8e:	f205 4012 	addw	r0, r5, #1042	; 0x412
1a006d92:	fa23 f000 	lsr.w	r0, r3, r0
1a006d96:	ea40 0009 	orr.w	r0, r0, r9
1a006d9a:	f7fc fe0d 	bl	1a0039b8 <__aeabi_ui2d>
1a006d9e:	2301      	movs	r3, #1
1a006da0:	3d01      	subs	r5, #1
1a006da2:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
1a006da6:	9310      	str	r3, [sp, #64]	; 0x40
1a006da8:	e77c      	b.n	1a006ca4 <_dtoa_r+0xec>
1a006daa:	4839      	ldr	r0, [pc, #228]	; (1a006e90 <_dtoa_r+0x2d8>)
1a006dac:	e73c      	b.n	1a006c28 <_dtoa_r+0x70>
1a006dae:	2100      	movs	r1, #0
1a006db0:	6461      	str	r1, [r4, #68]	; 0x44
1a006db2:	4620      	mov	r0, r4
1a006db4:	468b      	mov	fp, r1
1a006db6:	f001 f907 	bl	1a007fc8 <_Balloc>
1a006dba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a006dbe:	9308      	str	r3, [sp, #32]
1a006dc0:	930d      	str	r3, [sp, #52]	; 0x34
1a006dc2:	2301      	movs	r3, #1
1a006dc4:	9007      	str	r0, [sp, #28]
1a006dc6:	6420      	str	r0, [r4, #64]	; 0x40
1a006dc8:	f8cd b008 	str.w	fp, [sp, #8]
1a006dcc:	9309      	str	r3, [sp, #36]	; 0x24
1a006dce:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a006dd0:	2b00      	cmp	r3, #0
1a006dd2:	f2c0 80d0 	blt.w	1a006f76 <_dtoa_r+0x3be>
1a006dd6:	9a04      	ldr	r2, [sp, #16]
1a006dd8:	2a0e      	cmp	r2, #14
1a006dda:	f300 80cc 	bgt.w	1a006f76 <_dtoa_r+0x3be>
1a006dde:	4b2b      	ldr	r3, [pc, #172]	; (1a006e8c <_dtoa_r+0x2d4>)
1a006de0:	f1bb 0f00 	cmp.w	fp, #0
1a006de4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a006de8:	e9d3 8900 	ldrd	r8, r9, [r3]
1a006dec:	f2c0 83be 	blt.w	1a00756c <_dtoa_r+0x9b4>
1a006df0:	e9dd 6700 	ldrd	r6, r7, [sp]
1a006df4:	4642      	mov	r2, r8
1a006df6:	464b      	mov	r3, r9
1a006df8:	4630      	mov	r0, r6
1a006dfa:	4639      	mov	r1, r7
1a006dfc:	f7fc ff7c 	bl	1a003cf8 <__aeabi_ddiv>
1a006e00:	f7fd f900 	bl	1a004004 <__aeabi_d2iz>
1a006e04:	4683      	mov	fp, r0
1a006e06:	f7fc fde7 	bl	1a0039d8 <__aeabi_i2d>
1a006e0a:	4642      	mov	r2, r8
1a006e0c:	464b      	mov	r3, r9
1a006e0e:	f7fc fe49 	bl	1a003aa4 <__aeabi_dmul>
1a006e12:	460b      	mov	r3, r1
1a006e14:	4602      	mov	r2, r0
1a006e16:	4639      	mov	r1, r7
1a006e18:	4630      	mov	r0, r6
1a006e1a:	f7fc fc8f 	bl	1a00373c <__aeabi_dsub>
1a006e1e:	9d07      	ldr	r5, [sp, #28]
1a006e20:	f10b 0330 	add.w	r3, fp, #48	; 0x30
1a006e24:	702b      	strb	r3, [r5, #0]
1a006e26:	9b08      	ldr	r3, [sp, #32]
1a006e28:	2b01      	cmp	r3, #1
1a006e2a:	4606      	mov	r6, r0
1a006e2c:	460f      	mov	r7, r1
1a006e2e:	f105 0501 	add.w	r5, r5, #1
1a006e32:	d061      	beq.n	1a006ef8 <_dtoa_r+0x340>
1a006e34:	2200      	movs	r2, #0
1a006e36:	4b17      	ldr	r3, [pc, #92]	; (1a006e94 <_dtoa_r+0x2dc>)
1a006e38:	f7fc fe34 	bl	1a003aa4 <__aeabi_dmul>
1a006e3c:	2200      	movs	r2, #0
1a006e3e:	2300      	movs	r3, #0
1a006e40:	4606      	mov	r6, r0
1a006e42:	460f      	mov	r7, r1
1a006e44:	f7fd f896 	bl	1a003f74 <__aeabi_dcmpeq>
1a006e48:	2800      	cmp	r0, #0
1a006e4a:	f040 8081 	bne.w	1a006f50 <_dtoa_r+0x398>
1a006e4e:	f8cd a000 	str.w	sl, [sp]
1a006e52:	9402      	str	r4, [sp, #8]
1a006e54:	f8dd a01c 	ldr.w	sl, [sp, #28]
1a006e58:	9c08      	ldr	r4, [sp, #32]
1a006e5a:	e028      	b.n	1a006eae <_dtoa_r+0x2f6>
1a006e5c:	f3af 8000 	nop.w
1a006e60:	636f4361 	.word	0x636f4361
1a006e64:	3fd287a7 	.word	0x3fd287a7
1a006e68:	8b60c8b3 	.word	0x8b60c8b3
1a006e6c:	3fc68a28 	.word	0x3fc68a28
1a006e70:	509f79fb 	.word	0x509f79fb
1a006e74:	3fd34413 	.word	0x3fd34413
1a006e78:	7ff00000 	.word	0x7ff00000
1a006e7c:	1a00a311 	.word	0x1a00a311
1a006e80:	1a00a314 	.word	0x1a00a314
1a006e84:	1a00a320 	.word	0x1a00a320
1a006e88:	3ff80000 	.word	0x3ff80000
1a006e8c:	1a00a340 	.word	0x1a00a340
1a006e90:	1a00a310 	.word	0x1a00a310
1a006e94:	40240000 	.word	0x40240000
1a006e98:	f7fc fe04 	bl	1a003aa4 <__aeabi_dmul>
1a006e9c:	2200      	movs	r2, #0
1a006e9e:	2300      	movs	r3, #0
1a006ea0:	4606      	mov	r6, r0
1a006ea2:	460f      	mov	r7, r1
1a006ea4:	f7fd f866 	bl	1a003f74 <__aeabi_dcmpeq>
1a006ea8:	2800      	cmp	r0, #0
1a006eaa:	f040 83c5 	bne.w	1a007638 <_dtoa_r+0xa80>
1a006eae:	4642      	mov	r2, r8
1a006eb0:	464b      	mov	r3, r9
1a006eb2:	4630      	mov	r0, r6
1a006eb4:	4639      	mov	r1, r7
1a006eb6:	f7fc ff1f 	bl	1a003cf8 <__aeabi_ddiv>
1a006eba:	f7fd f8a3 	bl	1a004004 <__aeabi_d2iz>
1a006ebe:	4683      	mov	fp, r0
1a006ec0:	f7fc fd8a 	bl	1a0039d8 <__aeabi_i2d>
1a006ec4:	4642      	mov	r2, r8
1a006ec6:	464b      	mov	r3, r9
1a006ec8:	f7fc fdec 	bl	1a003aa4 <__aeabi_dmul>
1a006ecc:	4602      	mov	r2, r0
1a006ece:	460b      	mov	r3, r1
1a006ed0:	4630      	mov	r0, r6
1a006ed2:	4639      	mov	r1, r7
1a006ed4:	f7fc fc32 	bl	1a00373c <__aeabi_dsub>
1a006ed8:	f10b 0e30 	add.w	lr, fp, #48	; 0x30
1a006edc:	f805 eb01 	strb.w	lr, [r5], #1
1a006ee0:	eba5 0e0a 	sub.w	lr, r5, sl
1a006ee4:	45a6      	cmp	lr, r4
1a006ee6:	4606      	mov	r6, r0
1a006ee8:	460f      	mov	r7, r1
1a006eea:	f04f 0200 	mov.w	r2, #0
1a006eee:	4b6e      	ldr	r3, [pc, #440]	; (1a0070a8 <_dtoa_r+0x4f0>)
1a006ef0:	d1d2      	bne.n	1a006e98 <_dtoa_r+0x2e0>
1a006ef2:	f8dd a000 	ldr.w	sl, [sp]
1a006ef6:	9c02      	ldr	r4, [sp, #8]
1a006ef8:	4632      	mov	r2, r6
1a006efa:	463b      	mov	r3, r7
1a006efc:	4630      	mov	r0, r6
1a006efe:	4639      	mov	r1, r7
1a006f00:	f7fc fc1e 	bl	1a003740 <__adddf3>
1a006f04:	4606      	mov	r6, r0
1a006f06:	460f      	mov	r7, r1
1a006f08:	4602      	mov	r2, r0
1a006f0a:	460b      	mov	r3, r1
1a006f0c:	4640      	mov	r0, r8
1a006f0e:	4649      	mov	r1, r9
1a006f10:	f7fd f83a 	bl	1a003f88 <__aeabi_dcmplt>
1a006f14:	b948      	cbnz	r0, 1a006f2a <_dtoa_r+0x372>
1a006f16:	4632      	mov	r2, r6
1a006f18:	463b      	mov	r3, r7
1a006f1a:	4640      	mov	r0, r8
1a006f1c:	4649      	mov	r1, r9
1a006f1e:	f7fd f829 	bl	1a003f74 <__aeabi_dcmpeq>
1a006f22:	b1a8      	cbz	r0, 1a006f50 <_dtoa_r+0x398>
1a006f24:	f01b 0f01 	tst.w	fp, #1
1a006f28:	d012      	beq.n	1a006f50 <_dtoa_r+0x398>
1a006f2a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
1a006f2e:	9a07      	ldr	r2, [sp, #28]
1a006f30:	1e6b      	subs	r3, r5, #1
1a006f32:	e004      	b.n	1a006f3e <_dtoa_r+0x386>
1a006f34:	429a      	cmp	r2, r3
1a006f36:	f000 842d 	beq.w	1a007794 <_dtoa_r+0xbdc>
1a006f3a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
1a006f3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
1a006f42:	f103 0501 	add.w	r5, r3, #1
1a006f46:	d0f5      	beq.n	1a006f34 <_dtoa_r+0x37c>
1a006f48:	f108 0801 	add.w	r8, r8, #1
1a006f4c:	f883 8000 	strb.w	r8, [r3]
1a006f50:	4651      	mov	r1, sl
1a006f52:	4620      	mov	r0, r4
1a006f54:	f001 f85e 	bl	1a008014 <_Bfree>
1a006f58:	2200      	movs	r2, #0
1a006f5a:	9b04      	ldr	r3, [sp, #16]
1a006f5c:	702a      	strb	r2, [r5, #0]
1a006f5e:	9a03      	ldr	r2, [sp, #12]
1a006f60:	3301      	adds	r3, #1
1a006f62:	6013      	str	r3, [r2, #0]
1a006f64:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a006f66:	2b00      	cmp	r3, #0
1a006f68:	f000 83a3 	beq.w	1a0076b2 <_dtoa_r+0xafa>
1a006f6c:	9807      	ldr	r0, [sp, #28]
1a006f6e:	601d      	str	r5, [r3, #0]
1a006f70:	b017      	add	sp, #92	; 0x5c
1a006f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006f76:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a006f78:	2a00      	cmp	r2, #0
1a006f7a:	d040      	beq.n	1a006ffe <_dtoa_r+0x446>
1a006f7c:	9a02      	ldr	r2, [sp, #8]
1a006f7e:	2a01      	cmp	r2, #1
1a006f80:	f340 831c 	ble.w	1a0075bc <_dtoa_r+0xa04>
1a006f84:	9b08      	ldr	r3, [sp, #32]
1a006f86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a006f88:	1e5f      	subs	r7, r3, #1
1a006f8a:	42ba      	cmp	r2, r7
1a006f8c:	f2c0 8394 	blt.w	1a0076b8 <_dtoa_r+0xb00>
1a006f90:	1bd7      	subs	r7, r2, r7
1a006f92:	9b08      	ldr	r3, [sp, #32]
1a006f94:	2b00      	cmp	r3, #0
1a006f96:	f2c0 847e 	blt.w	1a007896 <_dtoa_r+0xcde>
1a006f9a:	9d06      	ldr	r5, [sp, #24]
1a006f9c:	9b08      	ldr	r3, [sp, #32]
1a006f9e:	9a06      	ldr	r2, [sp, #24]
1a006fa0:	441a      	add	r2, r3
1a006fa2:	9206      	str	r2, [sp, #24]
1a006fa4:	9a05      	ldr	r2, [sp, #20]
1a006fa6:	2101      	movs	r1, #1
1a006fa8:	441a      	add	r2, r3
1a006faa:	4620      	mov	r0, r4
1a006fac:	9205      	str	r2, [sp, #20]
1a006fae:	f001 f919 	bl	1a0081e4 <__i2b>
1a006fb2:	4606      	mov	r6, r0
1a006fb4:	e026      	b.n	1a007004 <_dtoa_r+0x44c>
1a006fb6:	2301      	movs	r3, #1
1a006fb8:	930c      	str	r3, [sp, #48]	; 0x30
1a006fba:	e6b3      	b.n	1a006d24 <_dtoa_r+0x16c>
1a006fbc:	9a06      	ldr	r2, [sp, #24]
1a006fbe:	9b04      	ldr	r3, [sp, #16]
1a006fc0:	1ad2      	subs	r2, r2, r3
1a006fc2:	425b      	negs	r3, r3
1a006fc4:	930a      	str	r3, [sp, #40]	; 0x28
1a006fc6:	2300      	movs	r3, #0
1a006fc8:	9206      	str	r2, [sp, #24]
1a006fca:	930b      	str	r3, [sp, #44]	; 0x2c
1a006fcc:	e6bd      	b.n	1a006d4a <_dtoa_r+0x192>
1a006fce:	f1c5 0301 	rsb	r3, r5, #1
1a006fd2:	9306      	str	r3, [sp, #24]
1a006fd4:	2300      	movs	r3, #0
1a006fd6:	9305      	str	r3, [sp, #20]
1a006fd8:	e6ac      	b.n	1a006d34 <_dtoa_r+0x17c>
1a006fda:	f8dd 9010 	ldr.w	r9, [sp, #16]
1a006fde:	4648      	mov	r0, r9
1a006fe0:	f7fc fcfa 	bl	1a0039d8 <__aeabi_i2d>
1a006fe4:	4602      	mov	r2, r0
1a006fe6:	460b      	mov	r3, r1
1a006fe8:	4630      	mov	r0, r6
1a006fea:	4639      	mov	r1, r7
1a006fec:	f7fc ffc2 	bl	1a003f74 <__aeabi_dcmpeq>
1a006ff0:	2800      	cmp	r0, #0
1a006ff2:	f47f ae83 	bne.w	1a006cfc <_dtoa_r+0x144>
1a006ff6:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
1a006ffa:	9304      	str	r3, [sp, #16]
1a006ffc:	e67e      	b.n	1a006cfc <_dtoa_r+0x144>
1a006ffe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
1a007000:	9d06      	ldr	r5, [sp, #24]
1a007002:	9e09      	ldr	r6, [sp, #36]	; 0x24
1a007004:	2d00      	cmp	r5, #0
1a007006:	dd0c      	ble.n	1a007022 <_dtoa_r+0x46a>
1a007008:	9905      	ldr	r1, [sp, #20]
1a00700a:	2900      	cmp	r1, #0
1a00700c:	460b      	mov	r3, r1
1a00700e:	dd08      	ble.n	1a007022 <_dtoa_r+0x46a>
1a007010:	42a9      	cmp	r1, r5
1a007012:	9a06      	ldr	r2, [sp, #24]
1a007014:	bfa8      	it	ge
1a007016:	462b      	movge	r3, r5
1a007018:	1ad2      	subs	r2, r2, r3
1a00701a:	1aed      	subs	r5, r5, r3
1a00701c:	1acb      	subs	r3, r1, r3
1a00701e:	9206      	str	r2, [sp, #24]
1a007020:	9305      	str	r3, [sp, #20]
1a007022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a007024:	b1d3      	cbz	r3, 1a00705c <_dtoa_r+0x4a4>
1a007026:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a007028:	2b00      	cmp	r3, #0
1a00702a:	f000 82c0 	beq.w	1a0075ae <_dtoa_r+0x9f6>
1a00702e:	2f00      	cmp	r7, #0
1a007030:	dd10      	ble.n	1a007054 <_dtoa_r+0x49c>
1a007032:	4631      	mov	r1, r6
1a007034:	463a      	mov	r2, r7
1a007036:	4620      	mov	r0, r4
1a007038:	f001 f970 	bl	1a00831c <__pow5mult>
1a00703c:	4652      	mov	r2, sl
1a00703e:	4601      	mov	r1, r0
1a007040:	4606      	mov	r6, r0
1a007042:	4620      	mov	r0, r4
1a007044:	f001 f8d8 	bl	1a0081f8 <__multiply>
1a007048:	4651      	mov	r1, sl
1a00704a:	4680      	mov	r8, r0
1a00704c:	4620      	mov	r0, r4
1a00704e:	f000 ffe1 	bl	1a008014 <_Bfree>
1a007052:	46c2      	mov	sl, r8
1a007054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a007056:	1bda      	subs	r2, r3, r7
1a007058:	f040 82aa 	bne.w	1a0075b0 <_dtoa_r+0x9f8>
1a00705c:	2101      	movs	r1, #1
1a00705e:	4620      	mov	r0, r4
1a007060:	f001 f8c0 	bl	1a0081e4 <__i2b>
1a007064:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a007066:	2b00      	cmp	r3, #0
1a007068:	4681      	mov	r9, r0
1a00706a:	dd1f      	ble.n	1a0070ac <_dtoa_r+0x4f4>
1a00706c:	4601      	mov	r1, r0
1a00706e:	461a      	mov	r2, r3
1a007070:	4620      	mov	r0, r4
1a007072:	f001 f953 	bl	1a00831c <__pow5mult>
1a007076:	9b02      	ldr	r3, [sp, #8]
1a007078:	2b01      	cmp	r3, #1
1a00707a:	4681      	mov	r9, r0
1a00707c:	f340 825b 	ble.w	1a007536 <_dtoa_r+0x97e>
1a007080:	f04f 0800 	mov.w	r8, #0
1a007084:	f8d9 3010 	ldr.w	r3, [r9, #16]
1a007088:	eb09 0383 	add.w	r3, r9, r3, lsl #2
1a00708c:	6918      	ldr	r0, [r3, #16]
1a00708e:	f001 f859 	bl	1a008144 <__hi0bits>
1a007092:	f1c0 0020 	rsb	r0, r0, #32
1a007096:	e013      	b.n	1a0070c0 <_dtoa_r+0x508>
1a007098:	f1c3 0920 	rsb	r9, r3, #32
1a00709c:	9b00      	ldr	r3, [sp, #0]
1a00709e:	fa03 f009 	lsl.w	r0, r3, r9
1a0070a2:	e67a      	b.n	1a006d9a <_dtoa_r+0x1e2>
1a0070a4:	900c      	str	r0, [sp, #48]	; 0x30
1a0070a6:	e63d      	b.n	1a006d24 <_dtoa_r+0x16c>
1a0070a8:	40240000 	.word	0x40240000
1a0070ac:	9b02      	ldr	r3, [sp, #8]
1a0070ae:	2b01      	cmp	r3, #1
1a0070b0:	f340 828d 	ble.w	1a0075ce <_dtoa_r+0xa16>
1a0070b4:	f04f 0800 	mov.w	r8, #0
1a0070b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0070ba:	2001      	movs	r0, #1
1a0070bc:	2b00      	cmp	r3, #0
1a0070be:	d1e1      	bne.n	1a007084 <_dtoa_r+0x4cc>
1a0070c0:	9a05      	ldr	r2, [sp, #20]
1a0070c2:	4410      	add	r0, r2
1a0070c4:	f010 001f 	ands.w	r0, r0, #31
1a0070c8:	f000 80a1 	beq.w	1a00720e <_dtoa_r+0x656>
1a0070cc:	f1c0 0320 	rsb	r3, r0, #32
1a0070d0:	2b04      	cmp	r3, #4
1a0070d2:	f340 848c 	ble.w	1a0079ee <_dtoa_r+0xe36>
1a0070d6:	9b06      	ldr	r3, [sp, #24]
1a0070d8:	f1c0 001c 	rsb	r0, r0, #28
1a0070dc:	4403      	add	r3, r0
1a0070de:	9306      	str	r3, [sp, #24]
1a0070e0:	4613      	mov	r3, r2
1a0070e2:	4403      	add	r3, r0
1a0070e4:	4405      	add	r5, r0
1a0070e6:	9305      	str	r3, [sp, #20]
1a0070e8:	9b06      	ldr	r3, [sp, #24]
1a0070ea:	2b00      	cmp	r3, #0
1a0070ec:	dd05      	ble.n	1a0070fa <_dtoa_r+0x542>
1a0070ee:	4651      	mov	r1, sl
1a0070f0:	461a      	mov	r2, r3
1a0070f2:	4620      	mov	r0, r4
1a0070f4:	f001 f962 	bl	1a0083bc <__lshift>
1a0070f8:	4682      	mov	sl, r0
1a0070fa:	9b05      	ldr	r3, [sp, #20]
1a0070fc:	2b00      	cmp	r3, #0
1a0070fe:	dd05      	ble.n	1a00710c <_dtoa_r+0x554>
1a007100:	4649      	mov	r1, r9
1a007102:	461a      	mov	r2, r3
1a007104:	4620      	mov	r0, r4
1a007106:	f001 f959 	bl	1a0083bc <__lshift>
1a00710a:	4681      	mov	r9, r0
1a00710c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00710e:	2b00      	cmp	r3, #0
1a007110:	f040 8086 	bne.w	1a007220 <_dtoa_r+0x668>
1a007114:	9b08      	ldr	r3, [sp, #32]
1a007116:	2b00      	cmp	r3, #0
1a007118:	f340 8269 	ble.w	1a0075ee <_dtoa_r+0xa36>
1a00711c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00711e:	2b00      	cmp	r3, #0
1a007120:	f000 8098 	beq.w	1a007254 <_dtoa_r+0x69c>
1a007124:	2d00      	cmp	r5, #0
1a007126:	dd05      	ble.n	1a007134 <_dtoa_r+0x57c>
1a007128:	4631      	mov	r1, r6
1a00712a:	462a      	mov	r2, r5
1a00712c:	4620      	mov	r0, r4
1a00712e:	f001 f945 	bl	1a0083bc <__lshift>
1a007132:	4606      	mov	r6, r0
1a007134:	f1b8 0f00 	cmp.w	r8, #0
1a007138:	f040 8336 	bne.w	1a0077a8 <_dtoa_r+0xbf0>
1a00713c:	46b0      	mov	r8, r6
1a00713e:	9b08      	ldr	r3, [sp, #32]
1a007140:	9a07      	ldr	r2, [sp, #28]
1a007142:	3b01      	subs	r3, #1
1a007144:	18d3      	adds	r3, r2, r3
1a007146:	9308      	str	r3, [sp, #32]
1a007148:	9b00      	ldr	r3, [sp, #0]
1a00714a:	f003 0301 	and.w	r3, r3, #1
1a00714e:	9309      	str	r3, [sp, #36]	; 0x24
1a007150:	4617      	mov	r7, r2
1a007152:	4649      	mov	r1, r9
1a007154:	4650      	mov	r0, sl
1a007156:	f7ff fc9b 	bl	1a006a90 <quorem>
1a00715a:	4631      	mov	r1, r6
1a00715c:	4605      	mov	r5, r0
1a00715e:	4650      	mov	r0, sl
1a007160:	f001 f97e 	bl	1a008460 <__mcmp>
1a007164:	4642      	mov	r2, r8
1a007166:	4649      	mov	r1, r9
1a007168:	4683      	mov	fp, r0
1a00716a:	4620      	mov	r0, r4
1a00716c:	f001 f994 	bl	1a008498 <__mdiff>
1a007170:	f105 0230 	add.w	r2, r5, #48	; 0x30
1a007174:	9200      	str	r2, [sp, #0]
1a007176:	68c2      	ldr	r2, [r0, #12]
1a007178:	4601      	mov	r1, r0
1a00717a:	2a00      	cmp	r2, #0
1a00717c:	f040 8232 	bne.w	1a0075e4 <_dtoa_r+0xa2c>
1a007180:	9006      	str	r0, [sp, #24]
1a007182:	4650      	mov	r0, sl
1a007184:	f001 f96c 	bl	1a008460 <__mcmp>
1a007188:	9b06      	ldr	r3, [sp, #24]
1a00718a:	9005      	str	r0, [sp, #20]
1a00718c:	4619      	mov	r1, r3
1a00718e:	4620      	mov	r0, r4
1a007190:	f000 ff40 	bl	1a008014 <_Bfree>
1a007194:	9a05      	ldr	r2, [sp, #20]
1a007196:	b932      	cbnz	r2, 1a0071a6 <_dtoa_r+0x5ee>
1a007198:	9b02      	ldr	r3, [sp, #8]
1a00719a:	b923      	cbnz	r3, 1a0071a6 <_dtoa_r+0x5ee>
1a00719c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00719e:	2b00      	cmp	r3, #0
1a0071a0:	f000 83de 	beq.w	1a007960 <_dtoa_r+0xda8>
1a0071a4:	9a02      	ldr	r2, [sp, #8]
1a0071a6:	f1bb 0f00 	cmp.w	fp, #0
1a0071aa:	f2c0 82a2 	blt.w	1a0076f2 <_dtoa_r+0xb3a>
1a0071ae:	d105      	bne.n	1a0071bc <_dtoa_r+0x604>
1a0071b0:	9b02      	ldr	r3, [sp, #8]
1a0071b2:	b91b      	cbnz	r3, 1a0071bc <_dtoa_r+0x604>
1a0071b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0071b6:	2b00      	cmp	r3, #0
1a0071b8:	f000 829b 	beq.w	1a0076f2 <_dtoa_r+0xb3a>
1a0071bc:	2a00      	cmp	r2, #0
1a0071be:	f300 8307 	bgt.w	1a0077d0 <_dtoa_r+0xc18>
1a0071c2:	f89d 3000 	ldrb.w	r3, [sp]
1a0071c6:	703b      	strb	r3, [r7, #0]
1a0071c8:	9b08      	ldr	r3, [sp, #32]
1a0071ca:	f107 0b01 	add.w	fp, r7, #1
1a0071ce:	429f      	cmp	r7, r3
1a0071d0:	465d      	mov	r5, fp
1a0071d2:	f000 8308 	beq.w	1a0077e6 <_dtoa_r+0xc2e>
1a0071d6:	4651      	mov	r1, sl
1a0071d8:	2300      	movs	r3, #0
1a0071da:	220a      	movs	r2, #10
1a0071dc:	4620      	mov	r0, r4
1a0071de:	f000 ff23 	bl	1a008028 <__multadd>
1a0071e2:	4546      	cmp	r6, r8
1a0071e4:	4682      	mov	sl, r0
1a0071e6:	4631      	mov	r1, r6
1a0071e8:	f04f 0300 	mov.w	r3, #0
1a0071ec:	f04f 020a 	mov.w	r2, #10
1a0071f0:	4620      	mov	r0, r4
1a0071f2:	f000 81f1 	beq.w	1a0075d8 <_dtoa_r+0xa20>
1a0071f6:	f000 ff17 	bl	1a008028 <__multadd>
1a0071fa:	4641      	mov	r1, r8
1a0071fc:	4606      	mov	r6, r0
1a0071fe:	2300      	movs	r3, #0
1a007200:	220a      	movs	r2, #10
1a007202:	4620      	mov	r0, r4
1a007204:	f000 ff10 	bl	1a008028 <__multadd>
1a007208:	465f      	mov	r7, fp
1a00720a:	4680      	mov	r8, r0
1a00720c:	e7a1      	b.n	1a007152 <_dtoa_r+0x59a>
1a00720e:	201c      	movs	r0, #28
1a007210:	9b06      	ldr	r3, [sp, #24]
1a007212:	4403      	add	r3, r0
1a007214:	9306      	str	r3, [sp, #24]
1a007216:	9b05      	ldr	r3, [sp, #20]
1a007218:	4403      	add	r3, r0
1a00721a:	4405      	add	r5, r0
1a00721c:	9305      	str	r3, [sp, #20]
1a00721e:	e763      	b.n	1a0070e8 <_dtoa_r+0x530>
1a007220:	4649      	mov	r1, r9
1a007222:	4650      	mov	r0, sl
1a007224:	f001 f91c 	bl	1a008460 <__mcmp>
1a007228:	2800      	cmp	r0, #0
1a00722a:	f6bf af73 	bge.w	1a007114 <_dtoa_r+0x55c>
1a00722e:	9f04      	ldr	r7, [sp, #16]
1a007230:	4651      	mov	r1, sl
1a007232:	2300      	movs	r3, #0
1a007234:	220a      	movs	r2, #10
1a007236:	4620      	mov	r0, r4
1a007238:	3f01      	subs	r7, #1
1a00723a:	9704      	str	r7, [sp, #16]
1a00723c:	f000 fef4 	bl	1a008028 <__multadd>
1a007240:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a007242:	4682      	mov	sl, r0
1a007244:	2b00      	cmp	r3, #0
1a007246:	f040 83a7 	bne.w	1a007998 <_dtoa_r+0xde0>
1a00724a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a00724c:	2b00      	cmp	r3, #0
1a00724e:	f340 83b0 	ble.w	1a0079b2 <_dtoa_r+0xdfa>
1a007252:	9308      	str	r3, [sp, #32]
1a007254:	f8dd b01c 	ldr.w	fp, [sp, #28]
1a007258:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a00725c:	465d      	mov	r5, fp
1a00725e:	e002      	b.n	1a007266 <_dtoa_r+0x6ae>
1a007260:	f000 fee2 	bl	1a008028 <__multadd>
1a007264:	4682      	mov	sl, r0
1a007266:	4649      	mov	r1, r9
1a007268:	4650      	mov	r0, sl
1a00726a:	f7ff fc11 	bl	1a006a90 <quorem>
1a00726e:	f100 0730 	add.w	r7, r0, #48	; 0x30
1a007272:	f805 7b01 	strb.w	r7, [r5], #1
1a007276:	eba5 030b 	sub.w	r3, r5, fp
1a00727a:	4543      	cmp	r3, r8
1a00727c:	f04f 020a 	mov.w	r2, #10
1a007280:	f04f 0300 	mov.w	r3, #0
1a007284:	4651      	mov	r1, sl
1a007286:	4620      	mov	r0, r4
1a007288:	dbea      	blt.n	1a007260 <_dtoa_r+0x6a8>
1a00728a:	9b07      	ldr	r3, [sp, #28]
1a00728c:	9a08      	ldr	r2, [sp, #32]
1a00728e:	9700      	str	r7, [sp, #0]
1a007290:	2a01      	cmp	r2, #1
1a007292:	bfac      	ite	ge
1a007294:	189b      	addge	r3, r3, r2
1a007296:	3301      	addlt	r3, #1
1a007298:	461d      	mov	r5, r3
1a00729a:	f04f 0b00 	mov.w	fp, #0
1a00729e:	4651      	mov	r1, sl
1a0072a0:	2201      	movs	r2, #1
1a0072a2:	4620      	mov	r0, r4
1a0072a4:	f001 f88a 	bl	1a0083bc <__lshift>
1a0072a8:	4649      	mov	r1, r9
1a0072aa:	4682      	mov	sl, r0
1a0072ac:	f001 f8d8 	bl	1a008460 <__mcmp>
1a0072b0:	2800      	cmp	r0, #0
1a0072b2:	f340 823a 	ble.w	1a00772a <_dtoa_r+0xb72>
1a0072b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
1a0072ba:	9907      	ldr	r1, [sp, #28]
1a0072bc:	1e6b      	subs	r3, r5, #1
1a0072be:	e004      	b.n	1a0072ca <_dtoa_r+0x712>
1a0072c0:	428b      	cmp	r3, r1
1a0072c2:	f000 81af 	beq.w	1a007624 <_dtoa_r+0xa6c>
1a0072c6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1a0072ca:	2a39      	cmp	r2, #57	; 0x39
1a0072cc:	f103 0501 	add.w	r5, r3, #1
1a0072d0:	d0f6      	beq.n	1a0072c0 <_dtoa_r+0x708>
1a0072d2:	3201      	adds	r2, #1
1a0072d4:	701a      	strb	r2, [r3, #0]
1a0072d6:	4649      	mov	r1, r9
1a0072d8:	4620      	mov	r0, r4
1a0072da:	f000 fe9b 	bl	1a008014 <_Bfree>
1a0072de:	2e00      	cmp	r6, #0
1a0072e0:	f43f ae36 	beq.w	1a006f50 <_dtoa_r+0x398>
1a0072e4:	f1bb 0f00 	cmp.w	fp, #0
1a0072e8:	d005      	beq.n	1a0072f6 <_dtoa_r+0x73e>
1a0072ea:	45b3      	cmp	fp, r6
1a0072ec:	d003      	beq.n	1a0072f6 <_dtoa_r+0x73e>
1a0072ee:	4659      	mov	r1, fp
1a0072f0:	4620      	mov	r0, r4
1a0072f2:	f000 fe8f 	bl	1a008014 <_Bfree>
1a0072f6:	4631      	mov	r1, r6
1a0072f8:	4620      	mov	r0, r4
1a0072fa:	f000 fe8b 	bl	1a008014 <_Bfree>
1a0072fe:	e627      	b.n	1a006f50 <_dtoa_r+0x398>
1a007300:	2300      	movs	r3, #0
1a007302:	9309      	str	r3, [sp, #36]	; 0x24
1a007304:	9b04      	ldr	r3, [sp, #16]
1a007306:	445b      	add	r3, fp
1a007308:	930d      	str	r3, [sp, #52]	; 0x34
1a00730a:	3301      	adds	r3, #1
1a00730c:	2b01      	cmp	r3, #1
1a00730e:	461e      	mov	r6, r3
1a007310:	461d      	mov	r5, r3
1a007312:	9308      	str	r3, [sp, #32]
1a007314:	bfb8      	it	lt
1a007316:	2601      	movlt	r6, #1
1a007318:	2100      	movs	r1, #0
1a00731a:	2e17      	cmp	r6, #23
1a00731c:	6461      	str	r1, [r4, #68]	; 0x44
1a00731e:	d90a      	bls.n	1a007336 <_dtoa_r+0x77e>
1a007320:	2201      	movs	r2, #1
1a007322:	2304      	movs	r3, #4
1a007324:	005b      	lsls	r3, r3, #1
1a007326:	f103 0014 	add.w	r0, r3, #20
1a00732a:	4286      	cmp	r6, r0
1a00732c:	4611      	mov	r1, r2
1a00732e:	f102 0201 	add.w	r2, r2, #1
1a007332:	d2f7      	bcs.n	1a007324 <_dtoa_r+0x76c>
1a007334:	6461      	str	r1, [r4, #68]	; 0x44
1a007336:	4620      	mov	r0, r4
1a007338:	f000 fe46 	bl	1a007fc8 <_Balloc>
1a00733c:	2d0e      	cmp	r5, #14
1a00733e:	9007      	str	r0, [sp, #28]
1a007340:	6420      	str	r0, [r4, #64]	; 0x40
1a007342:	f63f ad44 	bhi.w	1a006dce <_dtoa_r+0x216>
1a007346:	2f00      	cmp	r7, #0
1a007348:	f43f ad41 	beq.w	1a006dce <_dtoa_r+0x216>
1a00734c:	9904      	ldr	r1, [sp, #16]
1a00734e:	2900      	cmp	r1, #0
1a007350:	ed9d 7b00 	vldr	d7, [sp]
1a007354:	f340 81f6 	ble.w	1a007744 <_dtoa_r+0xb8c>
1a007358:	4bb9      	ldr	r3, [pc, #740]	; (1a007640 <_dtoa_r+0xa88>)
1a00735a:	f001 020f 	and.w	r2, r1, #15
1a00735e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a007362:	110d      	asrs	r5, r1, #4
1a007364:	e9d3 6700 	ldrd	r6, r7, [r3]
1a007368:	06eb      	lsls	r3, r5, #27
1a00736a:	f140 81ad 	bpl.w	1a0076c8 <_dtoa_r+0xb10>
1a00736e:	4bb5      	ldr	r3, [pc, #724]	; (1a007644 <_dtoa_r+0xa8c>)
1a007370:	ec51 0b17 	vmov	r0, r1, d7
1a007374:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
1a007378:	f7fc fcbe 	bl	1a003cf8 <__aeabi_ddiv>
1a00737c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
1a007380:	f005 050f 	and.w	r5, r5, #15
1a007384:	f04f 0903 	mov.w	r9, #3
1a007388:	b18d      	cbz	r5, 1a0073ae <_dtoa_r+0x7f6>
1a00738a:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 1a007644 <_dtoa_r+0xa8c>
1a00738e:	07e8      	lsls	r0, r5, #31
1a007390:	d509      	bpl.n	1a0073a6 <_dtoa_r+0x7ee>
1a007392:	4630      	mov	r0, r6
1a007394:	4639      	mov	r1, r7
1a007396:	e9d8 2300 	ldrd	r2, r3, [r8]
1a00739a:	f7fc fb83 	bl	1a003aa4 <__aeabi_dmul>
1a00739e:	f109 0901 	add.w	r9, r9, #1
1a0073a2:	4606      	mov	r6, r0
1a0073a4:	460f      	mov	r7, r1
1a0073a6:	106d      	asrs	r5, r5, #1
1a0073a8:	f108 0808 	add.w	r8, r8, #8
1a0073ac:	d1ef      	bne.n	1a00738e <_dtoa_r+0x7d6>
1a0073ae:	463b      	mov	r3, r7
1a0073b0:	4632      	mov	r2, r6
1a0073b2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a0073b6:	f7fc fc9f 	bl	1a003cf8 <__aeabi_ddiv>
1a0073ba:	4607      	mov	r7, r0
1a0073bc:	4688      	mov	r8, r1
1a0073be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0073c0:	b143      	cbz	r3, 1a0073d4 <_dtoa_r+0x81c>
1a0073c2:	2200      	movs	r2, #0
1a0073c4:	4ba0      	ldr	r3, [pc, #640]	; (1a007648 <_dtoa_r+0xa90>)
1a0073c6:	4638      	mov	r0, r7
1a0073c8:	4641      	mov	r1, r8
1a0073ca:	f7fc fddd 	bl	1a003f88 <__aeabi_dcmplt>
1a0073ce:	2800      	cmp	r0, #0
1a0073d0:	f040 8273 	bne.w	1a0078ba <_dtoa_r+0xd02>
1a0073d4:	4648      	mov	r0, r9
1a0073d6:	f7fc faff 	bl	1a0039d8 <__aeabi_i2d>
1a0073da:	463a      	mov	r2, r7
1a0073dc:	4643      	mov	r3, r8
1a0073de:	f7fc fb61 	bl	1a003aa4 <__aeabi_dmul>
1a0073e2:	4b9a      	ldr	r3, [pc, #616]	; (1a00764c <_dtoa_r+0xa94>)
1a0073e4:	2200      	movs	r2, #0
1a0073e6:	f7fc f9ab 	bl	1a003740 <__adddf3>
1a0073ea:	9b08      	ldr	r3, [sp, #32]
1a0073ec:	4605      	mov	r5, r0
1a0073ee:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
1a0073f2:	2b00      	cmp	r3, #0
1a0073f4:	f000 8140 	beq.w	1a007678 <_dtoa_r+0xac0>
1a0073f8:	9b04      	ldr	r3, [sp, #16]
1a0073fa:	f8dd 9020 	ldr.w	r9, [sp, #32]
1a0073fe:	9311      	str	r3, [sp, #68]	; 0x44
1a007400:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a007402:	2b00      	cmp	r3, #0
1a007404:	f000 81f6 	beq.w	1a0077f4 <_dtoa_r+0xc3c>
1a007408:	4b8d      	ldr	r3, [pc, #564]	; (1a007640 <_dtoa_r+0xa88>)
1a00740a:	4991      	ldr	r1, [pc, #580]	; (1a007650 <_dtoa_r+0xa98>)
1a00740c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
1a007410:	e953 2302 	ldrd	r2, r3, [r3, #-8]
1a007414:	2000      	movs	r0, #0
1a007416:	f7fc fc6f 	bl	1a003cf8 <__aeabi_ddiv>
1a00741a:	462a      	mov	r2, r5
1a00741c:	4633      	mov	r3, r6
1a00741e:	f7fc f98d 	bl	1a00373c <__aeabi_dsub>
1a007422:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
1a007426:	4641      	mov	r1, r8
1a007428:	4638      	mov	r0, r7
1a00742a:	f7fc fdeb 	bl	1a004004 <__aeabi_d2iz>
1a00742e:	4605      	mov	r5, r0
1a007430:	f7fc fad2 	bl	1a0039d8 <__aeabi_i2d>
1a007434:	4602      	mov	r2, r0
1a007436:	460b      	mov	r3, r1
1a007438:	4638      	mov	r0, r7
1a00743a:	4641      	mov	r1, r8
1a00743c:	f7fc f97e 	bl	1a00373c <__aeabi_dsub>
1a007440:	3530      	adds	r5, #48	; 0x30
1a007442:	fa5f f885 	uxtb.w	r8, r5
1a007446:	9d07      	ldr	r5, [sp, #28]
1a007448:	4606      	mov	r6, r0
1a00744a:	460f      	mov	r7, r1
1a00744c:	f885 8000 	strb.w	r8, [r5]
1a007450:	4602      	mov	r2, r0
1a007452:	460b      	mov	r3, r1
1a007454:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a007458:	3501      	adds	r5, #1
1a00745a:	f7fc fdb3 	bl	1a003fc4 <__aeabi_dcmpgt>
1a00745e:	2800      	cmp	r0, #0
1a007460:	d156      	bne.n	1a007510 <_dtoa_r+0x958>
1a007462:	4632      	mov	r2, r6
1a007464:	463b      	mov	r3, r7
1a007466:	2000      	movs	r0, #0
1a007468:	4977      	ldr	r1, [pc, #476]	; (1a007648 <_dtoa_r+0xa90>)
1a00746a:	f7fc f967 	bl	1a00373c <__aeabi_dsub>
1a00746e:	4602      	mov	r2, r0
1a007470:	460b      	mov	r3, r1
1a007472:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a007476:	f7fc fda5 	bl	1a003fc4 <__aeabi_dcmpgt>
1a00747a:	2800      	cmp	r0, #0
1a00747c:	f040 8262 	bne.w	1a007944 <_dtoa_r+0xd8c>
1a007480:	f1b9 0f01 	cmp.w	r9, #1
1a007484:	f43f aca3 	beq.w	1a006dce <_dtoa_r+0x216>
1a007488:	9b07      	ldr	r3, [sp, #28]
1a00748a:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
1a00748e:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
1a007492:	4499      	add	r9, r3
1a007494:	46a0      	mov	r8, r4
1a007496:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
1a00749a:	e00d      	b.n	1a0074b8 <_dtoa_r+0x900>
1a00749c:	2000      	movs	r0, #0
1a00749e:	496a      	ldr	r1, [pc, #424]	; (1a007648 <_dtoa_r+0xa90>)
1a0074a0:	f7fc f94c 	bl	1a00373c <__aeabi_dsub>
1a0074a4:	4652      	mov	r2, sl
1a0074a6:	465b      	mov	r3, fp
1a0074a8:	f7fc fd6e 	bl	1a003f88 <__aeabi_dcmplt>
1a0074ac:	2800      	cmp	r0, #0
1a0074ae:	f040 8244 	bne.w	1a00793a <_dtoa_r+0xd82>
1a0074b2:	454d      	cmp	r5, r9
1a0074b4:	f000 824a 	beq.w	1a00794c <_dtoa_r+0xd94>
1a0074b8:	4650      	mov	r0, sl
1a0074ba:	4659      	mov	r1, fp
1a0074bc:	2200      	movs	r2, #0
1a0074be:	4b65      	ldr	r3, [pc, #404]	; (1a007654 <_dtoa_r+0xa9c>)
1a0074c0:	f7fc faf0 	bl	1a003aa4 <__aeabi_dmul>
1a0074c4:	2200      	movs	r2, #0
1a0074c6:	4b63      	ldr	r3, [pc, #396]	; (1a007654 <_dtoa_r+0xa9c>)
1a0074c8:	4682      	mov	sl, r0
1a0074ca:	468b      	mov	fp, r1
1a0074cc:	4630      	mov	r0, r6
1a0074ce:	4639      	mov	r1, r7
1a0074d0:	f7fc fae8 	bl	1a003aa4 <__aeabi_dmul>
1a0074d4:	460f      	mov	r7, r1
1a0074d6:	4606      	mov	r6, r0
1a0074d8:	f7fc fd94 	bl	1a004004 <__aeabi_d2iz>
1a0074dc:	4604      	mov	r4, r0
1a0074de:	f7fc fa7b 	bl	1a0039d8 <__aeabi_i2d>
1a0074e2:	4602      	mov	r2, r0
1a0074e4:	460b      	mov	r3, r1
1a0074e6:	4630      	mov	r0, r6
1a0074e8:	4639      	mov	r1, r7
1a0074ea:	f7fc f927 	bl	1a00373c <__aeabi_dsub>
1a0074ee:	3430      	adds	r4, #48	; 0x30
1a0074f0:	b2e4      	uxtb	r4, r4
1a0074f2:	4652      	mov	r2, sl
1a0074f4:	465b      	mov	r3, fp
1a0074f6:	f805 4b01 	strb.w	r4, [r5], #1
1a0074fa:	4606      	mov	r6, r0
1a0074fc:	460f      	mov	r7, r1
1a0074fe:	f7fc fd43 	bl	1a003f88 <__aeabi_dcmplt>
1a007502:	4632      	mov	r2, r6
1a007504:	463b      	mov	r3, r7
1a007506:	2800      	cmp	r0, #0
1a007508:	d0c8      	beq.n	1a00749c <_dtoa_r+0x8e4>
1a00750a:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
1a00750e:	4644      	mov	r4, r8
1a007510:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a007512:	9304      	str	r3, [sp, #16]
1a007514:	e51c      	b.n	1a006f50 <_dtoa_r+0x398>
1a007516:	2300      	movs	r3, #0
1a007518:	9309      	str	r3, [sp, #36]	; 0x24
1a00751a:	f1bb 0f00 	cmp.w	fp, #0
1a00751e:	f340 80da 	ble.w	1a0076d6 <_dtoa_r+0xb1e>
1a007522:	465e      	mov	r6, fp
1a007524:	465d      	mov	r5, fp
1a007526:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
1a00752a:	f8cd b020 	str.w	fp, [sp, #32]
1a00752e:	e6f3      	b.n	1a007318 <_dtoa_r+0x760>
1a007530:	2301      	movs	r3, #1
1a007532:	9309      	str	r3, [sp, #36]	; 0x24
1a007534:	e7f1      	b.n	1a00751a <_dtoa_r+0x962>
1a007536:	9b00      	ldr	r3, [sp, #0]
1a007538:	2b00      	cmp	r3, #0
1a00753a:	f47f ada1 	bne.w	1a007080 <_dtoa_r+0x4c8>
1a00753e:	e9dd 1200 	ldrd	r1, r2, [sp]
1a007542:	f3c2 0313 	ubfx	r3, r2, #0, #20
1a007546:	2b00      	cmp	r3, #0
1a007548:	f47f adb4 	bne.w	1a0070b4 <_dtoa_r+0x4fc>
1a00754c:	f022 4700 	bic.w	r7, r2, #2147483648	; 0x80000000
1a007550:	0d3f      	lsrs	r7, r7, #20
1a007552:	053f      	lsls	r7, r7, #20
1a007554:	2f00      	cmp	r7, #0
1a007556:	f000 8200 	beq.w	1a00795a <_dtoa_r+0xda2>
1a00755a:	9b06      	ldr	r3, [sp, #24]
1a00755c:	3301      	adds	r3, #1
1a00755e:	9306      	str	r3, [sp, #24]
1a007560:	9b05      	ldr	r3, [sp, #20]
1a007562:	3301      	adds	r3, #1
1a007564:	9305      	str	r3, [sp, #20]
1a007566:	f04f 0801 	mov.w	r8, #1
1a00756a:	e5a5      	b.n	1a0070b8 <_dtoa_r+0x500>
1a00756c:	9b08      	ldr	r3, [sp, #32]
1a00756e:	2b00      	cmp	r3, #0
1a007570:	f73f ac3e 	bgt.w	1a006df0 <_dtoa_r+0x238>
1a007574:	f040 8099 	bne.w	1a0076aa <_dtoa_r+0xaf2>
1a007578:	4649      	mov	r1, r9
1a00757a:	2200      	movs	r2, #0
1a00757c:	4b36      	ldr	r3, [pc, #216]	; (1a007658 <_dtoa_r+0xaa0>)
1a00757e:	4640      	mov	r0, r8
1a007580:	f7fc fa90 	bl	1a003aa4 <__aeabi_dmul>
1a007584:	e9dd 2300 	ldrd	r2, r3, [sp]
1a007588:	f7fc fd12 	bl	1a003fb0 <__aeabi_dcmpge>
1a00758c:	f8dd 9020 	ldr.w	r9, [sp, #32]
1a007590:	464e      	mov	r6, r9
1a007592:	2800      	cmp	r0, #0
1a007594:	d03e      	beq.n	1a007614 <_dtoa_r+0xa5c>
1a007596:	ea6f 030b 	mvn.w	r3, fp
1a00759a:	9d07      	ldr	r5, [sp, #28]
1a00759c:	9304      	str	r3, [sp, #16]
1a00759e:	4649      	mov	r1, r9
1a0075a0:	4620      	mov	r0, r4
1a0075a2:	f000 fd37 	bl	1a008014 <_Bfree>
1a0075a6:	2e00      	cmp	r6, #0
1a0075a8:	f43f acd2 	beq.w	1a006f50 <_dtoa_r+0x398>
1a0075ac:	e6a3      	b.n	1a0072f6 <_dtoa_r+0x73e>
1a0075ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a0075b0:	4651      	mov	r1, sl
1a0075b2:	4620      	mov	r0, r4
1a0075b4:	f000 feb2 	bl	1a00831c <__pow5mult>
1a0075b8:	4682      	mov	sl, r0
1a0075ba:	e54f      	b.n	1a00705c <_dtoa_r+0x4a4>
1a0075bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a0075be:	2a00      	cmp	r2, #0
1a0075c0:	f000 816f 	beq.w	1a0078a2 <_dtoa_r+0xcea>
1a0075c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
1a0075c8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
1a0075ca:	9d06      	ldr	r5, [sp, #24]
1a0075cc:	e4e7      	b.n	1a006f9e <_dtoa_r+0x3e6>
1a0075ce:	9b00      	ldr	r3, [sp, #0]
1a0075d0:	2b00      	cmp	r3, #0
1a0075d2:	f47f ad6f 	bne.w	1a0070b4 <_dtoa_r+0x4fc>
1a0075d6:	e7b2      	b.n	1a00753e <_dtoa_r+0x986>
1a0075d8:	f000 fd26 	bl	1a008028 <__multadd>
1a0075dc:	465f      	mov	r7, fp
1a0075de:	4606      	mov	r6, r0
1a0075e0:	4680      	mov	r8, r0
1a0075e2:	e5b6      	b.n	1a007152 <_dtoa_r+0x59a>
1a0075e4:	4620      	mov	r0, r4
1a0075e6:	f000 fd15 	bl	1a008014 <_Bfree>
1a0075ea:	2201      	movs	r2, #1
1a0075ec:	e5db      	b.n	1a0071a6 <_dtoa_r+0x5ee>
1a0075ee:	9b02      	ldr	r3, [sp, #8]
1a0075f0:	2b02      	cmp	r3, #2
1a0075f2:	f77f ad93 	ble.w	1a00711c <_dtoa_r+0x564>
1a0075f6:	9b08      	ldr	r3, [sp, #32]
1a0075f8:	2b00      	cmp	r3, #0
1a0075fa:	d1cc      	bne.n	1a007596 <_dtoa_r+0x9de>
1a0075fc:	4649      	mov	r1, r9
1a0075fe:	2205      	movs	r2, #5
1a007600:	4620      	mov	r0, r4
1a007602:	f000 fd11 	bl	1a008028 <__multadd>
1a007606:	4601      	mov	r1, r0
1a007608:	4681      	mov	r9, r0
1a00760a:	4650      	mov	r0, sl
1a00760c:	f000 ff28 	bl	1a008460 <__mcmp>
1a007610:	2800      	cmp	r0, #0
1a007612:	ddc0      	ble.n	1a007596 <_dtoa_r+0x9de>
1a007614:	9a04      	ldr	r2, [sp, #16]
1a007616:	9907      	ldr	r1, [sp, #28]
1a007618:	2331      	movs	r3, #49	; 0x31
1a00761a:	3201      	adds	r2, #1
1a00761c:	9204      	str	r2, [sp, #16]
1a00761e:	700b      	strb	r3, [r1, #0]
1a007620:	1c4d      	adds	r5, r1, #1
1a007622:	e7bc      	b.n	1a00759e <_dtoa_r+0x9e6>
1a007624:	9a04      	ldr	r2, [sp, #16]
1a007626:	3201      	adds	r2, #1
1a007628:	9204      	str	r2, [sp, #16]
1a00762a:	9a07      	ldr	r2, [sp, #28]
1a00762c:	2331      	movs	r3, #49	; 0x31
1a00762e:	7013      	strb	r3, [r2, #0]
1a007630:	e651      	b.n	1a0072d6 <_dtoa_r+0x71e>
1a007632:	2301      	movs	r3, #1
1a007634:	9309      	str	r3, [sp, #36]	; 0x24
1a007636:	e665      	b.n	1a007304 <_dtoa_r+0x74c>
1a007638:	f8dd a000 	ldr.w	sl, [sp]
1a00763c:	9c02      	ldr	r4, [sp, #8]
1a00763e:	e487      	b.n	1a006f50 <_dtoa_r+0x398>
1a007640:	1a00a340 	.word	0x1a00a340
1a007644:	1a00a430 	.word	0x1a00a430
1a007648:	3ff00000 	.word	0x3ff00000
1a00764c:	401c0000 	.word	0x401c0000
1a007650:	3fe00000 	.word	0x3fe00000
1a007654:	40240000 	.word	0x40240000
1a007658:	40140000 	.word	0x40140000
1a00765c:	4648      	mov	r0, r9
1a00765e:	f7fc f9bb 	bl	1a0039d8 <__aeabi_i2d>
1a007662:	463a      	mov	r2, r7
1a007664:	4643      	mov	r3, r8
1a007666:	f7fc fa1d 	bl	1a003aa4 <__aeabi_dmul>
1a00766a:	2200      	movs	r2, #0
1a00766c:	4bc4      	ldr	r3, [pc, #784]	; (1a007980 <_dtoa_r+0xdc8>)
1a00766e:	f7fc f867 	bl	1a003740 <__adddf3>
1a007672:	4605      	mov	r5, r0
1a007674:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
1a007678:	4641      	mov	r1, r8
1a00767a:	2200      	movs	r2, #0
1a00767c:	4bc1      	ldr	r3, [pc, #772]	; (1a007984 <_dtoa_r+0xdcc>)
1a00767e:	4638      	mov	r0, r7
1a007680:	f7fc f85c 	bl	1a00373c <__aeabi_dsub>
1a007684:	462a      	mov	r2, r5
1a007686:	4633      	mov	r3, r6
1a007688:	4680      	mov	r8, r0
1a00768a:	4689      	mov	r9, r1
1a00768c:	f7fc fc9a 	bl	1a003fc4 <__aeabi_dcmpgt>
1a007690:	2800      	cmp	r0, #0
1a007692:	f040 80ab 	bne.w	1a0077ec <_dtoa_r+0xc34>
1a007696:	462a      	mov	r2, r5
1a007698:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
1a00769c:	4640      	mov	r0, r8
1a00769e:	4649      	mov	r1, r9
1a0076a0:	f7fc fc72 	bl	1a003f88 <__aeabi_dcmplt>
1a0076a4:	2800      	cmp	r0, #0
1a0076a6:	f43f ab92 	beq.w	1a006dce <_dtoa_r+0x216>
1a0076aa:	f04f 0900 	mov.w	r9, #0
1a0076ae:	464e      	mov	r6, r9
1a0076b0:	e771      	b.n	1a007596 <_dtoa_r+0x9de>
1a0076b2:	9807      	ldr	r0, [sp, #28]
1a0076b4:	f7ff bab8 	b.w	1a006c28 <_dtoa_r+0x70>
1a0076b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0076ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a0076bc:	970a      	str	r7, [sp, #40]	; 0x28
1a0076be:	1afb      	subs	r3, r7, r3
1a0076c0:	441a      	add	r2, r3
1a0076c2:	920b      	str	r2, [sp, #44]	; 0x2c
1a0076c4:	2700      	movs	r7, #0
1a0076c6:	e464      	b.n	1a006f92 <_dtoa_r+0x3da>
1a0076c8:	ed9d 7b00 	vldr	d7, [sp]
1a0076cc:	f04f 0902 	mov.w	r9, #2
1a0076d0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
1a0076d4:	e658      	b.n	1a007388 <_dtoa_r+0x7d0>
1a0076d6:	2100      	movs	r1, #0
1a0076d8:	6461      	str	r1, [r4, #68]	; 0x44
1a0076da:	4620      	mov	r0, r4
1a0076dc:	f000 fc74 	bl	1a007fc8 <_Balloc>
1a0076e0:	f04f 0b01 	mov.w	fp, #1
1a0076e4:	9007      	str	r0, [sp, #28]
1a0076e6:	6420      	str	r0, [r4, #64]	; 0x40
1a0076e8:	f8cd b020 	str.w	fp, [sp, #32]
1a0076ec:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
1a0076f0:	e629      	b.n	1a007346 <_dtoa_r+0x78e>
1a0076f2:	2a00      	cmp	r2, #0
1a0076f4:	dd12      	ble.n	1a00771c <_dtoa_r+0xb64>
1a0076f6:	4651      	mov	r1, sl
1a0076f8:	2201      	movs	r2, #1
1a0076fa:	4620      	mov	r0, r4
1a0076fc:	f000 fe5e 	bl	1a0083bc <__lshift>
1a007700:	4649      	mov	r1, r9
1a007702:	4682      	mov	sl, r0
1a007704:	f000 feac 	bl	1a008460 <__mcmp>
1a007708:	2800      	cmp	r0, #0
1a00770a:	f340 8131 	ble.w	1a007970 <_dtoa_r+0xdb8>
1a00770e:	9b00      	ldr	r3, [sp, #0]
1a007710:	2b39      	cmp	r3, #57	; 0x39
1a007712:	f000 80f7 	beq.w	1a007904 <_dtoa_r+0xd4c>
1a007716:	f105 0331 	add.w	r3, r5, #49	; 0x31
1a00771a:	9300      	str	r3, [sp, #0]
1a00771c:	f89d 3000 	ldrb.w	r3, [sp]
1a007720:	703b      	strb	r3, [r7, #0]
1a007722:	46b3      	mov	fp, r6
1a007724:	1c7d      	adds	r5, r7, #1
1a007726:	4646      	mov	r6, r8
1a007728:	e5d5      	b.n	1a0072d6 <_dtoa_r+0x71e>
1a00772a:	d104      	bne.n	1a007736 <_dtoa_r+0xb7e>
1a00772c:	9b00      	ldr	r3, [sp, #0]
1a00772e:	07db      	lsls	r3, r3, #31
1a007730:	d501      	bpl.n	1a007736 <_dtoa_r+0xb7e>
1a007732:	e5c0      	b.n	1a0072b6 <_dtoa_r+0x6fe>
1a007734:	4615      	mov	r5, r2
1a007736:	f815 3c01 	ldrb.w	r3, [r5, #-1]
1a00773a:	2b30      	cmp	r3, #48	; 0x30
1a00773c:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
1a007740:	d0f8      	beq.n	1a007734 <_dtoa_r+0xb7c>
1a007742:	e5c8      	b.n	1a0072d6 <_dtoa_r+0x71e>
1a007744:	f000 80b4 	beq.w	1a0078b0 <_dtoa_r+0xcf8>
1a007748:	9b04      	ldr	r3, [sp, #16]
1a00774a:	425d      	negs	r5, r3
1a00774c:	4b8e      	ldr	r3, [pc, #568]	; (1a007988 <_dtoa_r+0xdd0>)
1a00774e:	f005 020f 	and.w	r2, r5, #15
1a007752:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a007756:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00775a:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00775e:	f7fc f9a1 	bl	1a003aa4 <__aeabi_dmul>
1a007762:	112d      	asrs	r5, r5, #4
1a007764:	4607      	mov	r7, r0
1a007766:	4688      	mov	r8, r1
1a007768:	f000 8128 	beq.w	1a0079bc <_dtoa_r+0xe04>
1a00776c:	4e87      	ldr	r6, [pc, #540]	; (1a00798c <_dtoa_r+0xdd4>)
1a00776e:	f04f 0902 	mov.w	r9, #2
1a007772:	07e9      	lsls	r1, r5, #31
1a007774:	d509      	bpl.n	1a00778a <_dtoa_r+0xbd2>
1a007776:	4638      	mov	r0, r7
1a007778:	4641      	mov	r1, r8
1a00777a:	e9d6 2300 	ldrd	r2, r3, [r6]
1a00777e:	f7fc f991 	bl	1a003aa4 <__aeabi_dmul>
1a007782:	f109 0901 	add.w	r9, r9, #1
1a007786:	4607      	mov	r7, r0
1a007788:	4688      	mov	r8, r1
1a00778a:	106d      	asrs	r5, r5, #1
1a00778c:	f106 0608 	add.w	r6, r6, #8
1a007790:	d1ef      	bne.n	1a007772 <_dtoa_r+0xbba>
1a007792:	e614      	b.n	1a0073be <_dtoa_r+0x806>
1a007794:	9907      	ldr	r1, [sp, #28]
1a007796:	2230      	movs	r2, #48	; 0x30
1a007798:	700a      	strb	r2, [r1, #0]
1a00779a:	9a04      	ldr	r2, [sp, #16]
1a00779c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
1a0077a0:	3201      	adds	r2, #1
1a0077a2:	9204      	str	r2, [sp, #16]
1a0077a4:	f7ff bbd0 	b.w	1a006f48 <_dtoa_r+0x390>
1a0077a8:	6871      	ldr	r1, [r6, #4]
1a0077aa:	4620      	mov	r0, r4
1a0077ac:	f000 fc0c 	bl	1a007fc8 <_Balloc>
1a0077b0:	6933      	ldr	r3, [r6, #16]
1a0077b2:	3302      	adds	r3, #2
1a0077b4:	009a      	lsls	r2, r3, #2
1a0077b6:	4605      	mov	r5, r0
1a0077b8:	f106 010c 	add.w	r1, r6, #12
1a0077bc:	300c      	adds	r0, #12
1a0077be:	f7fd fc43 	bl	1a005048 <memcpy>
1a0077c2:	4629      	mov	r1, r5
1a0077c4:	2201      	movs	r2, #1
1a0077c6:	4620      	mov	r0, r4
1a0077c8:	f000 fdf8 	bl	1a0083bc <__lshift>
1a0077cc:	4680      	mov	r8, r0
1a0077ce:	e4b6      	b.n	1a00713e <_dtoa_r+0x586>
1a0077d0:	9b00      	ldr	r3, [sp, #0]
1a0077d2:	2b39      	cmp	r3, #57	; 0x39
1a0077d4:	f000 8096 	beq.w	1a007904 <_dtoa_r+0xd4c>
1a0077d8:	9b00      	ldr	r3, [sp, #0]
1a0077da:	3301      	adds	r3, #1
1a0077dc:	46b3      	mov	fp, r6
1a0077de:	703b      	strb	r3, [r7, #0]
1a0077e0:	1c7d      	adds	r5, r7, #1
1a0077e2:	4646      	mov	r6, r8
1a0077e4:	e577      	b.n	1a0072d6 <_dtoa_r+0x71e>
1a0077e6:	46b3      	mov	fp, r6
1a0077e8:	4646      	mov	r6, r8
1a0077ea:	e558      	b.n	1a00729e <_dtoa_r+0x6e6>
1a0077ec:	f04f 0900 	mov.w	r9, #0
1a0077f0:	464e      	mov	r6, r9
1a0077f2:	e70f      	b.n	1a007614 <_dtoa_r+0xa5c>
1a0077f4:	4964      	ldr	r1, [pc, #400]	; (1a007988 <_dtoa_r+0xdd0>)
1a0077f6:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
1a0077fa:	462a      	mov	r2, r5
1a0077fc:	4633      	mov	r3, r6
1a0077fe:	e951 0102 	ldrd	r0, r1, [r1, #-8]
1a007802:	f7fc f94f 	bl	1a003aa4 <__aeabi_dmul>
1a007806:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
1a00780a:	4638      	mov	r0, r7
1a00780c:	4641      	mov	r1, r8
1a00780e:	f7fc fbf9 	bl	1a004004 <__aeabi_d2iz>
1a007812:	4605      	mov	r5, r0
1a007814:	f7fc f8e0 	bl	1a0039d8 <__aeabi_i2d>
1a007818:	4602      	mov	r2, r0
1a00781a:	460b      	mov	r3, r1
1a00781c:	4638      	mov	r0, r7
1a00781e:	4641      	mov	r1, r8
1a007820:	f7fb ff8c 	bl	1a00373c <__aeabi_dsub>
1a007824:	9a07      	ldr	r2, [sp, #28]
1a007826:	3530      	adds	r5, #48	; 0x30
1a007828:	f1b9 0f01 	cmp.w	r9, #1
1a00782c:	7015      	strb	r5, [r2, #0]
1a00782e:	4606      	mov	r6, r0
1a007830:	460f      	mov	r7, r1
1a007832:	f102 0501 	add.w	r5, r2, #1
1a007836:	d01c      	beq.n	1a007872 <_dtoa_r+0xcba>
1a007838:	9b07      	ldr	r3, [sp, #28]
1a00783a:	4499      	add	r9, r3
1a00783c:	2200      	movs	r2, #0
1a00783e:	4b54      	ldr	r3, [pc, #336]	; (1a007990 <_dtoa_r+0xdd8>)
1a007840:	4630      	mov	r0, r6
1a007842:	4639      	mov	r1, r7
1a007844:	f7fc f92e 	bl	1a003aa4 <__aeabi_dmul>
1a007848:	460f      	mov	r7, r1
1a00784a:	4606      	mov	r6, r0
1a00784c:	f7fc fbda 	bl	1a004004 <__aeabi_d2iz>
1a007850:	4680      	mov	r8, r0
1a007852:	f7fc f8c1 	bl	1a0039d8 <__aeabi_i2d>
1a007856:	f108 0830 	add.w	r8, r8, #48	; 0x30
1a00785a:	4602      	mov	r2, r0
1a00785c:	460b      	mov	r3, r1
1a00785e:	4630      	mov	r0, r6
1a007860:	4639      	mov	r1, r7
1a007862:	f7fb ff6b 	bl	1a00373c <__aeabi_dsub>
1a007866:	f805 8b01 	strb.w	r8, [r5], #1
1a00786a:	454d      	cmp	r5, r9
1a00786c:	4606      	mov	r6, r0
1a00786e:	460f      	mov	r7, r1
1a007870:	d1e4      	bne.n	1a00783c <_dtoa_r+0xc84>
1a007872:	2200      	movs	r2, #0
1a007874:	4b47      	ldr	r3, [pc, #284]	; (1a007994 <_dtoa_r+0xddc>)
1a007876:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a00787a:	f7fb ff61 	bl	1a003740 <__adddf3>
1a00787e:	4632      	mov	r2, r6
1a007880:	463b      	mov	r3, r7
1a007882:	f7fc fb81 	bl	1a003f88 <__aeabi_dcmplt>
1a007886:	2800      	cmp	r0, #0
1a007888:	d042      	beq.n	1a007910 <_dtoa_r+0xd58>
1a00788a:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a00788c:	9304      	str	r3, [sp, #16]
1a00788e:	f815 8c01 	ldrb.w	r8, [r5, #-1]
1a007892:	f7ff bb4c 	b.w	1a006f2e <_dtoa_r+0x376>
1a007896:	9b06      	ldr	r3, [sp, #24]
1a007898:	9a08      	ldr	r2, [sp, #32]
1a00789a:	1a9d      	subs	r5, r3, r2
1a00789c:	2300      	movs	r3, #0
1a00789e:	f7ff bb7e 	b.w	1a006f9e <_dtoa_r+0x3e6>
1a0078a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a0078a4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
1a0078a6:	9d06      	ldr	r5, [sp, #24]
1a0078a8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
1a0078ac:	f7ff bb77 	b.w	1a006f9e <_dtoa_r+0x3e6>
1a0078b0:	e9dd 7800 	ldrd	r7, r8, [sp]
1a0078b4:	f04f 0902 	mov.w	r9, #2
1a0078b8:	e581      	b.n	1a0073be <_dtoa_r+0x806>
1a0078ba:	9b08      	ldr	r3, [sp, #32]
1a0078bc:	2b00      	cmp	r3, #0
1a0078be:	f43f aecd 	beq.w	1a00765c <_dtoa_r+0xaa4>
1a0078c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0078c4:	2b00      	cmp	r3, #0
1a0078c6:	f77f aa82 	ble.w	1a006dce <_dtoa_r+0x216>
1a0078ca:	2200      	movs	r2, #0
1a0078cc:	4b30      	ldr	r3, [pc, #192]	; (1a007990 <_dtoa_r+0xdd8>)
1a0078ce:	4638      	mov	r0, r7
1a0078d0:	4641      	mov	r1, r8
1a0078d2:	f7fc f8e7 	bl	1a003aa4 <__aeabi_dmul>
1a0078d6:	4607      	mov	r7, r0
1a0078d8:	4688      	mov	r8, r1
1a0078da:	f109 0001 	add.w	r0, r9, #1
1a0078de:	f7fc f87b 	bl	1a0039d8 <__aeabi_i2d>
1a0078e2:	463a      	mov	r2, r7
1a0078e4:	4643      	mov	r3, r8
1a0078e6:	f7fc f8dd 	bl	1a003aa4 <__aeabi_dmul>
1a0078ea:	2200      	movs	r2, #0
1a0078ec:	4b24      	ldr	r3, [pc, #144]	; (1a007980 <_dtoa_r+0xdc8>)
1a0078ee:	f7fb ff27 	bl	1a003740 <__adddf3>
1a0078f2:	9a04      	ldr	r2, [sp, #16]
1a0078f4:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
1a0078f8:	3a01      	subs	r2, #1
1a0078fa:	4605      	mov	r5, r0
1a0078fc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
1a007900:	9211      	str	r2, [sp, #68]	; 0x44
1a007902:	e57d      	b.n	1a007400 <_dtoa_r+0x848>
1a007904:	2239      	movs	r2, #57	; 0x39
1a007906:	46b3      	mov	fp, r6
1a007908:	703a      	strb	r2, [r7, #0]
1a00790a:	4646      	mov	r6, r8
1a00790c:	1c7d      	adds	r5, r7, #1
1a00790e:	e4d4      	b.n	1a0072ba <_dtoa_r+0x702>
1a007910:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
1a007914:	2000      	movs	r0, #0
1a007916:	491f      	ldr	r1, [pc, #124]	; (1a007994 <_dtoa_r+0xddc>)
1a007918:	f7fb ff10 	bl	1a00373c <__aeabi_dsub>
1a00791c:	4632      	mov	r2, r6
1a00791e:	463b      	mov	r3, r7
1a007920:	f7fc fb50 	bl	1a003fc4 <__aeabi_dcmpgt>
1a007924:	b910      	cbnz	r0, 1a00792c <_dtoa_r+0xd74>
1a007926:	f7ff ba52 	b.w	1a006dce <_dtoa_r+0x216>
1a00792a:	4615      	mov	r5, r2
1a00792c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
1a007930:	2b30      	cmp	r3, #48	; 0x30
1a007932:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
1a007936:	d0f8      	beq.n	1a00792a <_dtoa_r+0xd72>
1a007938:	e5ea      	b.n	1a007510 <_dtoa_r+0x958>
1a00793a:	4643      	mov	r3, r8
1a00793c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
1a007940:	46a0      	mov	r8, r4
1a007942:	461c      	mov	r4, r3
1a007944:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a007946:	9304      	str	r3, [sp, #16]
1a007948:	f7ff baf1 	b.w	1a006f2e <_dtoa_r+0x376>
1a00794c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
1a007950:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
1a007954:	4644      	mov	r4, r8
1a007956:	f7ff ba3a 	b.w	1a006dce <_dtoa_r+0x216>
1a00795a:	46b8      	mov	r8, r7
1a00795c:	f7ff bbac 	b.w	1a0070b8 <_dtoa_r+0x500>
1a007960:	9b00      	ldr	r3, [sp, #0]
1a007962:	2b39      	cmp	r3, #57	; 0x39
1a007964:	d0ce      	beq.n	1a007904 <_dtoa_r+0xd4c>
1a007966:	f1bb 0f00 	cmp.w	fp, #0
1a00796a:	f73f aed4 	bgt.w	1a007716 <_dtoa_r+0xb5e>
1a00796e:	e6d5      	b.n	1a00771c <_dtoa_r+0xb64>
1a007970:	f47f aed4 	bne.w	1a00771c <_dtoa_r+0xb64>
1a007974:	9b00      	ldr	r3, [sp, #0]
1a007976:	07da      	lsls	r2, r3, #31
1a007978:	f57f aed0 	bpl.w	1a00771c <_dtoa_r+0xb64>
1a00797c:	e6c7      	b.n	1a00770e <_dtoa_r+0xb56>
1a00797e:	bf00      	nop
1a007980:	401c0000 	.word	0x401c0000
1a007984:	40140000 	.word	0x40140000
1a007988:	1a00a340 	.word	0x1a00a340
1a00798c:	1a00a430 	.word	0x1a00a430
1a007990:	40240000 	.word	0x40240000
1a007994:	3fe00000 	.word	0x3fe00000
1a007998:	4631      	mov	r1, r6
1a00799a:	2300      	movs	r3, #0
1a00799c:	220a      	movs	r2, #10
1a00799e:	4620      	mov	r0, r4
1a0079a0:	f000 fb42 	bl	1a008028 <__multadd>
1a0079a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0079a6:	2b00      	cmp	r3, #0
1a0079a8:	4606      	mov	r6, r0
1a0079aa:	dd0a      	ble.n	1a0079c2 <_dtoa_r+0xe0a>
1a0079ac:	9308      	str	r3, [sp, #32]
1a0079ae:	f7ff bbb9 	b.w	1a007124 <_dtoa_r+0x56c>
1a0079b2:	9b02      	ldr	r3, [sp, #8]
1a0079b4:	2b02      	cmp	r3, #2
1a0079b6:	dc22      	bgt.n	1a0079fe <_dtoa_r+0xe46>
1a0079b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0079ba:	e44a      	b.n	1a007252 <_dtoa_r+0x69a>
1a0079bc:	f04f 0902 	mov.w	r9, #2
1a0079c0:	e4fd      	b.n	1a0073be <_dtoa_r+0x806>
1a0079c2:	9b02      	ldr	r3, [sp, #8]
1a0079c4:	2b02      	cmp	r3, #2
1a0079c6:	dc1a      	bgt.n	1a0079fe <_dtoa_r+0xe46>
1a0079c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0079ca:	e7ef      	b.n	1a0079ac <_dtoa_r+0xdf4>
1a0079cc:	2500      	movs	r5, #0
1a0079ce:	6465      	str	r5, [r4, #68]	; 0x44
1a0079d0:	4629      	mov	r1, r5
1a0079d2:	4620      	mov	r0, r4
1a0079d4:	f000 faf8 	bl	1a007fc8 <_Balloc>
1a0079d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0079dc:	9308      	str	r3, [sp, #32]
1a0079de:	930d      	str	r3, [sp, #52]	; 0x34
1a0079e0:	2301      	movs	r3, #1
1a0079e2:	9007      	str	r0, [sp, #28]
1a0079e4:	46ab      	mov	fp, r5
1a0079e6:	6420      	str	r0, [r4, #64]	; 0x40
1a0079e8:	9309      	str	r3, [sp, #36]	; 0x24
1a0079ea:	f7ff b9f0 	b.w	1a006dce <_dtoa_r+0x216>
1a0079ee:	f43f ab7b 	beq.w	1a0070e8 <_dtoa_r+0x530>
1a0079f2:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
1a0079f6:	e40b      	b.n	1a007210 <_dtoa_r+0x658>
1a0079f8:	2701      	movs	r7, #1
1a0079fa:	f7ff b9af 	b.w	1a006d5c <_dtoa_r+0x1a4>
1a0079fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a007a00:	9308      	str	r3, [sp, #32]
1a007a02:	e5f8      	b.n	1a0075f6 <_dtoa_r+0xa3e>

1a007a04 <__sfvwrite_r>:
1a007a04:	6893      	ldr	r3, [r2, #8]
1a007a06:	2b00      	cmp	r3, #0
1a007a08:	d073      	beq.n	1a007af2 <__sfvwrite_r+0xee>
1a007a0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a007a0e:	898b      	ldrh	r3, [r1, #12]
1a007a10:	b083      	sub	sp, #12
1a007a12:	460c      	mov	r4, r1
1a007a14:	0719      	lsls	r1, r3, #28
1a007a16:	9000      	str	r0, [sp, #0]
1a007a18:	4616      	mov	r6, r2
1a007a1a:	d526      	bpl.n	1a007a6a <__sfvwrite_r+0x66>
1a007a1c:	6922      	ldr	r2, [r4, #16]
1a007a1e:	b322      	cbz	r2, 1a007a6a <__sfvwrite_r+0x66>
1a007a20:	f013 0002 	ands.w	r0, r3, #2
1a007a24:	6835      	ldr	r5, [r6, #0]
1a007a26:	d02c      	beq.n	1a007a82 <__sfvwrite_r+0x7e>
1a007a28:	f04f 0900 	mov.w	r9, #0
1a007a2c:	4fb0      	ldr	r7, [pc, #704]	; (1a007cf0 <__sfvwrite_r+0x2ec>)
1a007a2e:	46c8      	mov	r8, r9
1a007a30:	46b2      	mov	sl, r6
1a007a32:	45b8      	cmp	r8, r7
1a007a34:	4643      	mov	r3, r8
1a007a36:	464a      	mov	r2, r9
1a007a38:	bf28      	it	cs
1a007a3a:	463b      	movcs	r3, r7
1a007a3c:	9800      	ldr	r0, [sp, #0]
1a007a3e:	f1b8 0f00 	cmp.w	r8, #0
1a007a42:	d050      	beq.n	1a007ae6 <__sfvwrite_r+0xe2>
1a007a44:	69e1      	ldr	r1, [r4, #28]
1a007a46:	6a66      	ldr	r6, [r4, #36]	; 0x24
1a007a48:	47b0      	blx	r6
1a007a4a:	2800      	cmp	r0, #0
1a007a4c:	dd58      	ble.n	1a007b00 <__sfvwrite_r+0xfc>
1a007a4e:	f8da 3008 	ldr.w	r3, [sl, #8]
1a007a52:	1a1b      	subs	r3, r3, r0
1a007a54:	4481      	add	r9, r0
1a007a56:	eba8 0800 	sub.w	r8, r8, r0
1a007a5a:	f8ca 3008 	str.w	r3, [sl, #8]
1a007a5e:	2b00      	cmp	r3, #0
1a007a60:	d1e7      	bne.n	1a007a32 <__sfvwrite_r+0x2e>
1a007a62:	2000      	movs	r0, #0
1a007a64:	b003      	add	sp, #12
1a007a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007a6a:	4621      	mov	r1, r4
1a007a6c:	9800      	ldr	r0, [sp, #0]
1a007a6e:	f7fe ffab 	bl	1a0069c8 <__swsetup_r>
1a007a72:	2800      	cmp	r0, #0
1a007a74:	f040 8133 	bne.w	1a007cde <__sfvwrite_r+0x2da>
1a007a78:	89a3      	ldrh	r3, [r4, #12]
1a007a7a:	6835      	ldr	r5, [r6, #0]
1a007a7c:	f013 0002 	ands.w	r0, r3, #2
1a007a80:	d1d2      	bne.n	1a007a28 <__sfvwrite_r+0x24>
1a007a82:	f013 0901 	ands.w	r9, r3, #1
1a007a86:	d145      	bne.n	1a007b14 <__sfvwrite_r+0x110>
1a007a88:	464f      	mov	r7, r9
1a007a8a:	9601      	str	r6, [sp, #4]
1a007a8c:	b337      	cbz	r7, 1a007adc <__sfvwrite_r+0xd8>
1a007a8e:	059a      	lsls	r2, r3, #22
1a007a90:	f8d4 8008 	ldr.w	r8, [r4, #8]
1a007a94:	f140 8083 	bpl.w	1a007b9e <__sfvwrite_r+0x19a>
1a007a98:	4547      	cmp	r7, r8
1a007a9a:	46c3      	mov	fp, r8
1a007a9c:	f0c0 80ab 	bcc.w	1a007bf6 <__sfvwrite_r+0x1f2>
1a007aa0:	f413 6f90 	tst.w	r3, #1152	; 0x480
1a007aa4:	f040 80ac 	bne.w	1a007c00 <__sfvwrite_r+0x1fc>
1a007aa8:	6820      	ldr	r0, [r4, #0]
1a007aaa:	46ba      	mov	sl, r7
1a007aac:	465a      	mov	r2, fp
1a007aae:	4649      	mov	r1, r9
1a007ab0:	f000 fa26 	bl	1a007f00 <memmove>
1a007ab4:	68a2      	ldr	r2, [r4, #8]
1a007ab6:	6823      	ldr	r3, [r4, #0]
1a007ab8:	eba2 0208 	sub.w	r2, r2, r8
1a007abc:	445b      	add	r3, fp
1a007abe:	60a2      	str	r2, [r4, #8]
1a007ac0:	6023      	str	r3, [r4, #0]
1a007ac2:	9a01      	ldr	r2, [sp, #4]
1a007ac4:	6893      	ldr	r3, [r2, #8]
1a007ac6:	eba3 030a 	sub.w	r3, r3, sl
1a007aca:	44d1      	add	r9, sl
1a007acc:	eba7 070a 	sub.w	r7, r7, sl
1a007ad0:	6093      	str	r3, [r2, #8]
1a007ad2:	2b00      	cmp	r3, #0
1a007ad4:	d0c5      	beq.n	1a007a62 <__sfvwrite_r+0x5e>
1a007ad6:	89a3      	ldrh	r3, [r4, #12]
1a007ad8:	2f00      	cmp	r7, #0
1a007ada:	d1d8      	bne.n	1a007a8e <__sfvwrite_r+0x8a>
1a007adc:	f8d5 9000 	ldr.w	r9, [r5]
1a007ae0:	686f      	ldr	r7, [r5, #4]
1a007ae2:	3508      	adds	r5, #8
1a007ae4:	e7d2      	b.n	1a007a8c <__sfvwrite_r+0x88>
1a007ae6:	f8d5 9000 	ldr.w	r9, [r5]
1a007aea:	f8d5 8004 	ldr.w	r8, [r5, #4]
1a007aee:	3508      	adds	r5, #8
1a007af0:	e79f      	b.n	1a007a32 <__sfvwrite_r+0x2e>
1a007af2:	2000      	movs	r0, #0
1a007af4:	4770      	bx	lr
1a007af6:	4621      	mov	r1, r4
1a007af8:	9800      	ldr	r0, [sp, #0]
1a007afa:	f7fc fd1b 	bl	1a004534 <_fflush_r>
1a007afe:	b370      	cbz	r0, 1a007b5e <__sfvwrite_r+0x15a>
1a007b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a007b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a007b0c:	81a3      	strh	r3, [r4, #12]
1a007b0e:	b003      	add	sp, #12
1a007b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007b14:	4681      	mov	r9, r0
1a007b16:	4633      	mov	r3, r6
1a007b18:	464e      	mov	r6, r9
1a007b1a:	46a8      	mov	r8, r5
1a007b1c:	469a      	mov	sl, r3
1a007b1e:	464d      	mov	r5, r9
1a007b20:	b34e      	cbz	r6, 1a007b76 <__sfvwrite_r+0x172>
1a007b22:	b380      	cbz	r0, 1a007b86 <__sfvwrite_r+0x182>
1a007b24:	6820      	ldr	r0, [r4, #0]
1a007b26:	6923      	ldr	r3, [r4, #16]
1a007b28:	6962      	ldr	r2, [r4, #20]
1a007b2a:	45b1      	cmp	r9, r6
1a007b2c:	46cb      	mov	fp, r9
1a007b2e:	bf28      	it	cs
1a007b30:	46b3      	movcs	fp, r6
1a007b32:	4298      	cmp	r0, r3
1a007b34:	465f      	mov	r7, fp
1a007b36:	d904      	bls.n	1a007b42 <__sfvwrite_r+0x13e>
1a007b38:	68a3      	ldr	r3, [r4, #8]
1a007b3a:	4413      	add	r3, r2
1a007b3c:	459b      	cmp	fp, r3
1a007b3e:	f300 80a6 	bgt.w	1a007c8e <__sfvwrite_r+0x28a>
1a007b42:	4593      	cmp	fp, r2
1a007b44:	db4b      	blt.n	1a007bde <__sfvwrite_r+0x1da>
1a007b46:	4613      	mov	r3, r2
1a007b48:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a007b4a:	69e1      	ldr	r1, [r4, #28]
1a007b4c:	9800      	ldr	r0, [sp, #0]
1a007b4e:	462a      	mov	r2, r5
1a007b50:	47b8      	blx	r7
1a007b52:	1e07      	subs	r7, r0, #0
1a007b54:	ddd4      	ble.n	1a007b00 <__sfvwrite_r+0xfc>
1a007b56:	ebb9 0907 	subs.w	r9, r9, r7
1a007b5a:	d0cc      	beq.n	1a007af6 <__sfvwrite_r+0xf2>
1a007b5c:	2001      	movs	r0, #1
1a007b5e:	f8da 3008 	ldr.w	r3, [sl, #8]
1a007b62:	1bdb      	subs	r3, r3, r7
1a007b64:	443d      	add	r5, r7
1a007b66:	1bf6      	subs	r6, r6, r7
1a007b68:	f8ca 3008 	str.w	r3, [sl, #8]
1a007b6c:	2b00      	cmp	r3, #0
1a007b6e:	f43f af78 	beq.w	1a007a62 <__sfvwrite_r+0x5e>
1a007b72:	2e00      	cmp	r6, #0
1a007b74:	d1d5      	bne.n	1a007b22 <__sfvwrite_r+0x11e>
1a007b76:	f108 0308 	add.w	r3, r8, #8
1a007b7a:	e913 0060 	ldmdb	r3, {r5, r6}
1a007b7e:	4698      	mov	r8, r3
1a007b80:	3308      	adds	r3, #8
1a007b82:	2e00      	cmp	r6, #0
1a007b84:	d0f9      	beq.n	1a007b7a <__sfvwrite_r+0x176>
1a007b86:	4632      	mov	r2, r6
1a007b88:	210a      	movs	r1, #10
1a007b8a:	4628      	mov	r0, r5
1a007b8c:	f000 f968 	bl	1a007e60 <memchr>
1a007b90:	2800      	cmp	r0, #0
1a007b92:	f000 80a1 	beq.w	1a007cd8 <__sfvwrite_r+0x2d4>
1a007b96:	3001      	adds	r0, #1
1a007b98:	eba0 0905 	sub.w	r9, r0, r5
1a007b9c:	e7c2      	b.n	1a007b24 <__sfvwrite_r+0x120>
1a007b9e:	6820      	ldr	r0, [r4, #0]
1a007ba0:	6923      	ldr	r3, [r4, #16]
1a007ba2:	4298      	cmp	r0, r3
1a007ba4:	d802      	bhi.n	1a007bac <__sfvwrite_r+0x1a8>
1a007ba6:	6963      	ldr	r3, [r4, #20]
1a007ba8:	429f      	cmp	r7, r3
1a007baa:	d25d      	bcs.n	1a007c68 <__sfvwrite_r+0x264>
1a007bac:	45b8      	cmp	r8, r7
1a007bae:	bf28      	it	cs
1a007bb0:	46b8      	movcs	r8, r7
1a007bb2:	4642      	mov	r2, r8
1a007bb4:	4649      	mov	r1, r9
1a007bb6:	f000 f9a3 	bl	1a007f00 <memmove>
1a007bba:	68a3      	ldr	r3, [r4, #8]
1a007bbc:	6822      	ldr	r2, [r4, #0]
1a007bbe:	eba3 0308 	sub.w	r3, r3, r8
1a007bc2:	4442      	add	r2, r8
1a007bc4:	60a3      	str	r3, [r4, #8]
1a007bc6:	6022      	str	r2, [r4, #0]
1a007bc8:	b10b      	cbz	r3, 1a007bce <__sfvwrite_r+0x1ca>
1a007bca:	46c2      	mov	sl, r8
1a007bcc:	e779      	b.n	1a007ac2 <__sfvwrite_r+0xbe>
1a007bce:	4621      	mov	r1, r4
1a007bd0:	9800      	ldr	r0, [sp, #0]
1a007bd2:	f7fc fcaf 	bl	1a004534 <_fflush_r>
1a007bd6:	2800      	cmp	r0, #0
1a007bd8:	d192      	bne.n	1a007b00 <__sfvwrite_r+0xfc>
1a007bda:	46c2      	mov	sl, r8
1a007bdc:	e771      	b.n	1a007ac2 <__sfvwrite_r+0xbe>
1a007bde:	465a      	mov	r2, fp
1a007be0:	4629      	mov	r1, r5
1a007be2:	f000 f98d 	bl	1a007f00 <memmove>
1a007be6:	68a2      	ldr	r2, [r4, #8]
1a007be8:	6823      	ldr	r3, [r4, #0]
1a007bea:	eba2 020b 	sub.w	r2, r2, fp
1a007bee:	445b      	add	r3, fp
1a007bf0:	60a2      	str	r2, [r4, #8]
1a007bf2:	6023      	str	r3, [r4, #0]
1a007bf4:	e7af      	b.n	1a007b56 <__sfvwrite_r+0x152>
1a007bf6:	6820      	ldr	r0, [r4, #0]
1a007bf8:	46b8      	mov	r8, r7
1a007bfa:	46ba      	mov	sl, r7
1a007bfc:	46bb      	mov	fp, r7
1a007bfe:	e755      	b.n	1a007aac <__sfvwrite_r+0xa8>
1a007c00:	6962      	ldr	r2, [r4, #20]
1a007c02:	6820      	ldr	r0, [r4, #0]
1a007c04:	6921      	ldr	r1, [r4, #16]
1a007c06:	eb02 0842 	add.w	r8, r2, r2, lsl #1
1a007c0a:	eba0 0a01 	sub.w	sl, r0, r1
1a007c0e:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
1a007c12:	f10a 0001 	add.w	r0, sl, #1
1a007c16:	ea4f 0868 	mov.w	r8, r8, asr #1
1a007c1a:	4438      	add	r0, r7
1a007c1c:	4540      	cmp	r0, r8
1a007c1e:	4642      	mov	r2, r8
1a007c20:	bf84      	itt	hi
1a007c22:	4680      	movhi	r8, r0
1a007c24:	4642      	movhi	r2, r8
1a007c26:	055b      	lsls	r3, r3, #21
1a007c28:	d544      	bpl.n	1a007cb4 <__sfvwrite_r+0x2b0>
1a007c2a:	4611      	mov	r1, r2
1a007c2c:	9800      	ldr	r0, [sp, #0]
1a007c2e:	f7fc ff61 	bl	1a004af4 <_malloc_r>
1a007c32:	4683      	mov	fp, r0
1a007c34:	2800      	cmp	r0, #0
1a007c36:	d055      	beq.n	1a007ce4 <__sfvwrite_r+0x2e0>
1a007c38:	4652      	mov	r2, sl
1a007c3a:	6921      	ldr	r1, [r4, #16]
1a007c3c:	f7fd fa04 	bl	1a005048 <memcpy>
1a007c40:	89a3      	ldrh	r3, [r4, #12]
1a007c42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
1a007c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a007c4a:	81a3      	strh	r3, [r4, #12]
1a007c4c:	eb0b 000a 	add.w	r0, fp, sl
1a007c50:	eba8 030a 	sub.w	r3, r8, sl
1a007c54:	f8c4 b010 	str.w	fp, [r4, #16]
1a007c58:	f8c4 8014 	str.w	r8, [r4, #20]
1a007c5c:	6020      	str	r0, [r4, #0]
1a007c5e:	60a3      	str	r3, [r4, #8]
1a007c60:	46b8      	mov	r8, r7
1a007c62:	46ba      	mov	sl, r7
1a007c64:	46bb      	mov	fp, r7
1a007c66:	e721      	b.n	1a007aac <__sfvwrite_r+0xa8>
1a007c68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
1a007c6c:	42b9      	cmp	r1, r7
1a007c6e:	bf28      	it	cs
1a007c70:	4639      	movcs	r1, r7
1a007c72:	464a      	mov	r2, r9
1a007c74:	fb91 f1f3 	sdiv	r1, r1, r3
1a007c78:	9800      	ldr	r0, [sp, #0]
1a007c7a:	6a66      	ldr	r6, [r4, #36]	; 0x24
1a007c7c:	fb03 f301 	mul.w	r3, r3, r1
1a007c80:	69e1      	ldr	r1, [r4, #28]
1a007c82:	47b0      	blx	r6
1a007c84:	f1b0 0a00 	subs.w	sl, r0, #0
1a007c88:	f73f af1b 	bgt.w	1a007ac2 <__sfvwrite_r+0xbe>
1a007c8c:	e738      	b.n	1a007b00 <__sfvwrite_r+0xfc>
1a007c8e:	461a      	mov	r2, r3
1a007c90:	4629      	mov	r1, r5
1a007c92:	9301      	str	r3, [sp, #4]
1a007c94:	f000 f934 	bl	1a007f00 <memmove>
1a007c98:	6822      	ldr	r2, [r4, #0]
1a007c9a:	9b01      	ldr	r3, [sp, #4]
1a007c9c:	9800      	ldr	r0, [sp, #0]
1a007c9e:	441a      	add	r2, r3
1a007ca0:	6022      	str	r2, [r4, #0]
1a007ca2:	4621      	mov	r1, r4
1a007ca4:	f7fc fc46 	bl	1a004534 <_fflush_r>
1a007ca8:	9b01      	ldr	r3, [sp, #4]
1a007caa:	2800      	cmp	r0, #0
1a007cac:	f47f af28 	bne.w	1a007b00 <__sfvwrite_r+0xfc>
1a007cb0:	461f      	mov	r7, r3
1a007cb2:	e750      	b.n	1a007b56 <__sfvwrite_r+0x152>
1a007cb4:	9800      	ldr	r0, [sp, #0]
1a007cb6:	f000 fe01 	bl	1a0088bc <_realloc_r>
1a007cba:	4683      	mov	fp, r0
1a007cbc:	2800      	cmp	r0, #0
1a007cbe:	d1c5      	bne.n	1a007c4c <__sfvwrite_r+0x248>
1a007cc0:	9d00      	ldr	r5, [sp, #0]
1a007cc2:	6921      	ldr	r1, [r4, #16]
1a007cc4:	4628      	mov	r0, r5
1a007cc6:	f7fc fdb7 	bl	1a004838 <_free_r>
1a007cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007cce:	220c      	movs	r2, #12
1a007cd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a007cd4:	602a      	str	r2, [r5, #0]
1a007cd6:	e715      	b.n	1a007b04 <__sfvwrite_r+0x100>
1a007cd8:	f106 0901 	add.w	r9, r6, #1
1a007cdc:	e722      	b.n	1a007b24 <__sfvwrite_r+0x120>
1a007cde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a007ce2:	e6bf      	b.n	1a007a64 <__sfvwrite_r+0x60>
1a007ce4:	9a00      	ldr	r2, [sp, #0]
1a007ce6:	230c      	movs	r3, #12
1a007ce8:	6013      	str	r3, [r2, #0]
1a007cea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007cee:	e709      	b.n	1a007b04 <__sfvwrite_r+0x100>
1a007cf0:	7ffffc00 	.word	0x7ffffc00

1a007cf4 <_setlocale_r>:
1a007cf4:	b1b2      	cbz	r2, 1a007d24 <_setlocale_r+0x30>
1a007cf6:	b510      	push	{r4, lr}
1a007cf8:	490b      	ldr	r1, [pc, #44]	; (1a007d28 <_setlocale_r+0x34>)
1a007cfa:	4610      	mov	r0, r2
1a007cfc:	4614      	mov	r4, r2
1a007cfe:	f000 ff93 	bl	1a008c28 <strcmp>
1a007d02:	b908      	cbnz	r0, 1a007d08 <_setlocale_r+0x14>
1a007d04:	4809      	ldr	r0, [pc, #36]	; (1a007d2c <_setlocale_r+0x38>)
1a007d06:	bd10      	pop	{r4, pc}
1a007d08:	4908      	ldr	r1, [pc, #32]	; (1a007d2c <_setlocale_r+0x38>)
1a007d0a:	4620      	mov	r0, r4
1a007d0c:	f000 ff8c 	bl	1a008c28 <strcmp>
1a007d10:	2800      	cmp	r0, #0
1a007d12:	d0f7      	beq.n	1a007d04 <_setlocale_r+0x10>
1a007d14:	4620      	mov	r0, r4
1a007d16:	4906      	ldr	r1, [pc, #24]	; (1a007d30 <_setlocale_r+0x3c>)
1a007d18:	f000 ff86 	bl	1a008c28 <strcmp>
1a007d1c:	2800      	cmp	r0, #0
1a007d1e:	d0f1      	beq.n	1a007d04 <_setlocale_r+0x10>
1a007d20:	2000      	movs	r0, #0
1a007d22:	bd10      	pop	{r4, pc}
1a007d24:	4801      	ldr	r0, [pc, #4]	; (1a007d2c <_setlocale_r+0x38>)
1a007d26:	4770      	bx	lr
1a007d28:	1a00a324 	.word	0x1a00a324
1a007d2c:	1a00a2ac 	.word	0x1a00a2ac
1a007d30:	1a009fec 	.word	0x1a009fec

1a007d34 <__locale_charset>:
1a007d34:	4800      	ldr	r0, [pc, #0]	; (1a007d38 <__locale_charset+0x4>)
1a007d36:	4770      	bx	lr
1a007d38:	10000880 	.word	0x10000880

1a007d3c <__locale_mb_cur_max>:
1a007d3c:	4b01      	ldr	r3, [pc, #4]	; (1a007d44 <__locale_mb_cur_max+0x8>)
1a007d3e:	6a18      	ldr	r0, [r3, #32]
1a007d40:	4770      	bx	lr
1a007d42:	bf00      	nop
1a007d44:	10000880 	.word	0x10000880

1a007d48 <__locale_msgcharset>:
1a007d48:	4800      	ldr	r0, [pc, #0]	; (1a007d4c <__locale_msgcharset+0x4>)
1a007d4a:	4770      	bx	lr
1a007d4c:	100008a4 	.word	0x100008a4

1a007d50 <__locale_cjk_lang>:
1a007d50:	2000      	movs	r0, #0
1a007d52:	4770      	bx	lr

1a007d54 <_localeconv_r>:
1a007d54:	4800      	ldr	r0, [pc, #0]	; (1a007d58 <_localeconv_r+0x4>)
1a007d56:	4770      	bx	lr
1a007d58:	100008c4 	.word	0x100008c4

1a007d5c <setlocale>:
1a007d5c:	4b02      	ldr	r3, [pc, #8]	; (1a007d68 <setlocale+0xc>)
1a007d5e:	460a      	mov	r2, r1
1a007d60:	4601      	mov	r1, r0
1a007d62:	6818      	ldr	r0, [r3, #0]
1a007d64:	f7ff bfc6 	b.w	1a007cf4 <_setlocale_r>
1a007d68:	10000040 	.word	0x10000040

1a007d6c <localeconv>:
1a007d6c:	4800      	ldr	r0, [pc, #0]	; (1a007d70 <localeconv+0x4>)
1a007d6e:	4770      	bx	lr
1a007d70:	100008c4 	.word	0x100008c4

1a007d74 <__swhatbuf_r>:
1a007d74:	b570      	push	{r4, r5, r6, lr}
1a007d76:	460c      	mov	r4, r1
1a007d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a007d7c:	2900      	cmp	r1, #0
1a007d7e:	b090      	sub	sp, #64	; 0x40
1a007d80:	4615      	mov	r5, r2
1a007d82:	461e      	mov	r6, r3
1a007d84:	db14      	blt.n	1a007db0 <__swhatbuf_r+0x3c>
1a007d86:	aa01      	add	r2, sp, #4
1a007d88:	f7f8 fc15 	bl	1a0005b6 <_fstat_r>
1a007d8c:	2800      	cmp	r0, #0
1a007d8e:	db0f      	blt.n	1a007db0 <__swhatbuf_r+0x3c>
1a007d90:	9a02      	ldr	r2, [sp, #8]
1a007d92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a007d96:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
1a007d9a:	fab2 f282 	clz	r2, r2
1a007d9e:	0952      	lsrs	r2, r2, #5
1a007da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a007da4:	f44f 6000 	mov.w	r0, #2048	; 0x800
1a007da8:	6032      	str	r2, [r6, #0]
1a007daa:	602b      	str	r3, [r5, #0]
1a007dac:	b010      	add	sp, #64	; 0x40
1a007dae:	bd70      	pop	{r4, r5, r6, pc}
1a007db0:	89a2      	ldrh	r2, [r4, #12]
1a007db2:	2300      	movs	r3, #0
1a007db4:	f012 0080 	ands.w	r0, r2, #128	; 0x80
1a007db8:	6033      	str	r3, [r6, #0]
1a007dba:	d004      	beq.n	1a007dc6 <__swhatbuf_r+0x52>
1a007dbc:	2240      	movs	r2, #64	; 0x40
1a007dbe:	4618      	mov	r0, r3
1a007dc0:	602a      	str	r2, [r5, #0]
1a007dc2:	b010      	add	sp, #64	; 0x40
1a007dc4:	bd70      	pop	{r4, r5, r6, pc}
1a007dc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a007dca:	602b      	str	r3, [r5, #0]
1a007dcc:	b010      	add	sp, #64	; 0x40
1a007dce:	bd70      	pop	{r4, r5, r6, pc}

1a007dd0 <__smakebuf_r>:
1a007dd0:	898a      	ldrh	r2, [r1, #12]
1a007dd2:	0792      	lsls	r2, r2, #30
1a007dd4:	460b      	mov	r3, r1
1a007dd6:	d506      	bpl.n	1a007de6 <__smakebuf_r+0x16>
1a007dd8:	f101 0243 	add.w	r2, r1, #67	; 0x43
1a007ddc:	2101      	movs	r1, #1
1a007dde:	601a      	str	r2, [r3, #0]
1a007de0:	611a      	str	r2, [r3, #16]
1a007de2:	6159      	str	r1, [r3, #20]
1a007de4:	4770      	bx	lr
1a007de6:	b5f0      	push	{r4, r5, r6, r7, lr}
1a007de8:	b083      	sub	sp, #12
1a007dea:	ab01      	add	r3, sp, #4
1a007dec:	466a      	mov	r2, sp
1a007dee:	460c      	mov	r4, r1
1a007df0:	4605      	mov	r5, r0
1a007df2:	f7ff ffbf 	bl	1a007d74 <__swhatbuf_r>
1a007df6:	9900      	ldr	r1, [sp, #0]
1a007df8:	4606      	mov	r6, r0
1a007dfa:	4628      	mov	r0, r5
1a007dfc:	f7fc fe7a 	bl	1a004af4 <_malloc_r>
1a007e00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007e04:	b1d0      	cbz	r0, 1a007e3c <__smakebuf_r+0x6c>
1a007e06:	9a01      	ldr	r2, [sp, #4]
1a007e08:	4f12      	ldr	r7, [pc, #72]	; (1a007e54 <__smakebuf_r+0x84>)
1a007e0a:	9900      	ldr	r1, [sp, #0]
1a007e0c:	63ef      	str	r7, [r5, #60]	; 0x3c
1a007e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a007e12:	81a3      	strh	r3, [r4, #12]
1a007e14:	6020      	str	r0, [r4, #0]
1a007e16:	6120      	str	r0, [r4, #16]
1a007e18:	6161      	str	r1, [r4, #20]
1a007e1a:	b91a      	cbnz	r2, 1a007e24 <__smakebuf_r+0x54>
1a007e1c:	4333      	orrs	r3, r6
1a007e1e:	81a3      	strh	r3, [r4, #12]
1a007e20:	b003      	add	sp, #12
1a007e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a007e24:	4628      	mov	r0, r5
1a007e26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a007e2a:	f7f8 fbc9 	bl	1a0005c0 <_isatty_r>
1a007e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007e32:	2800      	cmp	r0, #0
1a007e34:	d0f2      	beq.n	1a007e1c <__smakebuf_r+0x4c>
1a007e36:	f043 0301 	orr.w	r3, r3, #1
1a007e3a:	e7ef      	b.n	1a007e1c <__smakebuf_r+0x4c>
1a007e3c:	059a      	lsls	r2, r3, #22
1a007e3e:	d4ef      	bmi.n	1a007e20 <__smakebuf_r+0x50>
1a007e40:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a007e44:	f043 0302 	orr.w	r3, r3, #2
1a007e48:	2101      	movs	r1, #1
1a007e4a:	81a3      	strh	r3, [r4, #12]
1a007e4c:	6022      	str	r2, [r4, #0]
1a007e4e:	6122      	str	r2, [r4, #16]
1a007e50:	6161      	str	r1, [r4, #20]
1a007e52:	e7e5      	b.n	1a007e20 <__smakebuf_r+0x50>
1a007e54:	1a004589 	.word	0x1a004589
1a007e58:	ffffffff 	.word	0xffffffff
1a007e5c:	ffffffff 	.word	0xffffffff

1a007e60 <memchr>:
1a007e60:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a007e64:	2a10      	cmp	r2, #16
1a007e66:	db2b      	blt.n	1a007ec0 <memchr+0x60>
1a007e68:	f010 0f07 	tst.w	r0, #7
1a007e6c:	d008      	beq.n	1a007e80 <memchr+0x20>
1a007e6e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a007e72:	3a01      	subs	r2, #1
1a007e74:	428b      	cmp	r3, r1
1a007e76:	d02d      	beq.n	1a007ed4 <memchr+0x74>
1a007e78:	f010 0f07 	tst.w	r0, #7
1a007e7c:	b342      	cbz	r2, 1a007ed0 <memchr+0x70>
1a007e7e:	d1f6      	bne.n	1a007e6e <memchr+0xe>
1a007e80:	b4f0      	push	{r4, r5, r6, r7}
1a007e82:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a007e86:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a007e8a:	f022 0407 	bic.w	r4, r2, #7
1a007e8e:	f07f 0700 	mvns.w	r7, #0
1a007e92:	2300      	movs	r3, #0
1a007e94:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a007e98:	3c08      	subs	r4, #8
1a007e9a:	ea85 0501 	eor.w	r5, r5, r1
1a007e9e:	ea86 0601 	eor.w	r6, r6, r1
1a007ea2:	fa85 f547 	uadd8	r5, r5, r7
1a007ea6:	faa3 f587 	sel	r5, r3, r7
1a007eaa:	fa86 f647 	uadd8	r6, r6, r7
1a007eae:	faa5 f687 	sel	r6, r5, r7
1a007eb2:	b98e      	cbnz	r6, 1a007ed8 <memchr+0x78>
1a007eb4:	d1ee      	bne.n	1a007e94 <memchr+0x34>
1a007eb6:	bcf0      	pop	{r4, r5, r6, r7}
1a007eb8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a007ebc:	f002 0207 	and.w	r2, r2, #7
1a007ec0:	b132      	cbz	r2, 1a007ed0 <memchr+0x70>
1a007ec2:	f810 3b01 	ldrb.w	r3, [r0], #1
1a007ec6:	3a01      	subs	r2, #1
1a007ec8:	ea83 0301 	eor.w	r3, r3, r1
1a007ecc:	b113      	cbz	r3, 1a007ed4 <memchr+0x74>
1a007ece:	d1f8      	bne.n	1a007ec2 <memchr+0x62>
1a007ed0:	2000      	movs	r0, #0
1a007ed2:	4770      	bx	lr
1a007ed4:	3801      	subs	r0, #1
1a007ed6:	4770      	bx	lr
1a007ed8:	2d00      	cmp	r5, #0
1a007eda:	bf06      	itte	eq
1a007edc:	4635      	moveq	r5, r6
1a007ede:	3803      	subeq	r0, #3
1a007ee0:	3807      	subne	r0, #7
1a007ee2:	f015 0f01 	tst.w	r5, #1
1a007ee6:	d107      	bne.n	1a007ef8 <memchr+0x98>
1a007ee8:	3001      	adds	r0, #1
1a007eea:	f415 7f80 	tst.w	r5, #256	; 0x100
1a007eee:	bf02      	ittt	eq
1a007ef0:	3001      	addeq	r0, #1
1a007ef2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a007ef6:	3001      	addeq	r0, #1
1a007ef8:	bcf0      	pop	{r4, r5, r6, r7}
1a007efa:	3801      	subs	r0, #1
1a007efc:	4770      	bx	lr
1a007efe:	bf00      	nop

1a007f00 <memmove>:
1a007f00:	4288      	cmp	r0, r1
1a007f02:	b5f0      	push	{r4, r5, r6, r7, lr}
1a007f04:	d90d      	bls.n	1a007f22 <memmove+0x22>
1a007f06:	188b      	adds	r3, r1, r2
1a007f08:	4298      	cmp	r0, r3
1a007f0a:	d20a      	bcs.n	1a007f22 <memmove+0x22>
1a007f0c:	1884      	adds	r4, r0, r2
1a007f0e:	2a00      	cmp	r2, #0
1a007f10:	d051      	beq.n	1a007fb6 <memmove+0xb6>
1a007f12:	4622      	mov	r2, r4
1a007f14:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a007f18:	f802 4d01 	strb.w	r4, [r2, #-1]!
1a007f1c:	4299      	cmp	r1, r3
1a007f1e:	d1f9      	bne.n	1a007f14 <memmove+0x14>
1a007f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a007f22:	2a0f      	cmp	r2, #15
1a007f24:	d948      	bls.n	1a007fb8 <memmove+0xb8>
1a007f26:	ea41 0300 	orr.w	r3, r1, r0
1a007f2a:	079b      	lsls	r3, r3, #30
1a007f2c:	d146      	bne.n	1a007fbc <memmove+0xbc>
1a007f2e:	f100 0410 	add.w	r4, r0, #16
1a007f32:	f101 0310 	add.w	r3, r1, #16
1a007f36:	4615      	mov	r5, r2
1a007f38:	f853 6c10 	ldr.w	r6, [r3, #-16]
1a007f3c:	f844 6c10 	str.w	r6, [r4, #-16]
1a007f40:	f853 6c0c 	ldr.w	r6, [r3, #-12]
1a007f44:	f844 6c0c 	str.w	r6, [r4, #-12]
1a007f48:	f853 6c08 	ldr.w	r6, [r3, #-8]
1a007f4c:	f844 6c08 	str.w	r6, [r4, #-8]
1a007f50:	3d10      	subs	r5, #16
1a007f52:	f853 6c04 	ldr.w	r6, [r3, #-4]
1a007f56:	f844 6c04 	str.w	r6, [r4, #-4]
1a007f5a:	2d0f      	cmp	r5, #15
1a007f5c:	f103 0310 	add.w	r3, r3, #16
1a007f60:	f104 0410 	add.w	r4, r4, #16
1a007f64:	d8e8      	bhi.n	1a007f38 <memmove+0x38>
1a007f66:	f1a2 0310 	sub.w	r3, r2, #16
1a007f6a:	f023 030f 	bic.w	r3, r3, #15
1a007f6e:	f002 0e0f 	and.w	lr, r2, #15
1a007f72:	3310      	adds	r3, #16
1a007f74:	f1be 0f03 	cmp.w	lr, #3
1a007f78:	4419      	add	r1, r3
1a007f7a:	4403      	add	r3, r0
1a007f7c:	d921      	bls.n	1a007fc2 <memmove+0xc2>
1a007f7e:	1f1e      	subs	r6, r3, #4
1a007f80:	460d      	mov	r5, r1
1a007f82:	4674      	mov	r4, lr
1a007f84:	3c04      	subs	r4, #4
1a007f86:	f855 7b04 	ldr.w	r7, [r5], #4
1a007f8a:	f846 7f04 	str.w	r7, [r6, #4]!
1a007f8e:	2c03      	cmp	r4, #3
1a007f90:	d8f8      	bhi.n	1a007f84 <memmove+0x84>
1a007f92:	f1ae 0404 	sub.w	r4, lr, #4
1a007f96:	f024 0403 	bic.w	r4, r4, #3
1a007f9a:	3404      	adds	r4, #4
1a007f9c:	4421      	add	r1, r4
1a007f9e:	4423      	add	r3, r4
1a007fa0:	f002 0203 	and.w	r2, r2, #3
1a007fa4:	b162      	cbz	r2, 1a007fc0 <memmove+0xc0>
1a007fa6:	3b01      	subs	r3, #1
1a007fa8:	440a      	add	r2, r1
1a007faa:	f811 4b01 	ldrb.w	r4, [r1], #1
1a007fae:	f803 4f01 	strb.w	r4, [r3, #1]!
1a007fb2:	428a      	cmp	r2, r1
1a007fb4:	d1f9      	bne.n	1a007faa <memmove+0xaa>
1a007fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a007fb8:	4603      	mov	r3, r0
1a007fba:	e7f3      	b.n	1a007fa4 <memmove+0xa4>
1a007fbc:	4603      	mov	r3, r0
1a007fbe:	e7f2      	b.n	1a007fa6 <memmove+0xa6>
1a007fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a007fc2:	4672      	mov	r2, lr
1a007fc4:	e7ee      	b.n	1a007fa4 <memmove+0xa4>
1a007fc6:	bf00      	nop

1a007fc8 <_Balloc>:
1a007fc8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a007fca:	b570      	push	{r4, r5, r6, lr}
1a007fcc:	4605      	mov	r5, r0
1a007fce:	460c      	mov	r4, r1
1a007fd0:	b14b      	cbz	r3, 1a007fe6 <_Balloc+0x1e>
1a007fd2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1a007fd6:	b180      	cbz	r0, 1a007ffa <_Balloc+0x32>
1a007fd8:	6802      	ldr	r2, [r0, #0]
1a007fda:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
1a007fde:	2300      	movs	r3, #0
1a007fe0:	6103      	str	r3, [r0, #16]
1a007fe2:	60c3      	str	r3, [r0, #12]
1a007fe4:	bd70      	pop	{r4, r5, r6, pc}
1a007fe6:	2221      	movs	r2, #33	; 0x21
1a007fe8:	2104      	movs	r1, #4
1a007fea:	f001 fe13 	bl	1a009c14 <_calloc_r>
1a007fee:	64e8      	str	r0, [r5, #76]	; 0x4c
1a007ff0:	4603      	mov	r3, r0
1a007ff2:	2800      	cmp	r0, #0
1a007ff4:	d1ed      	bne.n	1a007fd2 <_Balloc+0xa>
1a007ff6:	2000      	movs	r0, #0
1a007ff8:	bd70      	pop	{r4, r5, r6, pc}
1a007ffa:	2101      	movs	r1, #1
1a007ffc:	fa01 f604 	lsl.w	r6, r1, r4
1a008000:	1d72      	adds	r2, r6, #5
1a008002:	4628      	mov	r0, r5
1a008004:	0092      	lsls	r2, r2, #2
1a008006:	f001 fe05 	bl	1a009c14 <_calloc_r>
1a00800a:	2800      	cmp	r0, #0
1a00800c:	d0f3      	beq.n	1a007ff6 <_Balloc+0x2e>
1a00800e:	6044      	str	r4, [r0, #4]
1a008010:	6086      	str	r6, [r0, #8]
1a008012:	e7e4      	b.n	1a007fde <_Balloc+0x16>

1a008014 <_Bfree>:
1a008014:	b131      	cbz	r1, 1a008024 <_Bfree+0x10>
1a008016:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a008018:	684a      	ldr	r2, [r1, #4]
1a00801a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
1a00801e:	6008      	str	r0, [r1, #0]
1a008020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
1a008024:	4770      	bx	lr
1a008026:	bf00      	nop

1a008028 <__multadd>:
1a008028:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00802a:	690c      	ldr	r4, [r1, #16]
1a00802c:	b083      	sub	sp, #12
1a00802e:	460d      	mov	r5, r1
1a008030:	4606      	mov	r6, r0
1a008032:	f101 0e14 	add.w	lr, r1, #20
1a008036:	2700      	movs	r7, #0
1a008038:	f8de 0000 	ldr.w	r0, [lr]
1a00803c:	b281      	uxth	r1, r0
1a00803e:	fb02 3301 	mla	r3, r2, r1, r3
1a008042:	0c01      	lsrs	r1, r0, #16
1a008044:	0c18      	lsrs	r0, r3, #16
1a008046:	fb02 0101 	mla	r1, r2, r1, r0
1a00804a:	b29b      	uxth	r3, r3
1a00804c:	3701      	adds	r7, #1
1a00804e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
1a008052:	42bc      	cmp	r4, r7
1a008054:	f84e 3b04 	str.w	r3, [lr], #4
1a008058:	ea4f 4311 	mov.w	r3, r1, lsr #16
1a00805c:	dcec      	bgt.n	1a008038 <__multadd+0x10>
1a00805e:	b13b      	cbz	r3, 1a008070 <__multadd+0x48>
1a008060:	68aa      	ldr	r2, [r5, #8]
1a008062:	4294      	cmp	r4, r2
1a008064:	da07      	bge.n	1a008076 <__multadd+0x4e>
1a008066:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a00806a:	3401      	adds	r4, #1
1a00806c:	6153      	str	r3, [r2, #20]
1a00806e:	612c      	str	r4, [r5, #16]
1a008070:	4628      	mov	r0, r5
1a008072:	b003      	add	sp, #12
1a008074:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a008076:	6869      	ldr	r1, [r5, #4]
1a008078:	9301      	str	r3, [sp, #4]
1a00807a:	3101      	adds	r1, #1
1a00807c:	4630      	mov	r0, r6
1a00807e:	f7ff ffa3 	bl	1a007fc8 <_Balloc>
1a008082:	692a      	ldr	r2, [r5, #16]
1a008084:	3202      	adds	r2, #2
1a008086:	f105 010c 	add.w	r1, r5, #12
1a00808a:	4607      	mov	r7, r0
1a00808c:	0092      	lsls	r2, r2, #2
1a00808e:	300c      	adds	r0, #12
1a008090:	f7fc ffda 	bl	1a005048 <memcpy>
1a008094:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
1a008096:	6869      	ldr	r1, [r5, #4]
1a008098:	9b01      	ldr	r3, [sp, #4]
1a00809a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
1a00809e:	6028      	str	r0, [r5, #0]
1a0080a0:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
1a0080a4:	463d      	mov	r5, r7
1a0080a6:	e7de      	b.n	1a008066 <__multadd+0x3e>

1a0080a8 <__s2b>:
1a0080a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0080ac:	4c24      	ldr	r4, [pc, #144]	; (1a008140 <__s2b+0x98>)
1a0080ae:	9e08      	ldr	r6, [sp, #32]
1a0080b0:	461f      	mov	r7, r3
1a0080b2:	3308      	adds	r3, #8
1a0080b4:	fb84 4e03 	smull	r4, lr, r4, r3
1a0080b8:	17db      	asrs	r3, r3, #31
1a0080ba:	ebc3 0e6e 	rsb	lr, r3, lr, asr #1
1a0080be:	f1be 0f01 	cmp.w	lr, #1
1a0080c2:	4605      	mov	r5, r0
1a0080c4:	460c      	mov	r4, r1
1a0080c6:	4690      	mov	r8, r2
1a0080c8:	dd35      	ble.n	1a008136 <__s2b+0x8e>
1a0080ca:	2301      	movs	r3, #1
1a0080cc:	2100      	movs	r1, #0
1a0080ce:	005b      	lsls	r3, r3, #1
1a0080d0:	459e      	cmp	lr, r3
1a0080d2:	f101 0101 	add.w	r1, r1, #1
1a0080d6:	dcfa      	bgt.n	1a0080ce <__s2b+0x26>
1a0080d8:	4628      	mov	r0, r5
1a0080da:	f7ff ff75 	bl	1a007fc8 <_Balloc>
1a0080de:	2301      	movs	r3, #1
1a0080e0:	f1b8 0f09 	cmp.w	r8, #9
1a0080e4:	6146      	str	r6, [r0, #20]
1a0080e6:	6103      	str	r3, [r0, #16]
1a0080e8:	dd21      	ble.n	1a00812e <__s2b+0x86>
1a0080ea:	f104 0909 	add.w	r9, r4, #9
1a0080ee:	464e      	mov	r6, r9
1a0080f0:	4444      	add	r4, r8
1a0080f2:	f816 3b01 	ldrb.w	r3, [r6], #1
1a0080f6:	4601      	mov	r1, r0
1a0080f8:	3b30      	subs	r3, #48	; 0x30
1a0080fa:	220a      	movs	r2, #10
1a0080fc:	4628      	mov	r0, r5
1a0080fe:	f7ff ff93 	bl	1a008028 <__multadd>
1a008102:	42a6      	cmp	r6, r4
1a008104:	d1f5      	bne.n	1a0080f2 <__s2b+0x4a>
1a008106:	f1a8 0408 	sub.w	r4, r8, #8
1a00810a:	444c      	add	r4, r9
1a00810c:	4547      	cmp	r7, r8
1a00810e:	dd14      	ble.n	1a00813a <__s2b+0x92>
1a008110:	eba7 0708 	sub.w	r7, r7, r8
1a008114:	4427      	add	r7, r4
1a008116:	f814 3b01 	ldrb.w	r3, [r4], #1
1a00811a:	4601      	mov	r1, r0
1a00811c:	3b30      	subs	r3, #48	; 0x30
1a00811e:	220a      	movs	r2, #10
1a008120:	4628      	mov	r0, r5
1a008122:	f7ff ff81 	bl	1a008028 <__multadd>
1a008126:	42a7      	cmp	r7, r4
1a008128:	d1f5      	bne.n	1a008116 <__s2b+0x6e>
1a00812a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00812e:	340a      	adds	r4, #10
1a008130:	f04f 0809 	mov.w	r8, #9
1a008134:	e7ea      	b.n	1a00810c <__s2b+0x64>
1a008136:	2100      	movs	r1, #0
1a008138:	e7ce      	b.n	1a0080d8 <__s2b+0x30>
1a00813a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00813e:	bf00      	nop
1a008140:	38e38e39 	.word	0x38e38e39

1a008144 <__hi0bits>:
1a008144:	0c02      	lsrs	r2, r0, #16
1a008146:	0412      	lsls	r2, r2, #16
1a008148:	4603      	mov	r3, r0
1a00814a:	b9b2      	cbnz	r2, 1a00817a <__hi0bits+0x36>
1a00814c:	0403      	lsls	r3, r0, #16
1a00814e:	2010      	movs	r0, #16
1a008150:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
1a008154:	bf04      	itt	eq
1a008156:	021b      	lsleq	r3, r3, #8
1a008158:	3008      	addeq	r0, #8
1a00815a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
1a00815e:	bf04      	itt	eq
1a008160:	011b      	lsleq	r3, r3, #4
1a008162:	3004      	addeq	r0, #4
1a008164:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
1a008168:	bf04      	itt	eq
1a00816a:	009b      	lsleq	r3, r3, #2
1a00816c:	3002      	addeq	r0, #2
1a00816e:	2b00      	cmp	r3, #0
1a008170:	db02      	blt.n	1a008178 <__hi0bits+0x34>
1a008172:	005b      	lsls	r3, r3, #1
1a008174:	d403      	bmi.n	1a00817e <__hi0bits+0x3a>
1a008176:	2020      	movs	r0, #32
1a008178:	4770      	bx	lr
1a00817a:	2000      	movs	r0, #0
1a00817c:	e7e8      	b.n	1a008150 <__hi0bits+0xc>
1a00817e:	3001      	adds	r0, #1
1a008180:	4770      	bx	lr
1a008182:	bf00      	nop

1a008184 <__lo0bits>:
1a008184:	6803      	ldr	r3, [r0, #0]
1a008186:	f013 0207 	ands.w	r2, r3, #7
1a00818a:	4601      	mov	r1, r0
1a00818c:	d007      	beq.n	1a00819e <__lo0bits+0x1a>
1a00818e:	07da      	lsls	r2, r3, #31
1a008190:	d421      	bmi.n	1a0081d6 <__lo0bits+0x52>
1a008192:	0798      	lsls	r0, r3, #30
1a008194:	d421      	bmi.n	1a0081da <__lo0bits+0x56>
1a008196:	089b      	lsrs	r3, r3, #2
1a008198:	600b      	str	r3, [r1, #0]
1a00819a:	2002      	movs	r0, #2
1a00819c:	4770      	bx	lr
1a00819e:	b298      	uxth	r0, r3
1a0081a0:	b198      	cbz	r0, 1a0081ca <__lo0bits+0x46>
1a0081a2:	4610      	mov	r0, r2
1a0081a4:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0081a8:	bf04      	itt	eq
1a0081aa:	0a1b      	lsreq	r3, r3, #8
1a0081ac:	3008      	addeq	r0, #8
1a0081ae:	071a      	lsls	r2, r3, #28
1a0081b0:	bf04      	itt	eq
1a0081b2:	091b      	lsreq	r3, r3, #4
1a0081b4:	3004      	addeq	r0, #4
1a0081b6:	079a      	lsls	r2, r3, #30
1a0081b8:	bf04      	itt	eq
1a0081ba:	089b      	lsreq	r3, r3, #2
1a0081bc:	3002      	addeq	r0, #2
1a0081be:	07da      	lsls	r2, r3, #31
1a0081c0:	d407      	bmi.n	1a0081d2 <__lo0bits+0x4e>
1a0081c2:	085b      	lsrs	r3, r3, #1
1a0081c4:	d104      	bne.n	1a0081d0 <__lo0bits+0x4c>
1a0081c6:	2020      	movs	r0, #32
1a0081c8:	4770      	bx	lr
1a0081ca:	0c1b      	lsrs	r3, r3, #16
1a0081cc:	2010      	movs	r0, #16
1a0081ce:	e7e9      	b.n	1a0081a4 <__lo0bits+0x20>
1a0081d0:	3001      	adds	r0, #1
1a0081d2:	600b      	str	r3, [r1, #0]
1a0081d4:	4770      	bx	lr
1a0081d6:	2000      	movs	r0, #0
1a0081d8:	4770      	bx	lr
1a0081da:	085b      	lsrs	r3, r3, #1
1a0081dc:	600b      	str	r3, [r1, #0]
1a0081de:	2001      	movs	r0, #1
1a0081e0:	4770      	bx	lr
1a0081e2:	bf00      	nop

1a0081e4 <__i2b>:
1a0081e4:	b510      	push	{r4, lr}
1a0081e6:	460c      	mov	r4, r1
1a0081e8:	2101      	movs	r1, #1
1a0081ea:	f7ff feed 	bl	1a007fc8 <_Balloc>
1a0081ee:	2201      	movs	r2, #1
1a0081f0:	6144      	str	r4, [r0, #20]
1a0081f2:	6102      	str	r2, [r0, #16]
1a0081f4:	bd10      	pop	{r4, pc}
1a0081f6:	bf00      	nop

1a0081f8 <__multiply>:
1a0081f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0081fc:	690c      	ldr	r4, [r1, #16]
1a0081fe:	6915      	ldr	r5, [r2, #16]
1a008200:	42ac      	cmp	r4, r5
1a008202:	b083      	sub	sp, #12
1a008204:	468b      	mov	fp, r1
1a008206:	4616      	mov	r6, r2
1a008208:	da04      	bge.n	1a008214 <__multiply+0x1c>
1a00820a:	4622      	mov	r2, r4
1a00820c:	46b3      	mov	fp, r6
1a00820e:	462c      	mov	r4, r5
1a008210:	460e      	mov	r6, r1
1a008212:	4615      	mov	r5, r2
1a008214:	f8db 3008 	ldr.w	r3, [fp, #8]
1a008218:	f8db 1004 	ldr.w	r1, [fp, #4]
1a00821c:	eb04 0805 	add.w	r8, r4, r5
1a008220:	4598      	cmp	r8, r3
1a008222:	bfc8      	it	gt
1a008224:	3101      	addgt	r1, #1
1a008226:	f7ff fecf 	bl	1a007fc8 <_Balloc>
1a00822a:	f100 0914 	add.w	r9, r0, #20
1a00822e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
1a008232:	45d1      	cmp	r9, sl
1a008234:	9000      	str	r0, [sp, #0]
1a008236:	d205      	bcs.n	1a008244 <__multiply+0x4c>
1a008238:	464b      	mov	r3, r9
1a00823a:	2100      	movs	r1, #0
1a00823c:	f843 1b04 	str.w	r1, [r3], #4
1a008240:	459a      	cmp	sl, r3
1a008242:	d8fb      	bhi.n	1a00823c <__multiply+0x44>
1a008244:	f106 0c14 	add.w	ip, r6, #20
1a008248:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
1a00824c:	f10b 0b14 	add.w	fp, fp, #20
1a008250:	459c      	cmp	ip, r3
1a008252:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
1a008256:	d24c      	bcs.n	1a0082f2 <__multiply+0xfa>
1a008258:	f8cd a004 	str.w	sl, [sp, #4]
1a00825c:	469a      	mov	sl, r3
1a00825e:	f8dc 5000 	ldr.w	r5, [ip]
1a008262:	b2af      	uxth	r7, r5
1a008264:	b1ef      	cbz	r7, 1a0082a2 <__multiply+0xaa>
1a008266:	2100      	movs	r1, #0
1a008268:	464d      	mov	r5, r9
1a00826a:	465e      	mov	r6, fp
1a00826c:	460c      	mov	r4, r1
1a00826e:	f856 2b04 	ldr.w	r2, [r6], #4
1a008272:	6828      	ldr	r0, [r5, #0]
1a008274:	b293      	uxth	r3, r2
1a008276:	b281      	uxth	r1, r0
1a008278:	fb07 1303 	mla	r3, r7, r3, r1
1a00827c:	0c12      	lsrs	r2, r2, #16
1a00827e:	0c01      	lsrs	r1, r0, #16
1a008280:	4423      	add	r3, r4
1a008282:	fb07 1102 	mla	r1, r7, r2, r1
1a008286:	eb01 4113 	add.w	r1, r1, r3, lsr #16
1a00828a:	b29b      	uxth	r3, r3
1a00828c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a008290:	45b6      	cmp	lr, r6
1a008292:	f845 3b04 	str.w	r3, [r5], #4
1a008296:	ea4f 4411 	mov.w	r4, r1, lsr #16
1a00829a:	d8e8      	bhi.n	1a00826e <__multiply+0x76>
1a00829c:	602c      	str	r4, [r5, #0]
1a00829e:	f8dc 5000 	ldr.w	r5, [ip]
1a0082a2:	0c2d      	lsrs	r5, r5, #16
1a0082a4:	d01d      	beq.n	1a0082e2 <__multiply+0xea>
1a0082a6:	f8d9 3000 	ldr.w	r3, [r9]
1a0082aa:	4648      	mov	r0, r9
1a0082ac:	461c      	mov	r4, r3
1a0082ae:	4659      	mov	r1, fp
1a0082b0:	2200      	movs	r2, #0
1a0082b2:	880e      	ldrh	r6, [r1, #0]
1a0082b4:	0c24      	lsrs	r4, r4, #16
1a0082b6:	fb05 4406 	mla	r4, r5, r6, r4
1a0082ba:	4422      	add	r2, r4
1a0082bc:	b29b      	uxth	r3, r3
1a0082be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0082c2:	f840 3b04 	str.w	r3, [r0], #4
1a0082c6:	f851 3b04 	ldr.w	r3, [r1], #4
1a0082ca:	6804      	ldr	r4, [r0, #0]
1a0082cc:	0c1b      	lsrs	r3, r3, #16
1a0082ce:	b2a6      	uxth	r6, r4
1a0082d0:	fb05 6303 	mla	r3, r5, r3, r6
1a0082d4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
1a0082d8:	458e      	cmp	lr, r1
1a0082da:	ea4f 4213 	mov.w	r2, r3, lsr #16
1a0082de:	d8e8      	bhi.n	1a0082b2 <__multiply+0xba>
1a0082e0:	6003      	str	r3, [r0, #0]
1a0082e2:	f10c 0c04 	add.w	ip, ip, #4
1a0082e6:	45e2      	cmp	sl, ip
1a0082e8:	f109 0904 	add.w	r9, r9, #4
1a0082ec:	d8b7      	bhi.n	1a00825e <__multiply+0x66>
1a0082ee:	f8dd a004 	ldr.w	sl, [sp, #4]
1a0082f2:	f1b8 0f00 	cmp.w	r8, #0
1a0082f6:	dd0b      	ble.n	1a008310 <__multiply+0x118>
1a0082f8:	f85a 3c04 	ldr.w	r3, [sl, #-4]
1a0082fc:	f1aa 0a04 	sub.w	sl, sl, #4
1a008300:	b11b      	cbz	r3, 1a00830a <__multiply+0x112>
1a008302:	e005      	b.n	1a008310 <__multiply+0x118>
1a008304:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
1a008308:	b913      	cbnz	r3, 1a008310 <__multiply+0x118>
1a00830a:	f1b8 0801 	subs.w	r8, r8, #1
1a00830e:	d1f9      	bne.n	1a008304 <__multiply+0x10c>
1a008310:	9800      	ldr	r0, [sp, #0]
1a008312:	f8c0 8010 	str.w	r8, [r0, #16]
1a008316:	b003      	add	sp, #12
1a008318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a00831c <__pow5mult>:
1a00831c:	f012 0303 	ands.w	r3, r2, #3
1a008320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a008324:	4614      	mov	r4, r2
1a008326:	4607      	mov	r7, r0
1a008328:	d12e      	bne.n	1a008388 <__pow5mult+0x6c>
1a00832a:	460d      	mov	r5, r1
1a00832c:	10a4      	asrs	r4, r4, #2
1a00832e:	d01c      	beq.n	1a00836a <__pow5mult+0x4e>
1a008330:	6cbe      	ldr	r6, [r7, #72]	; 0x48
1a008332:	b396      	cbz	r6, 1a00839a <__pow5mult+0x7e>
1a008334:	07e3      	lsls	r3, r4, #31
1a008336:	f04f 0800 	mov.w	r8, #0
1a00833a:	d406      	bmi.n	1a00834a <__pow5mult+0x2e>
1a00833c:	1064      	asrs	r4, r4, #1
1a00833e:	d014      	beq.n	1a00836a <__pow5mult+0x4e>
1a008340:	6830      	ldr	r0, [r6, #0]
1a008342:	b1a8      	cbz	r0, 1a008370 <__pow5mult+0x54>
1a008344:	4606      	mov	r6, r0
1a008346:	07e3      	lsls	r3, r4, #31
1a008348:	d5f8      	bpl.n	1a00833c <__pow5mult+0x20>
1a00834a:	4632      	mov	r2, r6
1a00834c:	4629      	mov	r1, r5
1a00834e:	4638      	mov	r0, r7
1a008350:	f7ff ff52 	bl	1a0081f8 <__multiply>
1a008354:	b1b5      	cbz	r5, 1a008384 <__pow5mult+0x68>
1a008356:	686a      	ldr	r2, [r5, #4]
1a008358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a00835a:	1064      	asrs	r4, r4, #1
1a00835c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a008360:	6029      	str	r1, [r5, #0]
1a008362:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a008366:	4605      	mov	r5, r0
1a008368:	d1ea      	bne.n	1a008340 <__pow5mult+0x24>
1a00836a:	4628      	mov	r0, r5
1a00836c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a008370:	4632      	mov	r2, r6
1a008372:	4631      	mov	r1, r6
1a008374:	4638      	mov	r0, r7
1a008376:	f7ff ff3f 	bl	1a0081f8 <__multiply>
1a00837a:	6030      	str	r0, [r6, #0]
1a00837c:	f8c0 8000 	str.w	r8, [r0]
1a008380:	4606      	mov	r6, r0
1a008382:	e7e0      	b.n	1a008346 <__pow5mult+0x2a>
1a008384:	4605      	mov	r5, r0
1a008386:	e7d9      	b.n	1a00833c <__pow5mult+0x20>
1a008388:	1e5a      	subs	r2, r3, #1
1a00838a:	4d0b      	ldr	r5, [pc, #44]	; (1a0083b8 <__pow5mult+0x9c>)
1a00838c:	2300      	movs	r3, #0
1a00838e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
1a008392:	f7ff fe49 	bl	1a008028 <__multadd>
1a008396:	4605      	mov	r5, r0
1a008398:	e7c8      	b.n	1a00832c <__pow5mult+0x10>
1a00839a:	2101      	movs	r1, #1
1a00839c:	4638      	mov	r0, r7
1a00839e:	f7ff fe13 	bl	1a007fc8 <_Balloc>
1a0083a2:	f240 2171 	movw	r1, #625	; 0x271
1a0083a6:	2201      	movs	r2, #1
1a0083a8:	2300      	movs	r3, #0
1a0083aa:	6141      	str	r1, [r0, #20]
1a0083ac:	6102      	str	r2, [r0, #16]
1a0083ae:	4606      	mov	r6, r0
1a0083b0:	64b8      	str	r0, [r7, #72]	; 0x48
1a0083b2:	6003      	str	r3, [r0, #0]
1a0083b4:	e7be      	b.n	1a008334 <__pow5mult+0x18>
1a0083b6:	bf00      	nop
1a0083b8:	1a00a330 	.word	0x1a00a330

1a0083bc <__lshift>:
1a0083bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0083c0:	4691      	mov	r9, r2
1a0083c2:	690a      	ldr	r2, [r1, #16]
1a0083c4:	688b      	ldr	r3, [r1, #8]
1a0083c6:	ea4f 1469 	mov.w	r4, r9, asr #5
1a0083ca:	eb04 0802 	add.w	r8, r4, r2
1a0083ce:	f108 0501 	add.w	r5, r8, #1
1a0083d2:	429d      	cmp	r5, r3
1a0083d4:	460e      	mov	r6, r1
1a0083d6:	4607      	mov	r7, r0
1a0083d8:	6849      	ldr	r1, [r1, #4]
1a0083da:	dd04      	ble.n	1a0083e6 <__lshift+0x2a>
1a0083dc:	005b      	lsls	r3, r3, #1
1a0083de:	429d      	cmp	r5, r3
1a0083e0:	f101 0101 	add.w	r1, r1, #1
1a0083e4:	dcfa      	bgt.n	1a0083dc <__lshift+0x20>
1a0083e6:	4638      	mov	r0, r7
1a0083e8:	f7ff fdee 	bl	1a007fc8 <_Balloc>
1a0083ec:	2c00      	cmp	r4, #0
1a0083ee:	f100 0314 	add.w	r3, r0, #20
1a0083f2:	dd06      	ble.n	1a008402 <__lshift+0x46>
1a0083f4:	eb03 0284 	add.w	r2, r3, r4, lsl #2
1a0083f8:	2100      	movs	r1, #0
1a0083fa:	f843 1b04 	str.w	r1, [r3], #4
1a0083fe:	429a      	cmp	r2, r3
1a008400:	d1fb      	bne.n	1a0083fa <__lshift+0x3e>
1a008402:	6934      	ldr	r4, [r6, #16]
1a008404:	f106 0114 	add.w	r1, r6, #20
1a008408:	f019 091f 	ands.w	r9, r9, #31
1a00840c:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
1a008410:	d01d      	beq.n	1a00844e <__lshift+0x92>
1a008412:	f1c9 0c20 	rsb	ip, r9, #32
1a008416:	2200      	movs	r2, #0
1a008418:	680c      	ldr	r4, [r1, #0]
1a00841a:	fa04 f409 	lsl.w	r4, r4, r9
1a00841e:	4314      	orrs	r4, r2
1a008420:	f843 4b04 	str.w	r4, [r3], #4
1a008424:	f851 2b04 	ldr.w	r2, [r1], #4
1a008428:	458e      	cmp	lr, r1
1a00842a:	fa22 f20c 	lsr.w	r2, r2, ip
1a00842e:	d8f3      	bhi.n	1a008418 <__lshift+0x5c>
1a008430:	601a      	str	r2, [r3, #0]
1a008432:	b10a      	cbz	r2, 1a008438 <__lshift+0x7c>
1a008434:	f108 0502 	add.w	r5, r8, #2
1a008438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a00843a:	6872      	ldr	r2, [r6, #4]
1a00843c:	3d01      	subs	r5, #1
1a00843e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a008442:	6105      	str	r5, [r0, #16]
1a008444:	6031      	str	r1, [r6, #0]
1a008446:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
1a00844a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00844e:	3b04      	subs	r3, #4
1a008450:	f851 2b04 	ldr.w	r2, [r1], #4
1a008454:	f843 2f04 	str.w	r2, [r3, #4]!
1a008458:	458e      	cmp	lr, r1
1a00845a:	d8f9      	bhi.n	1a008450 <__lshift+0x94>
1a00845c:	e7ec      	b.n	1a008438 <__lshift+0x7c>
1a00845e:	bf00      	nop

1a008460 <__mcmp>:
1a008460:	b430      	push	{r4, r5}
1a008462:	690b      	ldr	r3, [r1, #16]
1a008464:	4605      	mov	r5, r0
1a008466:	6900      	ldr	r0, [r0, #16]
1a008468:	1ac0      	subs	r0, r0, r3
1a00846a:	d10f      	bne.n	1a00848c <__mcmp+0x2c>
1a00846c:	009b      	lsls	r3, r3, #2
1a00846e:	3514      	adds	r5, #20
1a008470:	3114      	adds	r1, #20
1a008472:	4419      	add	r1, r3
1a008474:	442b      	add	r3, r5
1a008476:	e001      	b.n	1a00847c <__mcmp+0x1c>
1a008478:	429d      	cmp	r5, r3
1a00847a:	d207      	bcs.n	1a00848c <__mcmp+0x2c>
1a00847c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
1a008480:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a008484:	4294      	cmp	r4, r2
1a008486:	d0f7      	beq.n	1a008478 <__mcmp+0x18>
1a008488:	d302      	bcc.n	1a008490 <__mcmp+0x30>
1a00848a:	2001      	movs	r0, #1
1a00848c:	bc30      	pop	{r4, r5}
1a00848e:	4770      	bx	lr
1a008490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a008494:	e7fa      	b.n	1a00848c <__mcmp+0x2c>
1a008496:	bf00      	nop

1a008498 <__mdiff>:
1a008498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00849c:	690f      	ldr	r7, [r1, #16]
1a00849e:	460e      	mov	r6, r1
1a0084a0:	6911      	ldr	r1, [r2, #16]
1a0084a2:	1a7f      	subs	r7, r7, r1
1a0084a4:	2f00      	cmp	r7, #0
1a0084a6:	4690      	mov	r8, r2
1a0084a8:	d117      	bne.n	1a0084da <__mdiff+0x42>
1a0084aa:	0089      	lsls	r1, r1, #2
1a0084ac:	f106 0514 	add.w	r5, r6, #20
1a0084b0:	f102 0e14 	add.w	lr, r2, #20
1a0084b4:	186b      	adds	r3, r5, r1
1a0084b6:	4471      	add	r1, lr
1a0084b8:	e001      	b.n	1a0084be <__mdiff+0x26>
1a0084ba:	429d      	cmp	r5, r3
1a0084bc:	d25c      	bcs.n	1a008578 <__mdiff+0xe0>
1a0084be:	f853 2d04 	ldr.w	r2, [r3, #-4]!
1a0084c2:	f851 4d04 	ldr.w	r4, [r1, #-4]!
1a0084c6:	42a2      	cmp	r2, r4
1a0084c8:	d0f7      	beq.n	1a0084ba <__mdiff+0x22>
1a0084ca:	d25e      	bcs.n	1a00858a <__mdiff+0xf2>
1a0084cc:	4633      	mov	r3, r6
1a0084ce:	462c      	mov	r4, r5
1a0084d0:	4646      	mov	r6, r8
1a0084d2:	4675      	mov	r5, lr
1a0084d4:	4698      	mov	r8, r3
1a0084d6:	2701      	movs	r7, #1
1a0084d8:	e005      	b.n	1a0084e6 <__mdiff+0x4e>
1a0084da:	db58      	blt.n	1a00858e <__mdiff+0xf6>
1a0084dc:	f106 0514 	add.w	r5, r6, #20
1a0084e0:	f108 0414 	add.w	r4, r8, #20
1a0084e4:	2700      	movs	r7, #0
1a0084e6:	6871      	ldr	r1, [r6, #4]
1a0084e8:	f7ff fd6e 	bl	1a007fc8 <_Balloc>
1a0084ec:	f8d8 3010 	ldr.w	r3, [r8, #16]
1a0084f0:	6936      	ldr	r6, [r6, #16]
1a0084f2:	60c7      	str	r7, [r0, #12]
1a0084f4:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
1a0084f8:	46a6      	mov	lr, r4
1a0084fa:	eb05 0786 	add.w	r7, r5, r6, lsl #2
1a0084fe:	f100 0414 	add.w	r4, r0, #20
1a008502:	2300      	movs	r3, #0
1a008504:	f85e 1b04 	ldr.w	r1, [lr], #4
1a008508:	f855 8b04 	ldr.w	r8, [r5], #4
1a00850c:	b28a      	uxth	r2, r1
1a00850e:	fa13 f388 	uxtah	r3, r3, r8
1a008512:	0c09      	lsrs	r1, r1, #16
1a008514:	1a9a      	subs	r2, r3, r2
1a008516:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
1a00851a:	eb03 4322 	add.w	r3, r3, r2, asr #16
1a00851e:	b292      	uxth	r2, r2
1a008520:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a008524:	45f4      	cmp	ip, lr
1a008526:	f844 2b04 	str.w	r2, [r4], #4
1a00852a:	ea4f 4323 	mov.w	r3, r3, asr #16
1a00852e:	d8e9      	bhi.n	1a008504 <__mdiff+0x6c>
1a008530:	42af      	cmp	r7, r5
1a008532:	d917      	bls.n	1a008564 <__mdiff+0xcc>
1a008534:	46a4      	mov	ip, r4
1a008536:	46ae      	mov	lr, r5
1a008538:	f85e 2b04 	ldr.w	r2, [lr], #4
1a00853c:	fa13 f382 	uxtah	r3, r3, r2
1a008540:	1419      	asrs	r1, r3, #16
1a008542:	eb01 4112 	add.w	r1, r1, r2, lsr #16
1a008546:	b29b      	uxth	r3, r3
1a008548:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
1a00854c:	4577      	cmp	r7, lr
1a00854e:	f84c 2b04 	str.w	r2, [ip], #4
1a008552:	ea4f 4321 	mov.w	r3, r1, asr #16
1a008556:	d8ef      	bhi.n	1a008538 <__mdiff+0xa0>
1a008558:	43ed      	mvns	r5, r5
1a00855a:	442f      	add	r7, r5
1a00855c:	f027 0703 	bic.w	r7, r7, #3
1a008560:	3704      	adds	r7, #4
1a008562:	443c      	add	r4, r7
1a008564:	3c04      	subs	r4, #4
1a008566:	b922      	cbnz	r2, 1a008572 <__mdiff+0xda>
1a008568:	f854 3d04 	ldr.w	r3, [r4, #-4]!
1a00856c:	3e01      	subs	r6, #1
1a00856e:	2b00      	cmp	r3, #0
1a008570:	d0fa      	beq.n	1a008568 <__mdiff+0xd0>
1a008572:	6106      	str	r6, [r0, #16]
1a008574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a008578:	2100      	movs	r1, #0
1a00857a:	f7ff fd25 	bl	1a007fc8 <_Balloc>
1a00857e:	2201      	movs	r2, #1
1a008580:	2300      	movs	r3, #0
1a008582:	6102      	str	r2, [r0, #16]
1a008584:	6143      	str	r3, [r0, #20]
1a008586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00858a:	4674      	mov	r4, lr
1a00858c:	e7ab      	b.n	1a0084e6 <__mdiff+0x4e>
1a00858e:	4633      	mov	r3, r6
1a008590:	f106 0414 	add.w	r4, r6, #20
1a008594:	f102 0514 	add.w	r5, r2, #20
1a008598:	4616      	mov	r6, r2
1a00859a:	2701      	movs	r7, #1
1a00859c:	4698      	mov	r8, r3
1a00859e:	e7a2      	b.n	1a0084e6 <__mdiff+0x4e>

1a0085a0 <__ulp>:
1a0085a0:	4b13      	ldr	r3, [pc, #76]	; (1a0085f0 <__ulp+0x50>)
1a0085a2:	ee10 2a90 	vmov	r2, s1
1a0085a6:	401a      	ands	r2, r3
1a0085a8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
1a0085ac:	2b00      	cmp	r3, #0
1a0085ae:	dd04      	ble.n	1a0085ba <__ulp+0x1a>
1a0085b0:	2000      	movs	r0, #0
1a0085b2:	4619      	mov	r1, r3
1a0085b4:	ec41 0b10 	vmov	d0, r0, r1
1a0085b8:	4770      	bx	lr
1a0085ba:	425b      	negs	r3, r3
1a0085bc:	151b      	asrs	r3, r3, #20
1a0085be:	2b13      	cmp	r3, #19
1a0085c0:	dd0d      	ble.n	1a0085de <__ulp+0x3e>
1a0085c2:	3b14      	subs	r3, #20
1a0085c4:	2b1e      	cmp	r3, #30
1a0085c6:	bfdd      	ittte	le
1a0085c8:	f1c3 031f 	rsble	r3, r3, #31
1a0085cc:	2201      	movle	r2, #1
1a0085ce:	fa02 f303 	lslle.w	r3, r2, r3
1a0085d2:	2301      	movgt	r3, #1
1a0085d4:	2100      	movs	r1, #0
1a0085d6:	4618      	mov	r0, r3
1a0085d8:	ec41 0b10 	vmov	d0, r0, r1
1a0085dc:	4770      	bx	lr
1a0085de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
1a0085e2:	2000      	movs	r0, #0
1a0085e4:	fa42 f103 	asr.w	r1, r2, r3
1a0085e8:	ec41 0b10 	vmov	d0, r0, r1
1a0085ec:	4770      	bx	lr
1a0085ee:	bf00      	nop
1a0085f0:	7ff00000 	.word	0x7ff00000

1a0085f4 <__b2d>:
1a0085f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0085f6:	6904      	ldr	r4, [r0, #16]
1a0085f8:	f100 0614 	add.w	r6, r0, #20
1a0085fc:	eb06 0484 	add.w	r4, r6, r4, lsl #2
1a008600:	f854 5c04 	ldr.w	r5, [r4, #-4]
1a008604:	4628      	mov	r0, r5
1a008606:	f7ff fd9d 	bl	1a008144 <__hi0bits>
1a00860a:	f1c0 0320 	rsb	r3, r0, #32
1a00860e:	280a      	cmp	r0, #10
1a008610:	600b      	str	r3, [r1, #0]
1a008612:	f1a4 0104 	sub.w	r1, r4, #4
1a008616:	dc17      	bgt.n	1a008648 <__b2d+0x54>
1a008618:	428e      	cmp	r6, r1
1a00861a:	f1c0 070b 	rsb	r7, r0, #11
1a00861e:	bf38      	it	cc
1a008620:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
1a008624:	fa25 fe07 	lsr.w	lr, r5, r7
1a008628:	f100 0015 	add.w	r0, r0, #21
1a00862c:	f04e 537f 	orr.w	r3, lr, #1069547520	; 0x3fc00000
1a008630:	bf34      	ite	cc
1a008632:	40f9      	lsrcc	r1, r7
1a008634:	2100      	movcs	r1, #0
1a008636:	fa05 f000 	lsl.w	r0, r5, r0
1a00863a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
1a00863e:	ea40 0201 	orr.w	r2, r0, r1
1a008642:	ec43 2b10 	vmov	d0, r2, r3
1a008646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a008648:	428e      	cmp	r6, r1
1a00864a:	d21d      	bcs.n	1a008688 <__b2d+0x94>
1a00864c:	380b      	subs	r0, #11
1a00864e:	f854 7c08 	ldr.w	r7, [r4, #-8]
1a008652:	d01c      	beq.n	1a00868e <__b2d+0x9a>
1a008654:	4085      	lsls	r5, r0
1a008656:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
1a00865a:	f1c0 0c20 	rsb	ip, r0, #32
1a00865e:	f1a4 0e08 	sub.w	lr, r4, #8
1a008662:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
1a008666:	fa27 f10c 	lsr.w	r1, r7, ip
1a00866a:	4576      	cmp	r6, lr
1a00866c:	ea45 0301 	orr.w	r3, r5, r1
1a008670:	d21e      	bcs.n	1a0086b0 <__b2d+0xbc>
1a008672:	f854 1c0c 	ldr.w	r1, [r4, #-12]
1a008676:	fa07 f000 	lsl.w	r0, r7, r0
1a00867a:	fa21 f10c 	lsr.w	r1, r1, ip
1a00867e:	4308      	orrs	r0, r1
1a008680:	4602      	mov	r2, r0
1a008682:	ec43 2b10 	vmov	d0, r2, r3
1a008686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a008688:	380b      	subs	r0, #11
1a00868a:	d108      	bne.n	1a00869e <__b2d+0xaa>
1a00868c:	4607      	mov	r7, r0
1a00868e:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
1a008692:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
1a008696:	463a      	mov	r2, r7
1a008698:	ec43 2b10 	vmov	d0, r2, r3
1a00869c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00869e:	fa05 f000 	lsl.w	r0, r5, r0
1a0086a2:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
1a0086a6:	2000      	movs	r0, #0
1a0086a8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
1a0086ac:	4602      	mov	r2, r0
1a0086ae:	e7e8      	b.n	1a008682 <__b2d+0x8e>
1a0086b0:	fa07 f000 	lsl.w	r0, r7, r0
1a0086b4:	4602      	mov	r2, r0
1a0086b6:	e7e4      	b.n	1a008682 <__b2d+0x8e>

1a0086b8 <__d2b>:
1a0086b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0086bc:	ec57 6b10 	vmov	r6, r7, d0
1a0086c0:	b083      	sub	sp, #12
1a0086c2:	4688      	mov	r8, r1
1a0086c4:	2101      	movs	r1, #1
1a0086c6:	463c      	mov	r4, r7
1a0086c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
1a0086cc:	4617      	mov	r7, r2
1a0086ce:	f7ff fc7b 	bl	1a007fc8 <_Balloc>
1a0086d2:	f3c4 0413 	ubfx	r4, r4, #0, #20
1a0086d6:	4681      	mov	r9, r0
1a0086d8:	b10d      	cbz	r5, 1a0086de <__d2b+0x26>
1a0086da:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
1a0086de:	9401      	str	r4, [sp, #4]
1a0086e0:	b31e      	cbz	r6, 1a00872a <__d2b+0x72>
1a0086e2:	a802      	add	r0, sp, #8
1a0086e4:	f840 6d08 	str.w	r6, [r0, #-8]!
1a0086e8:	f7ff fd4c 	bl	1a008184 <__lo0bits>
1a0086ec:	2800      	cmp	r0, #0
1a0086ee:	d134      	bne.n	1a00875a <__d2b+0xa2>
1a0086f0:	e89d 000c 	ldmia.w	sp, {r2, r3}
1a0086f4:	f8c9 2014 	str.w	r2, [r9, #20]
1a0086f8:	2b00      	cmp	r3, #0
1a0086fa:	bf0c      	ite	eq
1a0086fc:	2101      	moveq	r1, #1
1a0086fe:	2102      	movne	r1, #2
1a008700:	f8c9 3018 	str.w	r3, [r9, #24]
1a008704:	f8c9 1010 	str.w	r1, [r9, #16]
1a008708:	b9dd      	cbnz	r5, 1a008742 <__d2b+0x8a>
1a00870a:	eb09 0381 	add.w	r3, r9, r1, lsl #2
1a00870e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
1a008712:	f8c8 0000 	str.w	r0, [r8]
1a008716:	6918      	ldr	r0, [r3, #16]
1a008718:	f7ff fd14 	bl	1a008144 <__hi0bits>
1a00871c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
1a008720:	6038      	str	r0, [r7, #0]
1a008722:	4648      	mov	r0, r9
1a008724:	b003      	add	sp, #12
1a008726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00872a:	a801      	add	r0, sp, #4
1a00872c:	f7ff fd2a 	bl	1a008184 <__lo0bits>
1a008730:	9b01      	ldr	r3, [sp, #4]
1a008732:	f8c9 3014 	str.w	r3, [r9, #20]
1a008736:	2101      	movs	r1, #1
1a008738:	3020      	adds	r0, #32
1a00873a:	f8c9 1010 	str.w	r1, [r9, #16]
1a00873e:	2d00      	cmp	r5, #0
1a008740:	d0e3      	beq.n	1a00870a <__d2b+0x52>
1a008742:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
1a008746:	4405      	add	r5, r0
1a008748:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
1a00874c:	f8c8 5000 	str.w	r5, [r8]
1a008750:	6038      	str	r0, [r7, #0]
1a008752:	4648      	mov	r0, r9
1a008754:	b003      	add	sp, #12
1a008756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00875a:	e89d 000a 	ldmia.w	sp, {r1, r3}
1a00875e:	f1c0 0220 	rsb	r2, r0, #32
1a008762:	fa03 f202 	lsl.w	r2, r3, r2
1a008766:	430a      	orrs	r2, r1
1a008768:	40c3      	lsrs	r3, r0
1a00876a:	9301      	str	r3, [sp, #4]
1a00876c:	f8c9 2014 	str.w	r2, [r9, #20]
1a008770:	e7c2      	b.n	1a0086f8 <__d2b+0x40>
1a008772:	bf00      	nop

1a008774 <__ratio>:
1a008774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a008778:	b083      	sub	sp, #12
1a00877a:	4688      	mov	r8, r1
1a00877c:	4669      	mov	r1, sp
1a00877e:	4681      	mov	r9, r0
1a008780:	f7ff ff38 	bl	1a0085f4 <__b2d>
1a008784:	4640      	mov	r0, r8
1a008786:	a901      	add	r1, sp, #4
1a008788:	ec55 4b10 	vmov	r4, r5, d0
1a00878c:	f7ff ff32 	bl	1a0085f4 <__b2d>
1a008790:	e89d 000a 	ldmia.w	sp, {r1, r3}
1a008794:	f8d9 0010 	ldr.w	r0, [r9, #16]
1a008798:	f8d8 2010 	ldr.w	r2, [r8, #16]
1a00879c:	1acb      	subs	r3, r1, r3
1a00879e:	1a80      	subs	r0, r0, r2
1a0087a0:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0087a4:	2b00      	cmp	r3, #0
1a0087a6:	ec57 6b10 	vmov	r6, r7, d0
1a0087aa:	dd0d      	ble.n	1a0087c8 <__ratio+0x54>
1a0087ac:	eb05 5903 	add.w	r9, r5, r3, lsl #20
1a0087b0:	464d      	mov	r5, r9
1a0087b2:	4632      	mov	r2, r6
1a0087b4:	463b      	mov	r3, r7
1a0087b6:	4620      	mov	r0, r4
1a0087b8:	4629      	mov	r1, r5
1a0087ba:	f7fb fa9d 	bl	1a003cf8 <__aeabi_ddiv>
1a0087be:	ec41 0b10 	vmov	d0, r0, r1
1a0087c2:	b003      	add	sp, #12
1a0087c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0087c8:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
1a0087cc:	eb07 5103 	add.w	r1, r7, r3, lsl #20
1a0087d0:	460f      	mov	r7, r1
1a0087d2:	e7ee      	b.n	1a0087b2 <__ratio+0x3e>

1a0087d4 <_mprec_log10>:
1a0087d4:	2817      	cmp	r0, #23
1a0087d6:	b5d0      	push	{r4, r6, r7, lr}
1a0087d8:	4604      	mov	r4, r0
1a0087da:	dd0c      	ble.n	1a0087f6 <_mprec_log10+0x22>
1a0087dc:	490a      	ldr	r1, [pc, #40]	; (1a008808 <_mprec_log10+0x34>)
1a0087de:	4f0b      	ldr	r7, [pc, #44]	; (1a00880c <_mprec_log10+0x38>)
1a0087e0:	2000      	movs	r0, #0
1a0087e2:	2600      	movs	r6, #0
1a0087e4:	4632      	mov	r2, r6
1a0087e6:	463b      	mov	r3, r7
1a0087e8:	f7fb f95c 	bl	1a003aa4 <__aeabi_dmul>
1a0087ec:	3c01      	subs	r4, #1
1a0087ee:	d1f9      	bne.n	1a0087e4 <_mprec_log10+0x10>
1a0087f0:	ec41 0b10 	vmov	d0, r0, r1
1a0087f4:	bdd0      	pop	{r4, r6, r7, pc}
1a0087f6:	4b06      	ldr	r3, [pc, #24]	; (1a008810 <_mprec_log10+0x3c>)
1a0087f8:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
1a0087fc:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
1a008800:	ec41 0b10 	vmov	d0, r0, r1
1a008804:	bdd0      	pop	{r4, r6, r7, pc}
1a008806:	bf00      	nop
1a008808:	3ff00000 	.word	0x3ff00000
1a00880c:	40240000 	.word	0x40240000
1a008810:	1a00a330 	.word	0x1a00a330

1a008814 <__copybits>:
1a008814:	b470      	push	{r4, r5, r6}
1a008816:	6914      	ldr	r4, [r2, #16]
1a008818:	1e4e      	subs	r6, r1, #1
1a00881a:	f102 0314 	add.w	r3, r2, #20
1a00881e:	1176      	asrs	r6, r6, #5
1a008820:	eb03 0184 	add.w	r1, r3, r4, lsl #2
1a008824:	3601      	adds	r6, #1
1a008826:	428b      	cmp	r3, r1
1a008828:	eb00 0686 	add.w	r6, r0, r6, lsl #2
1a00882c:	d20c      	bcs.n	1a008848 <__copybits+0x34>
1a00882e:	1f04      	subs	r4, r0, #4
1a008830:	f853 5b04 	ldr.w	r5, [r3], #4
1a008834:	f844 5f04 	str.w	r5, [r4, #4]!
1a008838:	4299      	cmp	r1, r3
1a00883a:	d8f9      	bhi.n	1a008830 <__copybits+0x1c>
1a00883c:	1a8b      	subs	r3, r1, r2
1a00883e:	3b15      	subs	r3, #21
1a008840:	f023 0303 	bic.w	r3, r3, #3
1a008844:	3304      	adds	r3, #4
1a008846:	4418      	add	r0, r3
1a008848:	4286      	cmp	r6, r0
1a00884a:	d904      	bls.n	1a008856 <__copybits+0x42>
1a00884c:	2300      	movs	r3, #0
1a00884e:	f840 3b04 	str.w	r3, [r0], #4
1a008852:	4286      	cmp	r6, r0
1a008854:	d8fb      	bhi.n	1a00884e <__copybits+0x3a>
1a008856:	bc70      	pop	{r4, r5, r6}
1a008858:	4770      	bx	lr
1a00885a:	bf00      	nop

1a00885c <__any_on>:
1a00885c:	6903      	ldr	r3, [r0, #16]
1a00885e:	114a      	asrs	r2, r1, #5
1a008860:	4293      	cmp	r3, r2
1a008862:	b410      	push	{r4}
1a008864:	f100 0414 	add.w	r4, r0, #20
1a008868:	da10      	bge.n	1a00888c <__any_on+0x30>
1a00886a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
1a00886e:	429c      	cmp	r4, r3
1a008870:	d221      	bcs.n	1a0088b6 <__any_on+0x5a>
1a008872:	f853 0c04 	ldr.w	r0, [r3, #-4]
1a008876:	3b04      	subs	r3, #4
1a008878:	b118      	cbz	r0, 1a008882 <__any_on+0x26>
1a00887a:	e015      	b.n	1a0088a8 <__any_on+0x4c>
1a00887c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
1a008880:	b992      	cbnz	r2, 1a0088a8 <__any_on+0x4c>
1a008882:	429c      	cmp	r4, r3
1a008884:	d3fa      	bcc.n	1a00887c <__any_on+0x20>
1a008886:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00888a:	4770      	bx	lr
1a00888c:	dd10      	ble.n	1a0088b0 <__any_on+0x54>
1a00888e:	f011 011f 	ands.w	r1, r1, #31
1a008892:	d00d      	beq.n	1a0088b0 <__any_on+0x54>
1a008894:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a008898:	fa20 f301 	lsr.w	r3, r0, r1
1a00889c:	fa03 f101 	lsl.w	r1, r3, r1
1a0088a0:	4288      	cmp	r0, r1
1a0088a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
1a0088a6:	d0e2      	beq.n	1a00886e <__any_on+0x12>
1a0088a8:	2001      	movs	r0, #1
1a0088aa:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0088ae:	4770      	bx	lr
1a0088b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
1a0088b4:	e7db      	b.n	1a00886e <__any_on+0x12>
1a0088b6:	2000      	movs	r0, #0
1a0088b8:	e7e5      	b.n	1a008886 <__any_on+0x2a>
1a0088ba:	bf00      	nop

1a0088bc <_realloc_r>:
1a0088bc:	2900      	cmp	r1, #0
1a0088be:	f000 8095 	beq.w	1a0089ec <_realloc_r+0x130>
1a0088c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0088c6:	460d      	mov	r5, r1
1a0088c8:	4616      	mov	r6, r2
1a0088ca:	b083      	sub	sp, #12
1a0088cc:	4680      	mov	r8, r0
1a0088ce:	f106 070b 	add.w	r7, r6, #11
1a0088d2:	f7fc fca1 	bl	1a005218 <__malloc_lock>
1a0088d6:	f855 ec04 	ldr.w	lr, [r5, #-4]
1a0088da:	2f16      	cmp	r7, #22
1a0088dc:	f02e 0403 	bic.w	r4, lr, #3
1a0088e0:	f1a5 0908 	sub.w	r9, r5, #8
1a0088e4:	d83c      	bhi.n	1a008960 <_realloc_r+0xa4>
1a0088e6:	2210      	movs	r2, #16
1a0088e8:	4617      	mov	r7, r2
1a0088ea:	42be      	cmp	r6, r7
1a0088ec:	d83d      	bhi.n	1a00896a <_realloc_r+0xae>
1a0088ee:	4294      	cmp	r4, r2
1a0088f0:	da43      	bge.n	1a00897a <_realloc_r+0xbe>
1a0088f2:	4bc4      	ldr	r3, [pc, #784]	; (1a008c04 <_realloc_r+0x348>)
1a0088f4:	6899      	ldr	r1, [r3, #8]
1a0088f6:	eb09 0004 	add.w	r0, r9, r4
1a0088fa:	4288      	cmp	r0, r1
1a0088fc:	f000 80b4 	beq.w	1a008a68 <_realloc_r+0x1ac>
1a008900:	6843      	ldr	r3, [r0, #4]
1a008902:	f023 0101 	bic.w	r1, r3, #1
1a008906:	4401      	add	r1, r0
1a008908:	6849      	ldr	r1, [r1, #4]
1a00890a:	07c9      	lsls	r1, r1, #31
1a00890c:	d54c      	bpl.n	1a0089a8 <_realloc_r+0xec>
1a00890e:	f01e 0f01 	tst.w	lr, #1
1a008912:	f000 809b 	beq.w	1a008a4c <_realloc_r+0x190>
1a008916:	4631      	mov	r1, r6
1a008918:	4640      	mov	r0, r8
1a00891a:	f7fc f8eb 	bl	1a004af4 <_malloc_r>
1a00891e:	4606      	mov	r6, r0
1a008920:	2800      	cmp	r0, #0
1a008922:	d03a      	beq.n	1a00899a <_realloc_r+0xde>
1a008924:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a008928:	f023 0301 	bic.w	r3, r3, #1
1a00892c:	444b      	add	r3, r9
1a00892e:	f1a0 0208 	sub.w	r2, r0, #8
1a008932:	429a      	cmp	r2, r3
1a008934:	f000 8121 	beq.w	1a008b7a <_realloc_r+0x2be>
1a008938:	1f22      	subs	r2, r4, #4
1a00893a:	2a24      	cmp	r2, #36	; 0x24
1a00893c:	f200 8107 	bhi.w	1a008b4e <_realloc_r+0x292>
1a008940:	2a13      	cmp	r2, #19
1a008942:	f200 80db 	bhi.w	1a008afc <_realloc_r+0x240>
1a008946:	4603      	mov	r3, r0
1a008948:	462a      	mov	r2, r5
1a00894a:	6811      	ldr	r1, [r2, #0]
1a00894c:	6019      	str	r1, [r3, #0]
1a00894e:	6851      	ldr	r1, [r2, #4]
1a008950:	6059      	str	r1, [r3, #4]
1a008952:	6892      	ldr	r2, [r2, #8]
1a008954:	609a      	str	r2, [r3, #8]
1a008956:	4629      	mov	r1, r5
1a008958:	4640      	mov	r0, r8
1a00895a:	f7fb ff6d 	bl	1a004838 <_free_r>
1a00895e:	e01c      	b.n	1a00899a <_realloc_r+0xde>
1a008960:	f027 0707 	bic.w	r7, r7, #7
1a008964:	2f00      	cmp	r7, #0
1a008966:	463a      	mov	r2, r7
1a008968:	dabf      	bge.n	1a0088ea <_realloc_r+0x2e>
1a00896a:	2600      	movs	r6, #0
1a00896c:	230c      	movs	r3, #12
1a00896e:	4630      	mov	r0, r6
1a008970:	f8c8 3000 	str.w	r3, [r8]
1a008974:	b003      	add	sp, #12
1a008976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00897a:	462e      	mov	r6, r5
1a00897c:	1be3      	subs	r3, r4, r7
1a00897e:	2b0f      	cmp	r3, #15
1a008980:	d81e      	bhi.n	1a0089c0 <_realloc_r+0x104>
1a008982:	f8d9 3004 	ldr.w	r3, [r9, #4]
1a008986:	f003 0301 	and.w	r3, r3, #1
1a00898a:	4323      	orrs	r3, r4
1a00898c:	444c      	add	r4, r9
1a00898e:	f8c9 3004 	str.w	r3, [r9, #4]
1a008992:	6863      	ldr	r3, [r4, #4]
1a008994:	f043 0301 	orr.w	r3, r3, #1
1a008998:	6063      	str	r3, [r4, #4]
1a00899a:	4640      	mov	r0, r8
1a00899c:	f7fc fc3e 	bl	1a00521c <__malloc_unlock>
1a0089a0:	4630      	mov	r0, r6
1a0089a2:	b003      	add	sp, #12
1a0089a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0089a8:	f023 0303 	bic.w	r3, r3, #3
1a0089ac:	18e1      	adds	r1, r4, r3
1a0089ae:	4291      	cmp	r1, r2
1a0089b0:	db1f      	blt.n	1a0089f2 <_realloc_r+0x136>
1a0089b2:	68c3      	ldr	r3, [r0, #12]
1a0089b4:	6882      	ldr	r2, [r0, #8]
1a0089b6:	462e      	mov	r6, r5
1a0089b8:	60d3      	str	r3, [r2, #12]
1a0089ba:	460c      	mov	r4, r1
1a0089bc:	609a      	str	r2, [r3, #8]
1a0089be:	e7dd      	b.n	1a00897c <_realloc_r+0xc0>
1a0089c0:	f8d9 2004 	ldr.w	r2, [r9, #4]
1a0089c4:	eb09 0107 	add.w	r1, r9, r7
1a0089c8:	f002 0201 	and.w	r2, r2, #1
1a0089cc:	444c      	add	r4, r9
1a0089ce:	f043 0301 	orr.w	r3, r3, #1
1a0089d2:	4317      	orrs	r7, r2
1a0089d4:	f8c9 7004 	str.w	r7, [r9, #4]
1a0089d8:	604b      	str	r3, [r1, #4]
1a0089da:	6863      	ldr	r3, [r4, #4]
1a0089dc:	f043 0301 	orr.w	r3, r3, #1
1a0089e0:	3108      	adds	r1, #8
1a0089e2:	6063      	str	r3, [r4, #4]
1a0089e4:	4640      	mov	r0, r8
1a0089e6:	f7fb ff27 	bl	1a004838 <_free_r>
1a0089ea:	e7d6      	b.n	1a00899a <_realloc_r+0xde>
1a0089ec:	4611      	mov	r1, r2
1a0089ee:	f7fc b881 	b.w	1a004af4 <_malloc_r>
1a0089f2:	f01e 0f01 	tst.w	lr, #1
1a0089f6:	d18e      	bne.n	1a008916 <_realloc_r+0x5a>
1a0089f8:	f855 1c08 	ldr.w	r1, [r5, #-8]
1a0089fc:	eba9 0a01 	sub.w	sl, r9, r1
1a008a00:	f8da 1004 	ldr.w	r1, [sl, #4]
1a008a04:	f021 0103 	bic.w	r1, r1, #3
1a008a08:	440b      	add	r3, r1
1a008a0a:	4423      	add	r3, r4
1a008a0c:	4293      	cmp	r3, r2
1a008a0e:	db25      	blt.n	1a008a5c <_realloc_r+0x1a0>
1a008a10:	68c2      	ldr	r2, [r0, #12]
1a008a12:	6881      	ldr	r1, [r0, #8]
1a008a14:	4656      	mov	r6, sl
1a008a16:	60ca      	str	r2, [r1, #12]
1a008a18:	6091      	str	r1, [r2, #8]
1a008a1a:	f8da 100c 	ldr.w	r1, [sl, #12]
1a008a1e:	f856 0f08 	ldr.w	r0, [r6, #8]!
1a008a22:	1f22      	subs	r2, r4, #4
1a008a24:	2a24      	cmp	r2, #36	; 0x24
1a008a26:	60c1      	str	r1, [r0, #12]
1a008a28:	6088      	str	r0, [r1, #8]
1a008a2a:	f200 8094 	bhi.w	1a008b56 <_realloc_r+0x29a>
1a008a2e:	2a13      	cmp	r2, #19
1a008a30:	d96f      	bls.n	1a008b12 <_realloc_r+0x256>
1a008a32:	6829      	ldr	r1, [r5, #0]
1a008a34:	f8ca 1008 	str.w	r1, [sl, #8]
1a008a38:	6869      	ldr	r1, [r5, #4]
1a008a3a:	f8ca 100c 	str.w	r1, [sl, #12]
1a008a3e:	2a1b      	cmp	r2, #27
1a008a40:	f200 80a2 	bhi.w	1a008b88 <_realloc_r+0x2cc>
1a008a44:	3508      	adds	r5, #8
1a008a46:	f10a 0210 	add.w	r2, sl, #16
1a008a4a:	e063      	b.n	1a008b14 <_realloc_r+0x258>
1a008a4c:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a008a50:	eba9 0a03 	sub.w	sl, r9, r3
1a008a54:	f8da 1004 	ldr.w	r1, [sl, #4]
1a008a58:	f021 0103 	bic.w	r1, r1, #3
1a008a5c:	1863      	adds	r3, r4, r1
1a008a5e:	4293      	cmp	r3, r2
1a008a60:	f6ff af59 	blt.w	1a008916 <_realloc_r+0x5a>
1a008a64:	4656      	mov	r6, sl
1a008a66:	e7d8      	b.n	1a008a1a <_realloc_r+0x15e>
1a008a68:	6841      	ldr	r1, [r0, #4]
1a008a6a:	f021 0b03 	bic.w	fp, r1, #3
1a008a6e:	44a3      	add	fp, r4
1a008a70:	f107 0010 	add.w	r0, r7, #16
1a008a74:	4583      	cmp	fp, r0
1a008a76:	da56      	bge.n	1a008b26 <_realloc_r+0x26a>
1a008a78:	f01e 0f01 	tst.w	lr, #1
1a008a7c:	f47f af4b 	bne.w	1a008916 <_realloc_r+0x5a>
1a008a80:	f855 1c08 	ldr.w	r1, [r5, #-8]
1a008a84:	eba9 0a01 	sub.w	sl, r9, r1
1a008a88:	f8da 1004 	ldr.w	r1, [sl, #4]
1a008a8c:	f021 0103 	bic.w	r1, r1, #3
1a008a90:	448b      	add	fp, r1
1a008a92:	4558      	cmp	r0, fp
1a008a94:	dce2      	bgt.n	1a008a5c <_realloc_r+0x1a0>
1a008a96:	4656      	mov	r6, sl
1a008a98:	f8da 100c 	ldr.w	r1, [sl, #12]
1a008a9c:	f856 0f08 	ldr.w	r0, [r6, #8]!
1a008aa0:	1f22      	subs	r2, r4, #4
1a008aa2:	2a24      	cmp	r2, #36	; 0x24
1a008aa4:	60c1      	str	r1, [r0, #12]
1a008aa6:	6088      	str	r0, [r1, #8]
1a008aa8:	f200 808f 	bhi.w	1a008bca <_realloc_r+0x30e>
1a008aac:	2a13      	cmp	r2, #19
1a008aae:	f240 808a 	bls.w	1a008bc6 <_realloc_r+0x30a>
1a008ab2:	6829      	ldr	r1, [r5, #0]
1a008ab4:	f8ca 1008 	str.w	r1, [sl, #8]
1a008ab8:	6869      	ldr	r1, [r5, #4]
1a008aba:	f8ca 100c 	str.w	r1, [sl, #12]
1a008abe:	2a1b      	cmp	r2, #27
1a008ac0:	f200 808a 	bhi.w	1a008bd8 <_realloc_r+0x31c>
1a008ac4:	3508      	adds	r5, #8
1a008ac6:	f10a 0210 	add.w	r2, sl, #16
1a008aca:	6829      	ldr	r1, [r5, #0]
1a008acc:	6011      	str	r1, [r2, #0]
1a008ace:	6869      	ldr	r1, [r5, #4]
1a008ad0:	6051      	str	r1, [r2, #4]
1a008ad2:	68a9      	ldr	r1, [r5, #8]
1a008ad4:	6091      	str	r1, [r2, #8]
1a008ad6:	eb0a 0107 	add.w	r1, sl, r7
1a008ada:	ebab 0207 	sub.w	r2, fp, r7
1a008ade:	f042 0201 	orr.w	r2, r2, #1
1a008ae2:	6099      	str	r1, [r3, #8]
1a008ae4:	604a      	str	r2, [r1, #4]
1a008ae6:	f8da 3004 	ldr.w	r3, [sl, #4]
1a008aea:	f003 0301 	and.w	r3, r3, #1
1a008aee:	431f      	orrs	r7, r3
1a008af0:	4640      	mov	r0, r8
1a008af2:	f8ca 7004 	str.w	r7, [sl, #4]
1a008af6:	f7fc fb91 	bl	1a00521c <__malloc_unlock>
1a008afa:	e751      	b.n	1a0089a0 <_realloc_r+0xe4>
1a008afc:	682b      	ldr	r3, [r5, #0]
1a008afe:	6003      	str	r3, [r0, #0]
1a008b00:	686b      	ldr	r3, [r5, #4]
1a008b02:	6043      	str	r3, [r0, #4]
1a008b04:	2a1b      	cmp	r2, #27
1a008b06:	d82d      	bhi.n	1a008b64 <_realloc_r+0x2a8>
1a008b08:	f100 0308 	add.w	r3, r0, #8
1a008b0c:	f105 0208 	add.w	r2, r5, #8
1a008b10:	e71b      	b.n	1a00894a <_realloc_r+0x8e>
1a008b12:	4632      	mov	r2, r6
1a008b14:	6829      	ldr	r1, [r5, #0]
1a008b16:	6011      	str	r1, [r2, #0]
1a008b18:	6869      	ldr	r1, [r5, #4]
1a008b1a:	6051      	str	r1, [r2, #4]
1a008b1c:	68a9      	ldr	r1, [r5, #8]
1a008b1e:	6091      	str	r1, [r2, #8]
1a008b20:	461c      	mov	r4, r3
1a008b22:	46d1      	mov	r9, sl
1a008b24:	e72a      	b.n	1a00897c <_realloc_r+0xc0>
1a008b26:	eb09 0107 	add.w	r1, r9, r7
1a008b2a:	ebab 0b07 	sub.w	fp, fp, r7
1a008b2e:	f04b 0201 	orr.w	r2, fp, #1
1a008b32:	6099      	str	r1, [r3, #8]
1a008b34:	604a      	str	r2, [r1, #4]
1a008b36:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a008b3a:	f003 0301 	and.w	r3, r3, #1
1a008b3e:	431f      	orrs	r7, r3
1a008b40:	4640      	mov	r0, r8
1a008b42:	f845 7c04 	str.w	r7, [r5, #-4]
1a008b46:	f7fc fb69 	bl	1a00521c <__malloc_unlock>
1a008b4a:	462e      	mov	r6, r5
1a008b4c:	e728      	b.n	1a0089a0 <_realloc_r+0xe4>
1a008b4e:	4629      	mov	r1, r5
1a008b50:	f7ff f9d6 	bl	1a007f00 <memmove>
1a008b54:	e6ff      	b.n	1a008956 <_realloc_r+0x9a>
1a008b56:	4629      	mov	r1, r5
1a008b58:	4630      	mov	r0, r6
1a008b5a:	461c      	mov	r4, r3
1a008b5c:	46d1      	mov	r9, sl
1a008b5e:	f7ff f9cf 	bl	1a007f00 <memmove>
1a008b62:	e70b      	b.n	1a00897c <_realloc_r+0xc0>
1a008b64:	68ab      	ldr	r3, [r5, #8]
1a008b66:	6083      	str	r3, [r0, #8]
1a008b68:	68eb      	ldr	r3, [r5, #12]
1a008b6a:	60c3      	str	r3, [r0, #12]
1a008b6c:	2a24      	cmp	r2, #36	; 0x24
1a008b6e:	d017      	beq.n	1a008ba0 <_realloc_r+0x2e4>
1a008b70:	f100 0310 	add.w	r3, r0, #16
1a008b74:	f105 0210 	add.w	r2, r5, #16
1a008b78:	e6e7      	b.n	1a00894a <_realloc_r+0x8e>
1a008b7a:	f850 3c04 	ldr.w	r3, [r0, #-4]
1a008b7e:	f023 0303 	bic.w	r3, r3, #3
1a008b82:	441c      	add	r4, r3
1a008b84:	462e      	mov	r6, r5
1a008b86:	e6f9      	b.n	1a00897c <_realloc_r+0xc0>
1a008b88:	68a9      	ldr	r1, [r5, #8]
1a008b8a:	f8ca 1010 	str.w	r1, [sl, #16]
1a008b8e:	68e9      	ldr	r1, [r5, #12]
1a008b90:	f8ca 1014 	str.w	r1, [sl, #20]
1a008b94:	2a24      	cmp	r2, #36	; 0x24
1a008b96:	d00c      	beq.n	1a008bb2 <_realloc_r+0x2f6>
1a008b98:	3510      	adds	r5, #16
1a008b9a:	f10a 0218 	add.w	r2, sl, #24
1a008b9e:	e7b9      	b.n	1a008b14 <_realloc_r+0x258>
1a008ba0:	692b      	ldr	r3, [r5, #16]
1a008ba2:	6103      	str	r3, [r0, #16]
1a008ba4:	696b      	ldr	r3, [r5, #20]
1a008ba6:	6143      	str	r3, [r0, #20]
1a008ba8:	f105 0218 	add.w	r2, r5, #24
1a008bac:	f100 0318 	add.w	r3, r0, #24
1a008bb0:	e6cb      	b.n	1a00894a <_realloc_r+0x8e>
1a008bb2:	692a      	ldr	r2, [r5, #16]
1a008bb4:	f8ca 2018 	str.w	r2, [sl, #24]
1a008bb8:	696a      	ldr	r2, [r5, #20]
1a008bba:	f8ca 201c 	str.w	r2, [sl, #28]
1a008bbe:	3518      	adds	r5, #24
1a008bc0:	f10a 0220 	add.w	r2, sl, #32
1a008bc4:	e7a6      	b.n	1a008b14 <_realloc_r+0x258>
1a008bc6:	4632      	mov	r2, r6
1a008bc8:	e77f      	b.n	1a008aca <_realloc_r+0x20e>
1a008bca:	4629      	mov	r1, r5
1a008bcc:	4630      	mov	r0, r6
1a008bce:	9301      	str	r3, [sp, #4]
1a008bd0:	f7ff f996 	bl	1a007f00 <memmove>
1a008bd4:	9b01      	ldr	r3, [sp, #4]
1a008bd6:	e77e      	b.n	1a008ad6 <_realloc_r+0x21a>
1a008bd8:	68a9      	ldr	r1, [r5, #8]
1a008bda:	f8ca 1010 	str.w	r1, [sl, #16]
1a008bde:	68e9      	ldr	r1, [r5, #12]
1a008be0:	f8ca 1014 	str.w	r1, [sl, #20]
1a008be4:	2a24      	cmp	r2, #36	; 0x24
1a008be6:	d003      	beq.n	1a008bf0 <_realloc_r+0x334>
1a008be8:	3510      	adds	r5, #16
1a008bea:	f10a 0218 	add.w	r2, sl, #24
1a008bee:	e76c      	b.n	1a008aca <_realloc_r+0x20e>
1a008bf0:	692a      	ldr	r2, [r5, #16]
1a008bf2:	f8ca 2018 	str.w	r2, [sl, #24]
1a008bf6:	696a      	ldr	r2, [r5, #20]
1a008bf8:	f8ca 201c 	str.w	r2, [sl, #28]
1a008bfc:	3518      	adds	r5, #24
1a008bfe:	f10a 0220 	add.w	r2, sl, #32
1a008c02:	e762      	b.n	1a008aca <_realloc_r+0x20e>
1a008c04:	10000470 	.word	0x10000470
1a008c08:	ffffffff 	.word	0xffffffff
1a008c0c:	ffffffff 	.word	0xffffffff
1a008c10:	ffffffff 	.word	0xffffffff
1a008c14:	ffffffff 	.word	0xffffffff
1a008c18:	ffffffff 	.word	0xffffffff
1a008c1c:	ffffffff 	.word	0xffffffff
1a008c20:	eba2 0003 	sub.w	r0, r2, r3
1a008c24:	4770      	bx	lr
1a008c26:	bf00      	nop

1a008c28 <strcmp>:
1a008c28:	7802      	ldrb	r2, [r0, #0]
1a008c2a:	780b      	ldrb	r3, [r1, #0]
1a008c2c:	2a01      	cmp	r2, #1
1a008c2e:	bf28      	it	cs
1a008c30:	429a      	cmpcs	r2, r3
1a008c32:	d1f5      	bne.n	1a008c20 <_realloc_r+0x364>
1a008c34:	e96d 4504 	strd	r4, r5, [sp, #-16]!
1a008c38:	ea40 0401 	orr.w	r4, r0, r1
1a008c3c:	e9cd 6702 	strd	r6, r7, [sp, #8]
1a008c40:	f06f 0c00 	mvn.w	ip, #0
1a008c44:	ea4f 7244 	mov.w	r2, r4, lsl #29
1a008c48:	b312      	cbz	r2, 1a008c90 <strcmp+0x68>
1a008c4a:	ea80 0401 	eor.w	r4, r0, r1
1a008c4e:	f014 0f07 	tst.w	r4, #7
1a008c52:	d16a      	bne.n	1a008d2a <strcmp+0x102>
1a008c54:	f000 0407 	and.w	r4, r0, #7
1a008c58:	f020 0007 	bic.w	r0, r0, #7
1a008c5c:	f004 0503 	and.w	r5, r4, #3
1a008c60:	f021 0107 	bic.w	r1, r1, #7
1a008c64:	ea4f 05c5 	mov.w	r5, r5, lsl #3
1a008c68:	e8f0 2304 	ldrd	r2, r3, [r0], #16
1a008c6c:	f014 0f04 	tst.w	r4, #4
1a008c70:	e8f1 6704 	ldrd	r6, r7, [r1], #16
1a008c74:	fa0c f405 	lsl.w	r4, ip, r5
1a008c78:	ea62 0204 	orn	r2, r2, r4
1a008c7c:	ea66 0604 	orn	r6, r6, r4
1a008c80:	d00a      	beq.n	1a008c98 <strcmp+0x70>
1a008c82:	ea63 0304 	orn	r3, r3, r4
1a008c86:	4662      	mov	r2, ip
1a008c88:	ea67 0704 	orn	r7, r7, r4
1a008c8c:	4666      	mov	r6, ip
1a008c8e:	e003      	b.n	1a008c98 <strcmp+0x70>
1a008c90:	e8f0 2304 	ldrd	r2, r3, [r0], #16
1a008c94:	e8f1 6704 	ldrd	r6, r7, [r1], #16
1a008c98:	fa82 f54c 	uadd8	r5, r2, ip
1a008c9c:	ea82 0406 	eor.w	r4, r2, r6
1a008ca0:	faa4 f48c 	sel	r4, r4, ip
1a008ca4:	bb6c      	cbnz	r4, 1a008d02 <strcmp+0xda>
1a008ca6:	fa83 f54c 	uadd8	r5, r3, ip
1a008caa:	ea83 0507 	eor.w	r5, r3, r7
1a008cae:	faa5 f58c 	sel	r5, r5, ip
1a008cb2:	b995      	cbnz	r5, 1a008cda <strcmp+0xb2>
1a008cb4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
1a008cb8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
1a008cbc:	fa82 f54c 	uadd8	r5, r2, ip
1a008cc0:	ea82 0406 	eor.w	r4, r2, r6
1a008cc4:	faa4 f48c 	sel	r4, r4, ip
1a008cc8:	fa83 f54c 	uadd8	r5, r3, ip
1a008ccc:	ea83 0507 	eor.w	r5, r3, r7
1a008cd0:	faa5 f58c 	sel	r5, r5, ip
1a008cd4:	4325      	orrs	r5, r4
1a008cd6:	d0db      	beq.n	1a008c90 <strcmp+0x68>
1a008cd8:	b99c      	cbnz	r4, 1a008d02 <strcmp+0xda>
1a008cda:	ba2d      	rev	r5, r5
1a008cdc:	fab5 f485 	clz	r4, r5
1a008ce0:	f024 0407 	bic.w	r4, r4, #7
1a008ce4:	fa27 f104 	lsr.w	r1, r7, r4
1a008ce8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
1a008cec:	fa23 f304 	lsr.w	r3, r3, r4
1a008cf0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
1a008cf4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a008cf8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
1a008cfc:	eba0 0001 	sub.w	r0, r0, r1
1a008d00:	4770      	bx	lr
1a008d02:	ba24      	rev	r4, r4
1a008d04:	fab4 f484 	clz	r4, r4
1a008d08:	f024 0407 	bic.w	r4, r4, #7
1a008d0c:	fa26 f104 	lsr.w	r1, r6, r4
1a008d10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
1a008d14:	fa22 f204 	lsr.w	r2, r2, r4
1a008d18:	f002 00ff 	and.w	r0, r2, #255	; 0xff
1a008d1c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a008d20:	e8fd 4504 	ldrd	r4, r5, [sp], #16
1a008d24:	eba0 0001 	sub.w	r0, r0, r1
1a008d28:	4770      	bx	lr
1a008d2a:	f014 0f03 	tst.w	r4, #3
1a008d2e:	d13c      	bne.n	1a008daa <strcmp+0x182>
1a008d30:	f010 0403 	ands.w	r4, r0, #3
1a008d34:	d128      	bne.n	1a008d88 <strcmp+0x160>
1a008d36:	f850 2b08 	ldr.w	r2, [r0], #8
1a008d3a:	f851 3b08 	ldr.w	r3, [r1], #8
1a008d3e:	fa82 f54c 	uadd8	r5, r2, ip
1a008d42:	ea82 0503 	eor.w	r5, r2, r3
1a008d46:	faa5 f58c 	sel	r5, r5, ip
1a008d4a:	b95d      	cbnz	r5, 1a008d64 <strcmp+0x13c>
1a008d4c:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a008d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a008d54:	fa82 f54c 	uadd8	r5, r2, ip
1a008d58:	ea82 0503 	eor.w	r5, r2, r3
1a008d5c:	faa5 f58c 	sel	r5, r5, ip
1a008d60:	2d00      	cmp	r5, #0
1a008d62:	d0e8      	beq.n	1a008d36 <strcmp+0x10e>
1a008d64:	ba2d      	rev	r5, r5
1a008d66:	fab5 f485 	clz	r4, r5
1a008d6a:	f024 0407 	bic.w	r4, r4, #7
1a008d6e:	fa23 f104 	lsr.w	r1, r3, r4
1a008d72:	fa22 f204 	lsr.w	r2, r2, r4
1a008d76:	f002 00ff 	and.w	r0, r2, #255	; 0xff
1a008d7a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a008d7e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
1a008d82:	eba0 0001 	sub.w	r0, r0, r1
1a008d86:	4770      	bx	lr
1a008d88:	ea4f 04c4 	mov.w	r4, r4, lsl #3
1a008d8c:	f020 0003 	bic.w	r0, r0, #3
1a008d90:	f850 2b08 	ldr.w	r2, [r0], #8
1a008d94:	f021 0103 	bic.w	r1, r1, #3
1a008d98:	f851 3b08 	ldr.w	r3, [r1], #8
1a008d9c:	fa0c f404 	lsl.w	r4, ip, r4
1a008da0:	ea62 0204 	orn	r2, r2, r4
1a008da4:	ea63 0304 	orn	r3, r3, r4
1a008da8:	e7c9      	b.n	1a008d3e <strcmp+0x116>
1a008daa:	f010 0403 	ands.w	r4, r0, #3
1a008dae:	d01a      	beq.n	1a008de6 <strcmp+0x1be>
1a008db0:	eba1 0104 	sub.w	r1, r1, r4
1a008db4:	f020 0003 	bic.w	r0, r0, #3
1a008db8:	07e4      	lsls	r4, r4, #31
1a008dba:	f850 2b04 	ldr.w	r2, [r0], #4
1a008dbe:	d006      	beq.n	1a008dce <strcmp+0x1a6>
1a008dc0:	d20f      	bcs.n	1a008de2 <strcmp+0x1ba>
1a008dc2:	788b      	ldrb	r3, [r1, #2]
1a008dc4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
1a008dc8:	1ae4      	subs	r4, r4, r3
1a008dca:	d106      	bne.n	1a008dda <strcmp+0x1b2>
1a008dcc:	b12b      	cbz	r3, 1a008dda <strcmp+0x1b2>
1a008dce:	78cb      	ldrb	r3, [r1, #3]
1a008dd0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
1a008dd4:	1ae4      	subs	r4, r4, r3
1a008dd6:	d100      	bne.n	1a008dda <strcmp+0x1b2>
1a008dd8:	b91b      	cbnz	r3, 1a008de2 <strcmp+0x1ba>
1a008dda:	4620      	mov	r0, r4
1a008ddc:	f85d 4b10 	ldr.w	r4, [sp], #16
1a008de0:	4770      	bx	lr
1a008de2:	f101 0104 	add.w	r1, r1, #4
1a008de6:	f850 2b04 	ldr.w	r2, [r0], #4
1a008dea:	07cc      	lsls	r4, r1, #31
1a008dec:	f021 0103 	bic.w	r1, r1, #3
1a008df0:	f851 3b04 	ldr.w	r3, [r1], #4
1a008df4:	d848      	bhi.n	1a008e88 <strcmp+0x260>
1a008df6:	d224      	bcs.n	1a008e42 <strcmp+0x21a>
1a008df8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
1a008dfc:	fa82 f54c 	uadd8	r5, r2, ip
1a008e00:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
1a008e04:	faa5 f58c 	sel	r5, r5, ip
1a008e08:	d10a      	bne.n	1a008e20 <strcmp+0x1f8>
1a008e0a:	b965      	cbnz	r5, 1a008e26 <strcmp+0x1fe>
1a008e0c:	f851 3b04 	ldr.w	r3, [r1], #4
1a008e10:	ea84 0402 	eor.w	r4, r4, r2
1a008e14:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
1a008e18:	d10e      	bne.n	1a008e38 <strcmp+0x210>
1a008e1a:	f850 2b04 	ldr.w	r2, [r0], #4
1a008e1e:	e7eb      	b.n	1a008df8 <strcmp+0x1d0>
1a008e20:	ea4f 2313 	mov.w	r3, r3, lsr #8
1a008e24:	e055      	b.n	1a008ed2 <strcmp+0x2aa>
1a008e26:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
1a008e2a:	d14d      	bne.n	1a008ec8 <strcmp+0x2a0>
1a008e2c:	7808      	ldrb	r0, [r1, #0]
1a008e2e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
1a008e32:	f1c0 0000 	rsb	r0, r0, #0
1a008e36:	4770      	bx	lr
1a008e38:	ea4f 6212 	mov.w	r2, r2, lsr #24
1a008e3c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
1a008e40:	e047      	b.n	1a008ed2 <strcmp+0x2aa>
1a008e42:	ea02 441c 	and.w	r4, r2, ip, lsr #16
1a008e46:	fa82 f54c 	uadd8	r5, r2, ip
1a008e4a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
1a008e4e:	faa5 f58c 	sel	r5, r5, ip
1a008e52:	d10a      	bne.n	1a008e6a <strcmp+0x242>
1a008e54:	b965      	cbnz	r5, 1a008e70 <strcmp+0x248>
1a008e56:	f851 3b04 	ldr.w	r3, [r1], #4
1a008e5a:	ea84 0402 	eor.w	r4, r4, r2
1a008e5e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
1a008e62:	d10c      	bne.n	1a008e7e <strcmp+0x256>
1a008e64:	f850 2b04 	ldr.w	r2, [r0], #4
1a008e68:	e7eb      	b.n	1a008e42 <strcmp+0x21a>
1a008e6a:	ea4f 4313 	mov.w	r3, r3, lsr #16
1a008e6e:	e030      	b.n	1a008ed2 <strcmp+0x2aa>
1a008e70:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
1a008e74:	d128      	bne.n	1a008ec8 <strcmp+0x2a0>
1a008e76:	880b      	ldrh	r3, [r1, #0]
1a008e78:	ea4f 4212 	mov.w	r2, r2, lsr #16
1a008e7c:	e029      	b.n	1a008ed2 <strcmp+0x2aa>
1a008e7e:	ea4f 4212 	mov.w	r2, r2, lsr #16
1a008e82:	ea03 431c 	and.w	r3, r3, ip, lsr #16
1a008e86:	e024      	b.n	1a008ed2 <strcmp+0x2aa>
1a008e88:	f002 04ff 	and.w	r4, r2, #255	; 0xff
1a008e8c:	fa82 f54c 	uadd8	r5, r2, ip
1a008e90:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
1a008e94:	faa5 f58c 	sel	r5, r5, ip
1a008e98:	d10a      	bne.n	1a008eb0 <strcmp+0x288>
1a008e9a:	b965      	cbnz	r5, 1a008eb6 <strcmp+0x28e>
1a008e9c:	f851 3b04 	ldr.w	r3, [r1], #4
1a008ea0:	ea84 0402 	eor.w	r4, r4, r2
1a008ea4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
1a008ea8:	d109      	bne.n	1a008ebe <strcmp+0x296>
1a008eaa:	f850 2b04 	ldr.w	r2, [r0], #4
1a008eae:	e7eb      	b.n	1a008e88 <strcmp+0x260>
1a008eb0:	ea4f 6313 	mov.w	r3, r3, lsr #24
1a008eb4:	e00d      	b.n	1a008ed2 <strcmp+0x2aa>
1a008eb6:	f015 0fff 	tst.w	r5, #255	; 0xff
1a008eba:	d105      	bne.n	1a008ec8 <strcmp+0x2a0>
1a008ebc:	680b      	ldr	r3, [r1, #0]
1a008ebe:	ea4f 2212 	mov.w	r2, r2, lsr #8
1a008ec2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
1a008ec6:	e004      	b.n	1a008ed2 <strcmp+0x2aa>
1a008ec8:	f04f 0000 	mov.w	r0, #0
1a008ecc:	e8fd 4504 	ldrd	r4, r5, [sp], #16
1a008ed0:	4770      	bx	lr
1a008ed2:	ba12      	rev	r2, r2
1a008ed4:	ba1b      	rev	r3, r3
1a008ed6:	fa82 f44c 	uadd8	r4, r2, ip
1a008eda:	ea82 0403 	eor.w	r4, r2, r3
1a008ede:	faa4 f58c 	sel	r5, r4, ip
1a008ee2:	fab5 f485 	clz	r4, r5
1a008ee6:	fa02 f204 	lsl.w	r2, r2, r4
1a008eea:	fa03 f304 	lsl.w	r3, r3, r4
1a008eee:	ea4f 6012 	mov.w	r0, r2, lsr #24
1a008ef2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
1a008ef6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
1a008efa:	4770      	bx	lr

1a008efc <__sprint_r.part.0>:
1a008efc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a008f00:	6e4b      	ldr	r3, [r1, #100]	; 0x64
1a008f02:	049c      	lsls	r4, r3, #18
1a008f04:	4693      	mov	fp, r2
1a008f06:	d52f      	bpl.n	1a008f68 <__sprint_r.part.0+0x6c>
1a008f08:	6893      	ldr	r3, [r2, #8]
1a008f0a:	6812      	ldr	r2, [r2, #0]
1a008f0c:	b353      	cbz	r3, 1a008f64 <__sprint_r.part.0+0x68>
1a008f0e:	460e      	mov	r6, r1
1a008f10:	4607      	mov	r7, r0
1a008f12:	f102 0908 	add.w	r9, r2, #8
1a008f16:	e919 0420 	ldmdb	r9, {r5, sl}
1a008f1a:	ea5f 089a 	movs.w	r8, sl, lsr #2
1a008f1e:	d017      	beq.n	1a008f50 <__sprint_r.part.0+0x54>
1a008f20:	3d04      	subs	r5, #4
1a008f22:	2400      	movs	r4, #0
1a008f24:	e001      	b.n	1a008f2a <__sprint_r.part.0+0x2e>
1a008f26:	45a0      	cmp	r8, r4
1a008f28:	d010      	beq.n	1a008f4c <__sprint_r.part.0+0x50>
1a008f2a:	4632      	mov	r2, r6
1a008f2c:	f855 1f04 	ldr.w	r1, [r5, #4]!
1a008f30:	4638      	mov	r0, r7
1a008f32:	f000 feef 	bl	1a009d14 <_fputwc_r>
1a008f36:	1c43      	adds	r3, r0, #1
1a008f38:	f104 0401 	add.w	r4, r4, #1
1a008f3c:	d1f3      	bne.n	1a008f26 <__sprint_r.part.0+0x2a>
1a008f3e:	2300      	movs	r3, #0
1a008f40:	f8cb 3008 	str.w	r3, [fp, #8]
1a008f44:	f8cb 3004 	str.w	r3, [fp, #4]
1a008f48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a008f4c:	f8db 3008 	ldr.w	r3, [fp, #8]
1a008f50:	f02a 0a03 	bic.w	sl, sl, #3
1a008f54:	eba3 030a 	sub.w	r3, r3, sl
1a008f58:	f8cb 3008 	str.w	r3, [fp, #8]
1a008f5c:	f109 0908 	add.w	r9, r9, #8
1a008f60:	2b00      	cmp	r3, #0
1a008f62:	d1d8      	bne.n	1a008f16 <__sprint_r.part.0+0x1a>
1a008f64:	2000      	movs	r0, #0
1a008f66:	e7ea      	b.n	1a008f3e <__sprint_r.part.0+0x42>
1a008f68:	f7fe fd4c 	bl	1a007a04 <__sfvwrite_r>
1a008f6c:	2300      	movs	r3, #0
1a008f6e:	f8cb 3008 	str.w	r3, [fp, #8]
1a008f72:	f8cb 3004 	str.w	r3, [fp, #4]
1a008f76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a008f7a:	bf00      	nop

1a008f7c <__sprint_r>:
1a008f7c:	6893      	ldr	r3, [r2, #8]
1a008f7e:	b103      	cbz	r3, 1a008f82 <__sprint_r+0x6>
1a008f80:	e7bc      	b.n	1a008efc <__sprint_r.part.0>
1a008f82:	b410      	push	{r4}
1a008f84:	4618      	mov	r0, r3
1a008f86:	6053      	str	r3, [r2, #4]
1a008f88:	f85d 4b04 	ldr.w	r4, [sp], #4
1a008f8c:	4770      	bx	lr
1a008f8e:	bf00      	nop

1a008f90 <_vfiprintf_r>:
1a008f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a008f94:	b0ad      	sub	sp, #180	; 0xb4
1a008f96:	461d      	mov	r5, r3
1a008f98:	9101      	str	r1, [sp, #4]
1a008f9a:	4691      	mov	r9, r2
1a008f9c:	9308      	str	r3, [sp, #32]
1a008f9e:	9006      	str	r0, [sp, #24]
1a008fa0:	b118      	cbz	r0, 1a008faa <_vfiprintf_r+0x1a>
1a008fa2:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a008fa4:	2b00      	cmp	r3, #0
1a008fa6:	f000 80e0 	beq.w	1a00916a <_vfiprintf_r+0x1da>
1a008faa:	9c01      	ldr	r4, [sp, #4]
1a008fac:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
1a008fb0:	b281      	uxth	r1, r0
1a008fb2:	048b      	lsls	r3, r1, #18
1a008fb4:	d407      	bmi.n	1a008fc6 <_vfiprintf_r+0x36>
1a008fb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a008fb8:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
1a008fbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
1a008fc0:	81a1      	strh	r1, [r4, #12]
1a008fc2:	6663      	str	r3, [r4, #100]	; 0x64
1a008fc4:	b289      	uxth	r1, r1
1a008fc6:	070f      	lsls	r7, r1, #28
1a008fc8:	f140 80b1 	bpl.w	1a00912e <_vfiprintf_r+0x19e>
1a008fcc:	9b01      	ldr	r3, [sp, #4]
1a008fce:	691b      	ldr	r3, [r3, #16]
1a008fd0:	2b00      	cmp	r3, #0
1a008fd2:	f000 80ac 	beq.w	1a00912e <_vfiprintf_r+0x19e>
1a008fd6:	f001 011a 	and.w	r1, r1, #26
1a008fda:	290a      	cmp	r1, #10
1a008fdc:	f000 80b5 	beq.w	1a00914a <_vfiprintf_r+0x1ba>
1a008fe0:	2300      	movs	r3, #0
1a008fe2:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
1a008fe6:	930b      	str	r3, [sp, #44]	; 0x2c
1a008fe8:	9311      	str	r3, [sp, #68]	; 0x44
1a008fea:	9310      	str	r3, [sp, #64]	; 0x40
1a008fec:	9304      	str	r3, [sp, #16]
1a008fee:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
1a008ff2:	46da      	mov	sl, fp
1a008ff4:	f899 3000 	ldrb.w	r3, [r9]
1a008ff8:	464c      	mov	r4, r9
1a008ffa:	b1fb      	cbz	r3, 1a00903c <_vfiprintf_r+0xac>
1a008ffc:	2b25      	cmp	r3, #37	; 0x25
1a008ffe:	d102      	bne.n	1a009006 <_vfiprintf_r+0x76>
1a009000:	e01c      	b.n	1a00903c <_vfiprintf_r+0xac>
1a009002:	2b25      	cmp	r3, #37	; 0x25
1a009004:	d003      	beq.n	1a00900e <_vfiprintf_r+0x7e>
1a009006:	f814 3f01 	ldrb.w	r3, [r4, #1]!
1a00900a:	2b00      	cmp	r3, #0
1a00900c:	d1f9      	bne.n	1a009002 <_vfiprintf_r+0x72>
1a00900e:	eba4 0509 	sub.w	r5, r4, r9
1a009012:	b19d      	cbz	r5, 1a00903c <_vfiprintf_r+0xac>
1a009014:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a009016:	9a11      	ldr	r2, [sp, #68]	; 0x44
1a009018:	f8ca 9000 	str.w	r9, [sl]
1a00901c:	3301      	adds	r3, #1
1a00901e:	442a      	add	r2, r5
1a009020:	2b07      	cmp	r3, #7
1a009022:	f8ca 5004 	str.w	r5, [sl, #4]
1a009026:	9211      	str	r2, [sp, #68]	; 0x44
1a009028:	9310      	str	r3, [sp, #64]	; 0x40
1a00902a:	dd7a      	ble.n	1a009122 <_vfiprintf_r+0x192>
1a00902c:	2a00      	cmp	r2, #0
1a00902e:	f040 848f 	bne.w	1a009950 <_vfiprintf_r+0x9c0>
1a009032:	9b04      	ldr	r3, [sp, #16]
1a009034:	9210      	str	r2, [sp, #64]	; 0x40
1a009036:	442b      	add	r3, r5
1a009038:	46da      	mov	sl, fp
1a00903a:	9304      	str	r3, [sp, #16]
1a00903c:	7823      	ldrb	r3, [r4, #0]
1a00903e:	2b00      	cmp	r3, #0
1a009040:	f000 83b1 	beq.w	1a0097a6 <_vfiprintf_r+0x816>
1a009044:	2000      	movs	r0, #0
1a009046:	f04f 0300 	mov.w	r3, #0
1a00904a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
1a00904e:	f104 0901 	add.w	r9, r4, #1
1a009052:	7862      	ldrb	r2, [r4, #1]
1a009054:	4605      	mov	r5, r0
1a009056:	4606      	mov	r6, r0
1a009058:	4603      	mov	r3, r0
1a00905a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
1a00905e:	f109 0901 	add.w	r9, r9, #1
1a009062:	f1a2 0120 	sub.w	r1, r2, #32
1a009066:	2958      	cmp	r1, #88	; 0x58
1a009068:	f200 830e 	bhi.w	1a009688 <_vfiprintf_r+0x6f8>
1a00906c:	e8df f011 	tbh	[pc, r1, lsl #1]
1a009070:	030c0237 	.word	0x030c0237
1a009074:	02eb030c 	.word	0x02eb030c
1a009078:	030c030c 	.word	0x030c030c
1a00907c:	030c030c 	.word	0x030c030c
1a009080:	030c030c 	.word	0x030c030c
1a009084:	02f0029e 	.word	0x02f0029e
1a009088:	0082030c 	.word	0x0082030c
1a00908c:	030c0277 	.word	0x030c0277
1a009090:	01d401cf 	.word	0x01d401cf
1a009094:	01d401d4 	.word	0x01d401d4
1a009098:	01d401d4 	.word	0x01d401d4
1a00909c:	01d401d4 	.word	0x01d401d4
1a0090a0:	01d401d4 	.word	0x01d401d4
1a0090a4:	030c030c 	.word	0x030c030c
1a0090a8:	030c030c 	.word	0x030c030c
1a0090ac:	030c030c 	.word	0x030c030c
1a0090b0:	030c030c 	.word	0x030c030c
1a0090b4:	030c030c 	.word	0x030c030c
1a0090b8:	030c023f 	.word	0x030c023f
1a0090bc:	030c030c 	.word	0x030c030c
1a0090c0:	030c030c 	.word	0x030c030c
1a0090c4:	030c030c 	.word	0x030c030c
1a0090c8:	030c030c 	.word	0x030c030c
1a0090cc:	0246030c 	.word	0x0246030c
1a0090d0:	030c030c 	.word	0x030c030c
1a0090d4:	030c030c 	.word	0x030c030c
1a0090d8:	024a030c 	.word	0x024a030c
1a0090dc:	030c030c 	.word	0x030c030c
1a0090e0:	030c0252 	.word	0x030c0252
1a0090e4:	030c030c 	.word	0x030c030c
1a0090e8:	030c030c 	.word	0x030c030c
1a0090ec:	030c030c 	.word	0x030c030c
1a0090f0:	030c030c 	.word	0x030c030c
1a0090f4:	01e2030c 	.word	0x01e2030c
1a0090f8:	030c01f6 	.word	0x030c01f6
1a0090fc:	030c030c 	.word	0x030c030c
1a009100:	01f60307 	.word	0x01f60307
1a009104:	030c030c 	.word	0x030c030c
1a009108:	030c0291 	.word	0x030c0291
1a00910c:	008702f5 	.word	0x008702f5
1a009110:	02c302b1 	.word	0x02c302b1
1a009114:	02c8030c 	.word	0x02c8030c
1a009118:	01bd030c 	.word	0x01bd030c
1a00911c:	030c030c 	.word	0x030c030c
1a009120:	02aa      	.short	0x02aa
1a009122:	f10a 0a08 	add.w	sl, sl, #8
1a009126:	9b04      	ldr	r3, [sp, #16]
1a009128:	442b      	add	r3, r5
1a00912a:	9304      	str	r3, [sp, #16]
1a00912c:	e786      	b.n	1a00903c <_vfiprintf_r+0xac>
1a00912e:	9c01      	ldr	r4, [sp, #4]
1a009130:	9806      	ldr	r0, [sp, #24]
1a009132:	4621      	mov	r1, r4
1a009134:	f7fd fc48 	bl	1a0069c8 <__swsetup_r>
1a009138:	2800      	cmp	r0, #0
1a00913a:	f040 8340 	bne.w	1a0097be <_vfiprintf_r+0x82e>
1a00913e:	89a1      	ldrh	r1, [r4, #12]
1a009140:	f001 011a 	and.w	r1, r1, #26
1a009144:	290a      	cmp	r1, #10
1a009146:	f47f af4b 	bne.w	1a008fe0 <_vfiprintf_r+0x50>
1a00914a:	9901      	ldr	r1, [sp, #4]
1a00914c:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
1a009150:	2b00      	cmp	r3, #0
1a009152:	f6ff af45 	blt.w	1a008fe0 <_vfiprintf_r+0x50>
1a009156:	462b      	mov	r3, r5
1a009158:	464a      	mov	r2, r9
1a00915a:	9806      	ldr	r0, [sp, #24]
1a00915c:	f000 fd24 	bl	1a009ba8 <__sbprintf>
1a009160:	9004      	str	r0, [sp, #16]
1a009162:	9804      	ldr	r0, [sp, #16]
1a009164:	b02d      	add	sp, #180	; 0xb4
1a009166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00916a:	f7fb faf5 	bl	1a004758 <__sinit>
1a00916e:	e71c      	b.n	1a008faa <_vfiprintf_r+0x1a>
1a009170:	4276      	negs	r6, r6
1a009172:	9208      	str	r2, [sp, #32]
1a009174:	f043 0304 	orr.w	r3, r3, #4
1a009178:	f899 2000 	ldrb.w	r2, [r9]
1a00917c:	e76f      	b.n	1a00905e <_vfiprintf_r+0xce>
1a00917e:	9607      	str	r6, [sp, #28]
1a009180:	f013 0220 	ands.w	r2, r3, #32
1a009184:	f040 845a 	bne.w	1a009a3c <_vfiprintf_r+0xaac>
1a009188:	f013 0110 	ands.w	r1, r3, #16
1a00918c:	f040 83f1 	bne.w	1a009972 <_vfiprintf_r+0x9e2>
1a009190:	f013 0240 	ands.w	r2, r3, #64	; 0x40
1a009194:	f000 83ed 	beq.w	1a009972 <_vfiprintf_r+0x9e2>
1a009198:	9808      	ldr	r0, [sp, #32]
1a00919a:	460a      	mov	r2, r1
1a00919c:	4601      	mov	r1, r0
1a00919e:	3104      	adds	r1, #4
1a0091a0:	8806      	ldrh	r6, [r0, #0]
1a0091a2:	9108      	str	r1, [sp, #32]
1a0091a4:	2700      	movs	r7, #0
1a0091a6:	f04f 0100 	mov.w	r1, #0
1a0091aa:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
1a0091ae:	2500      	movs	r5, #0
1a0091b0:	1c61      	adds	r1, r4, #1
1a0091b2:	f000 8175 	beq.w	1a0094a0 <_vfiprintf_r+0x510>
1a0091b6:	f023 0180 	bic.w	r1, r3, #128	; 0x80
1a0091ba:	9103      	str	r1, [sp, #12]
1a0091bc:	ea56 0107 	orrs.w	r1, r6, r7
1a0091c0:	f040 8173 	bne.w	1a0094aa <_vfiprintf_r+0x51a>
1a0091c4:	2c00      	cmp	r4, #0
1a0091c6:	f040 8356 	bne.w	1a009876 <_vfiprintf_r+0x8e6>
1a0091ca:	2a00      	cmp	r2, #0
1a0091cc:	f040 83b2 	bne.w	1a009934 <_vfiprintf_r+0x9a4>
1a0091d0:	f013 0301 	ands.w	r3, r3, #1
1a0091d4:	9305      	str	r3, [sp, #20]
1a0091d6:	f000 8447 	beq.w	1a009a68 <_vfiprintf_r+0xad8>
1a0091da:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
1a0091de:	2330      	movs	r3, #48	; 0x30
1a0091e0:	f808 3d41 	strb.w	r3, [r8, #-65]!
1a0091e4:	9b05      	ldr	r3, [sp, #20]
1a0091e6:	42a3      	cmp	r3, r4
1a0091e8:	bfb8      	it	lt
1a0091ea:	4623      	movlt	r3, r4
1a0091ec:	9302      	str	r3, [sp, #8]
1a0091ee:	b10d      	cbz	r5, 1a0091f4 <_vfiprintf_r+0x264>
1a0091f0:	3301      	adds	r3, #1
1a0091f2:	9302      	str	r3, [sp, #8]
1a0091f4:	9b03      	ldr	r3, [sp, #12]
1a0091f6:	f013 0302 	ands.w	r3, r3, #2
1a0091fa:	9309      	str	r3, [sp, #36]	; 0x24
1a0091fc:	d002      	beq.n	1a009204 <_vfiprintf_r+0x274>
1a0091fe:	9b02      	ldr	r3, [sp, #8]
1a009200:	3302      	adds	r3, #2
1a009202:	9302      	str	r3, [sp, #8]
1a009204:	9b03      	ldr	r3, [sp, #12]
1a009206:	f013 0384 	ands.w	r3, r3, #132	; 0x84
1a00920a:	930a      	str	r3, [sp, #40]	; 0x28
1a00920c:	f040 8263 	bne.w	1a0096d6 <_vfiprintf_r+0x746>
1a009210:	9b07      	ldr	r3, [sp, #28]
1a009212:	9a02      	ldr	r2, [sp, #8]
1a009214:	1a9d      	subs	r5, r3, r2
1a009216:	2d00      	cmp	r5, #0
1a009218:	f340 825d 	ble.w	1a0096d6 <_vfiprintf_r+0x746>
1a00921c:	2d10      	cmp	r5, #16
1a00921e:	f340 8477 	ble.w	1a009b10 <_vfiprintf_r+0xb80>
1a009222:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a009224:	9a11      	ldr	r2, [sp, #68]	; 0x44
1a009226:	4eb9      	ldr	r6, [pc, #740]	; (1a00950c <_vfiprintf_r+0x57c>)
1a009228:	46d6      	mov	lr, sl
1a00922a:	2710      	movs	r7, #16
1a00922c:	46a2      	mov	sl, r4
1a00922e:	4619      	mov	r1, r3
1a009230:	9c06      	ldr	r4, [sp, #24]
1a009232:	e007      	b.n	1a009244 <_vfiprintf_r+0x2b4>
1a009234:	f101 0c02 	add.w	ip, r1, #2
1a009238:	f10e 0e08 	add.w	lr, lr, #8
1a00923c:	4601      	mov	r1, r0
1a00923e:	3d10      	subs	r5, #16
1a009240:	2d10      	cmp	r5, #16
1a009242:	dd11      	ble.n	1a009268 <_vfiprintf_r+0x2d8>
1a009244:	1c48      	adds	r0, r1, #1
1a009246:	3210      	adds	r2, #16
1a009248:	2807      	cmp	r0, #7
1a00924a:	9211      	str	r2, [sp, #68]	; 0x44
1a00924c:	e88e 00c0 	stmia.w	lr, {r6, r7}
1a009250:	9010      	str	r0, [sp, #64]	; 0x40
1a009252:	ddef      	ble.n	1a009234 <_vfiprintf_r+0x2a4>
1a009254:	2a00      	cmp	r2, #0
1a009256:	f040 8231 	bne.w	1a0096bc <_vfiprintf_r+0x72c>
1a00925a:	3d10      	subs	r5, #16
1a00925c:	2d10      	cmp	r5, #16
1a00925e:	4611      	mov	r1, r2
1a009260:	f04f 0c01 	mov.w	ip, #1
1a009264:	46de      	mov	lr, fp
1a009266:	dced      	bgt.n	1a009244 <_vfiprintf_r+0x2b4>
1a009268:	4654      	mov	r4, sl
1a00926a:	4661      	mov	r1, ip
1a00926c:	46f2      	mov	sl, lr
1a00926e:	442a      	add	r2, r5
1a009270:	2907      	cmp	r1, #7
1a009272:	9211      	str	r2, [sp, #68]	; 0x44
1a009274:	f8ca 6000 	str.w	r6, [sl]
1a009278:	f8ca 5004 	str.w	r5, [sl, #4]
1a00927c:	9110      	str	r1, [sp, #64]	; 0x40
1a00927e:	f300 82e6 	bgt.w	1a00984e <_vfiprintf_r+0x8be>
1a009282:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
1a009286:	f10a 0a08 	add.w	sl, sl, #8
1a00928a:	1c48      	adds	r0, r1, #1
1a00928c:	2d00      	cmp	r5, #0
1a00928e:	f040 822a 	bne.w	1a0096e6 <_vfiprintf_r+0x756>
1a009292:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a009294:	2b00      	cmp	r3, #0
1a009296:	f000 8244 	beq.w	1a009722 <_vfiprintf_r+0x792>
1a00929a:	3202      	adds	r2, #2
1a00929c:	a90e      	add	r1, sp, #56	; 0x38
1a00929e:	2302      	movs	r3, #2
1a0092a0:	2807      	cmp	r0, #7
1a0092a2:	9211      	str	r2, [sp, #68]	; 0x44
1a0092a4:	9010      	str	r0, [sp, #64]	; 0x40
1a0092a6:	e88a 000a 	stmia.w	sl, {r1, r3}
1a0092aa:	f340 8236 	ble.w	1a00971a <_vfiprintf_r+0x78a>
1a0092ae:	2a00      	cmp	r2, #0
1a0092b0:	f040 838b 	bne.w	1a0099ca <_vfiprintf_r+0xa3a>
1a0092b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0092b6:	2b80      	cmp	r3, #128	; 0x80
1a0092b8:	f04f 0001 	mov.w	r0, #1
1a0092bc:	4611      	mov	r1, r2
1a0092be:	46da      	mov	sl, fp
1a0092c0:	f040 8233 	bne.w	1a00972a <_vfiprintf_r+0x79a>
1a0092c4:	9b07      	ldr	r3, [sp, #28]
1a0092c6:	9d02      	ldr	r5, [sp, #8]
1a0092c8:	1b5e      	subs	r6, r3, r5
1a0092ca:	2e00      	cmp	r6, #0
1a0092cc:	f340 822d 	ble.w	1a00972a <_vfiprintf_r+0x79a>
1a0092d0:	2e10      	cmp	r6, #16
1a0092d2:	4d8f      	ldr	r5, [pc, #572]	; (1a009510 <_vfiprintf_r+0x580>)
1a0092d4:	f340 842f 	ble.w	1a009b36 <_vfiprintf_r+0xba6>
1a0092d8:	46d4      	mov	ip, sl
1a0092da:	2710      	movs	r7, #16
1a0092dc:	46a2      	mov	sl, r4
1a0092de:	9c06      	ldr	r4, [sp, #24]
1a0092e0:	e007      	b.n	1a0092f2 <_vfiprintf_r+0x362>
1a0092e2:	f101 0e02 	add.w	lr, r1, #2
1a0092e6:	f10c 0c08 	add.w	ip, ip, #8
1a0092ea:	4601      	mov	r1, r0
1a0092ec:	3e10      	subs	r6, #16
1a0092ee:	2e10      	cmp	r6, #16
1a0092f0:	dd11      	ble.n	1a009316 <_vfiprintf_r+0x386>
1a0092f2:	1c48      	adds	r0, r1, #1
1a0092f4:	3210      	adds	r2, #16
1a0092f6:	2807      	cmp	r0, #7
1a0092f8:	9211      	str	r2, [sp, #68]	; 0x44
1a0092fa:	e88c 00a0 	stmia.w	ip, {r5, r7}
1a0092fe:	9010      	str	r0, [sp, #64]	; 0x40
1a009300:	ddef      	ble.n	1a0092e2 <_vfiprintf_r+0x352>
1a009302:	2a00      	cmp	r2, #0
1a009304:	f040 8296 	bne.w	1a009834 <_vfiprintf_r+0x8a4>
1a009308:	3e10      	subs	r6, #16
1a00930a:	2e10      	cmp	r6, #16
1a00930c:	f04f 0e01 	mov.w	lr, #1
1a009310:	4611      	mov	r1, r2
1a009312:	46dc      	mov	ip, fp
1a009314:	dced      	bgt.n	1a0092f2 <_vfiprintf_r+0x362>
1a009316:	4654      	mov	r4, sl
1a009318:	46e2      	mov	sl, ip
1a00931a:	4432      	add	r2, r6
1a00931c:	f1be 0f07 	cmp.w	lr, #7
1a009320:	9211      	str	r2, [sp, #68]	; 0x44
1a009322:	e88a 0060 	stmia.w	sl, {r5, r6}
1a009326:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
1a00932a:	f300 835b 	bgt.w	1a0099e4 <_vfiprintf_r+0xa54>
1a00932e:	9b05      	ldr	r3, [sp, #20]
1a009330:	1ae4      	subs	r4, r4, r3
1a009332:	2c00      	cmp	r4, #0
1a009334:	f10a 0a08 	add.w	sl, sl, #8
1a009338:	f10e 0001 	add.w	r0, lr, #1
1a00933c:	4671      	mov	r1, lr
1a00933e:	f300 81f9 	bgt.w	1a009734 <_vfiprintf_r+0x7a4>
1a009342:	9905      	ldr	r1, [sp, #20]
1a009344:	f8ca 8000 	str.w	r8, [sl]
1a009348:	440a      	add	r2, r1
1a00934a:	2807      	cmp	r0, #7
1a00934c:	9211      	str	r2, [sp, #68]	; 0x44
1a00934e:	f8ca 1004 	str.w	r1, [sl, #4]
1a009352:	9010      	str	r0, [sp, #64]	; 0x40
1a009354:	f340 8255 	ble.w	1a009802 <_vfiprintf_r+0x872>
1a009358:	2a00      	cmp	r2, #0
1a00935a:	f040 82ee 	bne.w	1a00993a <_vfiprintf_r+0x9aa>
1a00935e:	9b03      	ldr	r3, [sp, #12]
1a009360:	9210      	str	r2, [sp, #64]	; 0x40
1a009362:	0758      	lsls	r0, r3, #29
1a009364:	d538      	bpl.n	1a0093d8 <_vfiprintf_r+0x448>
1a009366:	9b07      	ldr	r3, [sp, #28]
1a009368:	9902      	ldr	r1, [sp, #8]
1a00936a:	1a5c      	subs	r4, r3, r1
1a00936c:	2c00      	cmp	r4, #0
1a00936e:	f340 82ba 	ble.w	1a0098e6 <_vfiprintf_r+0x956>
1a009372:	46da      	mov	sl, fp
1a009374:	2c10      	cmp	r4, #16
1a009376:	f340 83da 	ble.w	1a009b2e <_vfiprintf_r+0xb9e>
1a00937a:	9910      	ldr	r1, [sp, #64]	; 0x40
1a00937c:	4e63      	ldr	r6, [pc, #396]	; (1a00950c <_vfiprintf_r+0x57c>)
1a00937e:	9f06      	ldr	r7, [sp, #24]
1a009380:	f8dd 8004 	ldr.w	r8, [sp, #4]
1a009384:	2510      	movs	r5, #16
1a009386:	e006      	b.n	1a009396 <_vfiprintf_r+0x406>
1a009388:	1c88      	adds	r0, r1, #2
1a00938a:	f10a 0a08 	add.w	sl, sl, #8
1a00938e:	4619      	mov	r1, r3
1a009390:	3c10      	subs	r4, #16
1a009392:	2c10      	cmp	r4, #16
1a009394:	dd13      	ble.n	1a0093be <_vfiprintf_r+0x42e>
1a009396:	1c4b      	adds	r3, r1, #1
1a009398:	3210      	adds	r2, #16
1a00939a:	2b07      	cmp	r3, #7
1a00939c:	9211      	str	r2, [sp, #68]	; 0x44
1a00939e:	f8ca 6000 	str.w	r6, [sl]
1a0093a2:	f8ca 5004 	str.w	r5, [sl, #4]
1a0093a6:	9310      	str	r3, [sp, #64]	; 0x40
1a0093a8:	ddee      	ble.n	1a009388 <_vfiprintf_r+0x3f8>
1a0093aa:	2a00      	cmp	r2, #0
1a0093ac:	f040 820b 	bne.w	1a0097c6 <_vfiprintf_r+0x836>
1a0093b0:	3c10      	subs	r4, #16
1a0093b2:	2c10      	cmp	r4, #16
1a0093b4:	f04f 0001 	mov.w	r0, #1
1a0093b8:	4611      	mov	r1, r2
1a0093ba:	46da      	mov	sl, fp
1a0093bc:	dceb      	bgt.n	1a009396 <_vfiprintf_r+0x406>
1a0093be:	4422      	add	r2, r4
1a0093c0:	2807      	cmp	r0, #7
1a0093c2:	9211      	str	r2, [sp, #68]	; 0x44
1a0093c4:	f8ca 6000 	str.w	r6, [sl]
1a0093c8:	f8ca 4004 	str.w	r4, [sl, #4]
1a0093cc:	9010      	str	r0, [sp, #64]	; 0x40
1a0093ce:	f340 8223 	ble.w	1a009818 <_vfiprintf_r+0x888>
1a0093d2:	2a00      	cmp	r2, #0
1a0093d4:	f040 8367 	bne.w	1a009aa6 <_vfiprintf_r+0xb16>
1a0093d8:	9b04      	ldr	r3, [sp, #16]
1a0093da:	9a07      	ldr	r2, [sp, #28]
1a0093dc:	9902      	ldr	r1, [sp, #8]
1a0093de:	428a      	cmp	r2, r1
1a0093e0:	bfac      	ite	ge
1a0093e2:	189b      	addge	r3, r3, r2
1a0093e4:	185b      	addlt	r3, r3, r1
1a0093e6:	9304      	str	r3, [sp, #16]
1a0093e8:	e21f      	b.n	1a00982a <_vfiprintf_r+0x89a>
1a0093ea:	9607      	str	r6, [sp, #28]
1a0093ec:	069e      	lsls	r6, r3, #26
1a0093ee:	f100 8319 	bmi.w	1a009a24 <_vfiprintf_r+0xa94>
1a0093f2:	9908      	ldr	r1, [sp, #32]
1a0093f4:	06dd      	lsls	r5, r3, #27
1a0093f6:	460a      	mov	r2, r1
1a0093f8:	f100 82b5 	bmi.w	1a009966 <_vfiprintf_r+0x9d6>
1a0093fc:	0658      	lsls	r0, r3, #25
1a0093fe:	f140 82b2 	bpl.w	1a009966 <_vfiprintf_r+0x9d6>
1a009402:	880e      	ldrh	r6, [r1, #0]
1a009404:	3104      	adds	r1, #4
1a009406:	2700      	movs	r7, #0
1a009408:	2201      	movs	r2, #1
1a00940a:	9108      	str	r1, [sp, #32]
1a00940c:	e6cb      	b.n	1a0091a6 <_vfiprintf_r+0x216>
1a00940e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a009412:	f899 2000 	ldrb.w	r2, [r9]
1a009416:	e622      	b.n	1a00905e <_vfiprintf_r+0xce>
1a009418:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
1a00941c:	2600      	movs	r6, #0
1a00941e:	f819 2b01 	ldrb.w	r2, [r9], #1
1a009422:	eb06 0686 	add.w	r6, r6, r6, lsl #2
1a009426:	eb01 0646 	add.w	r6, r1, r6, lsl #1
1a00942a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
1a00942e:	2909      	cmp	r1, #9
1a009430:	d9f5      	bls.n	1a00941e <_vfiprintf_r+0x48e>
1a009432:	e616      	b.n	1a009062 <_vfiprintf_r+0xd2>
1a009434:	9908      	ldr	r1, [sp, #32]
1a009436:	9607      	str	r6, [sp, #28]
1a009438:	680a      	ldr	r2, [r1, #0]
1a00943a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
1a00943e:	f04f 0000 	mov.w	r0, #0
1a009442:	460a      	mov	r2, r1
1a009444:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
1a009448:	3204      	adds	r2, #4
1a00944a:	2001      	movs	r0, #1
1a00944c:	9002      	str	r0, [sp, #8]
1a00944e:	9208      	str	r2, [sp, #32]
1a009450:	9005      	str	r0, [sp, #20]
1a009452:	f10d 0848 	add.w	r8, sp, #72	; 0x48
1a009456:	9303      	str	r3, [sp, #12]
1a009458:	2400      	movs	r4, #0
1a00945a:	e6cb      	b.n	1a0091f4 <_vfiprintf_r+0x264>
1a00945c:	9607      	str	r6, [sp, #28]
1a00945e:	2800      	cmp	r0, #0
1a009460:	f040 8382 	bne.w	1a009b68 <_vfiprintf_r+0xbd8>
1a009464:	069e      	lsls	r6, r3, #26
1a009466:	f100 82d1 	bmi.w	1a009a0c <_vfiprintf_r+0xa7c>
1a00946a:	06dd      	lsls	r5, r3, #27
1a00946c:	f100 828d 	bmi.w	1a00998a <_vfiprintf_r+0x9fa>
1a009470:	0658      	lsls	r0, r3, #25
1a009472:	f140 828a 	bpl.w	1a00998a <_vfiprintf_r+0x9fa>
1a009476:	9d08      	ldr	r5, [sp, #32]
1a009478:	f9b5 6000 	ldrsh.w	r6, [r5]
1a00947c:	462a      	mov	r2, r5
1a00947e:	17f7      	asrs	r7, r6, #31
1a009480:	3204      	adds	r2, #4
1a009482:	4630      	mov	r0, r6
1a009484:	4639      	mov	r1, r7
1a009486:	9208      	str	r2, [sp, #32]
1a009488:	2800      	cmp	r0, #0
1a00948a:	f171 0200 	sbcs.w	r2, r1, #0
1a00948e:	f2c0 82ee 	blt.w	1a009a6e <_vfiprintf_r+0xade>
1a009492:	1c61      	adds	r1, r4, #1
1a009494:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
1a009498:	f04f 0201 	mov.w	r2, #1
1a00949c:	f47f ae8b 	bne.w	1a0091b6 <_vfiprintf_r+0x226>
1a0094a0:	ea56 0107 	orrs.w	r1, r6, r7
1a0094a4:	f000 81e8 	beq.w	1a009878 <_vfiprintf_r+0x8e8>
1a0094a8:	9303      	str	r3, [sp, #12]
1a0094aa:	2a01      	cmp	r2, #1
1a0094ac:	f000 8225 	beq.w	1a0098fa <_vfiprintf_r+0x96a>
1a0094b0:	2a02      	cmp	r2, #2
1a0094b2:	f040 81f5 	bne.w	1a0098a0 <_vfiprintf_r+0x910>
1a0094b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
1a0094b8:	46d8      	mov	r8, fp
1a0094ba:	0933      	lsrs	r3, r6, #4
1a0094bc:	f006 010f 	and.w	r1, r6, #15
1a0094c0:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
1a0094c4:	093a      	lsrs	r2, r7, #4
1a0094c6:	461e      	mov	r6, r3
1a0094c8:	4617      	mov	r7, r2
1a0094ca:	5c43      	ldrb	r3, [r0, r1]
1a0094cc:	f808 3d01 	strb.w	r3, [r8, #-1]!
1a0094d0:	ea56 0307 	orrs.w	r3, r6, r7
1a0094d4:	d1f1      	bne.n	1a0094ba <_vfiprintf_r+0x52a>
1a0094d6:	ebab 0308 	sub.w	r3, fp, r8
1a0094da:	9305      	str	r3, [sp, #20]
1a0094dc:	e682      	b.n	1a0091e4 <_vfiprintf_r+0x254>
1a0094de:	f899 2000 	ldrb.w	r2, [r9]
1a0094e2:	2d00      	cmp	r5, #0
1a0094e4:	f47f adbb 	bne.w	1a00905e <_vfiprintf_r+0xce>
1a0094e8:	2001      	movs	r0, #1
1a0094ea:	2520      	movs	r5, #32
1a0094ec:	e5b7      	b.n	1a00905e <_vfiprintf_r+0xce>
1a0094ee:	9607      	str	r6, [sp, #28]
1a0094f0:	2800      	cmp	r0, #0
1a0094f2:	f040 8336 	bne.w	1a009b62 <_vfiprintf_r+0xbd2>
1a0094f6:	f043 0310 	orr.w	r3, r3, #16
1a0094fa:	e7b3      	b.n	1a009464 <_vfiprintf_r+0x4d4>
1a0094fc:	9607      	str	r6, [sp, #28]
1a0094fe:	f043 0310 	orr.w	r3, r3, #16
1a009502:	e63d      	b.n	1a009180 <_vfiprintf_r+0x1f0>
1a009504:	9607      	str	r6, [sp, #28]
1a009506:	f043 0310 	orr.w	r3, r3, #16
1a00950a:	e76f      	b.n	1a0093ec <_vfiprintf_r+0x45c>
1a00950c:	1a00a458 	.word	0x1a00a458
1a009510:	1a00a468 	.word	0x1a00a468
1a009514:	9607      	str	r6, [sp, #28]
1a009516:	2800      	cmp	r0, #0
1a009518:	f040 832c 	bne.w	1a009b74 <_vfiprintf_r+0xbe4>
1a00951c:	49b0      	ldr	r1, [pc, #704]	; (1a0097e0 <_vfiprintf_r+0x850>)
1a00951e:	910b      	str	r1, [sp, #44]	; 0x2c
1a009520:	069f      	lsls	r7, r3, #26
1a009522:	f100 8297 	bmi.w	1a009a54 <_vfiprintf_r+0xac4>
1a009526:	9808      	ldr	r0, [sp, #32]
1a009528:	06de      	lsls	r6, r3, #27
1a00952a:	4601      	mov	r1, r0
1a00952c:	f100 8228 	bmi.w	1a009980 <_vfiprintf_r+0x9f0>
1a009530:	065d      	lsls	r5, r3, #25
1a009532:	f140 8225 	bpl.w	1a009980 <_vfiprintf_r+0x9f0>
1a009536:	3104      	adds	r1, #4
1a009538:	8806      	ldrh	r6, [r0, #0]
1a00953a:	9108      	str	r1, [sp, #32]
1a00953c:	2700      	movs	r7, #0
1a00953e:	07d8      	lsls	r0, r3, #31
1a009540:	f140 81d9 	bpl.w	1a0098f6 <_vfiprintf_r+0x966>
1a009544:	ea56 0107 	orrs.w	r1, r6, r7
1a009548:	f000 81d5 	beq.w	1a0098f6 <_vfiprintf_r+0x966>
1a00954c:	2130      	movs	r1, #48	; 0x30
1a00954e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
1a009552:	f043 0302 	orr.w	r3, r3, #2
1a009556:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
1a00955a:	2202      	movs	r2, #2
1a00955c:	e623      	b.n	1a0091a6 <_vfiprintf_r+0x216>
1a00955e:	f899 2000 	ldrb.w	r2, [r9]
1a009562:	2a2a      	cmp	r2, #42	; 0x2a
1a009564:	f109 0701 	add.w	r7, r9, #1
1a009568:	f000 82f0 	beq.w	1a009b4c <_vfiprintf_r+0xbbc>
1a00956c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
1a009570:	2909      	cmp	r1, #9
1a009572:	46b9      	mov	r9, r7
1a009574:	f04f 0400 	mov.w	r4, #0
1a009578:	f63f ad73 	bhi.w	1a009062 <_vfiprintf_r+0xd2>
1a00957c:	f819 2b01 	ldrb.w	r2, [r9], #1
1a009580:	eb04 0484 	add.w	r4, r4, r4, lsl #2
1a009584:	eb01 0444 	add.w	r4, r1, r4, lsl #1
1a009588:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
1a00958c:	2909      	cmp	r1, #9
1a00958e:	d9f5      	bls.n	1a00957c <_vfiprintf_r+0x5ec>
1a009590:	e567      	b.n	1a009062 <_vfiprintf_r+0xd2>
1a009592:	f899 2000 	ldrb.w	r2, [r9]
1a009596:	2a6c      	cmp	r2, #108	; 0x6c
1a009598:	bf03      	ittte	eq
1a00959a:	f899 2001 	ldrbeq.w	r2, [r9, #1]
1a00959e:	f043 0320 	orreq.w	r3, r3, #32
1a0095a2:	f109 0901 	addeq.w	r9, r9, #1
1a0095a6:	f043 0310 	orrne.w	r3, r3, #16
1a0095aa:	e558      	b.n	1a00905e <_vfiprintf_r+0xce>
1a0095ac:	9908      	ldr	r1, [sp, #32]
1a0095ae:	680e      	ldr	r6, [r1, #0]
1a0095b0:	460a      	mov	r2, r1
1a0095b2:	2e00      	cmp	r6, #0
1a0095b4:	f102 0204 	add.w	r2, r2, #4
1a0095b8:	f6ff adda 	blt.w	1a009170 <_vfiprintf_r+0x1e0>
1a0095bc:	9208      	str	r2, [sp, #32]
1a0095be:	f899 2000 	ldrb.w	r2, [r9]
1a0095c2:	e54c      	b.n	1a00905e <_vfiprintf_r+0xce>
1a0095c4:	9607      	str	r6, [sp, #28]
1a0095c6:	2800      	cmp	r0, #0
1a0095c8:	f040 82da 	bne.w	1a009b80 <_vfiprintf_r+0xbf0>
1a0095cc:	4985      	ldr	r1, [pc, #532]	; (1a0097e4 <_vfiprintf_r+0x854>)
1a0095ce:	910b      	str	r1, [sp, #44]	; 0x2c
1a0095d0:	e7a6      	b.n	1a009520 <_vfiprintf_r+0x590>
1a0095d2:	9808      	ldr	r0, [sp, #32]
1a0095d4:	4a83      	ldr	r2, [pc, #524]	; (1a0097e4 <_vfiprintf_r+0x854>)
1a0095d6:	9607      	str	r6, [sp, #28]
1a0095d8:	920b      	str	r2, [sp, #44]	; 0x2c
1a0095da:	6806      	ldr	r6, [r0, #0]
1a0095dc:	2278      	movs	r2, #120	; 0x78
1a0095de:	2130      	movs	r1, #48	; 0x30
1a0095e0:	3004      	adds	r0, #4
1a0095e2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
1a0095e6:	f043 0302 	orr.w	r3, r3, #2
1a0095ea:	9008      	str	r0, [sp, #32]
1a0095ec:	2700      	movs	r7, #0
1a0095ee:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
1a0095f2:	2202      	movs	r2, #2
1a0095f4:	e5d7      	b.n	1a0091a6 <_vfiprintf_r+0x216>
1a0095f6:	f043 0320 	orr.w	r3, r3, #32
1a0095fa:	f899 2000 	ldrb.w	r2, [r9]
1a0095fe:	e52e      	b.n	1a00905e <_vfiprintf_r+0xce>
1a009600:	9908      	ldr	r1, [sp, #32]
1a009602:	9607      	str	r6, [sp, #28]
1a009604:	f8d1 8000 	ldr.w	r8, [r1]
1a009608:	f04f 0200 	mov.w	r2, #0
1a00960c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
1a009610:	1d0e      	adds	r6, r1, #4
1a009612:	f1b8 0f00 	cmp.w	r8, #0
1a009616:	f000 8281 	beq.w	1a009b1c <_vfiprintf_r+0xb8c>
1a00961a:	1c67      	adds	r7, r4, #1
1a00961c:	f000 8260 	beq.w	1a009ae0 <_vfiprintf_r+0xb50>
1a009620:	4622      	mov	r2, r4
1a009622:	2100      	movs	r1, #0
1a009624:	4640      	mov	r0, r8
1a009626:	9302      	str	r3, [sp, #8]
1a009628:	f7fe fc1a 	bl	1a007e60 <memchr>
1a00962c:	9b02      	ldr	r3, [sp, #8]
1a00962e:	2800      	cmp	r0, #0
1a009630:	f000 8284 	beq.w	1a009b3c <_vfiprintf_r+0xbac>
1a009634:	eba0 0208 	sub.w	r2, r0, r8
1a009638:	9205      	str	r2, [sp, #20]
1a00963a:	9608      	str	r6, [sp, #32]
1a00963c:	9303      	str	r3, [sp, #12]
1a00963e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
1a009642:	2400      	movs	r4, #0
1a009644:	e5ce      	b.n	1a0091e4 <_vfiprintf_r+0x254>
1a009646:	f043 0301 	orr.w	r3, r3, #1
1a00964a:	f899 2000 	ldrb.w	r2, [r9]
1a00964e:	e506      	b.n	1a00905e <_vfiprintf_r+0xce>
1a009650:	f899 2000 	ldrb.w	r2, [r9]
1a009654:	2001      	movs	r0, #1
1a009656:	252b      	movs	r5, #43	; 0x2b
1a009658:	e501      	b.n	1a00905e <_vfiprintf_r+0xce>
1a00965a:	2800      	cmp	r0, #0
1a00965c:	f040 8287 	bne.w	1a009b6e <_vfiprintf_r+0xbde>
1a009660:	0699      	lsls	r1, r3, #26
1a009662:	f100 8231 	bmi.w	1a009ac8 <_vfiprintf_r+0xb38>
1a009666:	06da      	lsls	r2, r3, #27
1a009668:	d421      	bmi.n	1a0096ae <_vfiprintf_r+0x71e>
1a00966a:	065b      	lsls	r3, r3, #25
1a00966c:	d51f      	bpl.n	1a0096ae <_vfiprintf_r+0x71e>
1a00966e:	9a08      	ldr	r2, [sp, #32]
1a009670:	6813      	ldr	r3, [r2, #0]
1a009672:	3204      	adds	r2, #4
1a009674:	9208      	str	r2, [sp, #32]
1a009676:	f8bd 2010 	ldrh.w	r2, [sp, #16]
1a00967a:	801a      	strh	r2, [r3, #0]
1a00967c:	e4ba      	b.n	1a008ff4 <_vfiprintf_r+0x64>
1a00967e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a009682:	f899 2000 	ldrb.w	r2, [r9]
1a009686:	e4ea      	b.n	1a00905e <_vfiprintf_r+0xce>
1a009688:	9607      	str	r6, [sp, #28]
1a00968a:	2800      	cmp	r0, #0
1a00968c:	f040 8275 	bne.w	1a009b7a <_vfiprintf_r+0xbea>
1a009690:	2a00      	cmp	r2, #0
1a009692:	f000 8088 	beq.w	1a0097a6 <_vfiprintf_r+0x816>
1a009696:	2101      	movs	r1, #1
1a009698:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
1a00969c:	f04f 0200 	mov.w	r2, #0
1a0096a0:	9102      	str	r1, [sp, #8]
1a0096a2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
1a0096a6:	9105      	str	r1, [sp, #20]
1a0096a8:	f10d 0848 	add.w	r8, sp, #72	; 0x48
1a0096ac:	e6d3      	b.n	1a009456 <_vfiprintf_r+0x4c6>
1a0096ae:	9a08      	ldr	r2, [sp, #32]
1a0096b0:	6813      	ldr	r3, [r2, #0]
1a0096b2:	3204      	adds	r2, #4
1a0096b4:	9208      	str	r2, [sp, #32]
1a0096b6:	9a04      	ldr	r2, [sp, #16]
1a0096b8:	601a      	str	r2, [r3, #0]
1a0096ba:	e49b      	b.n	1a008ff4 <_vfiprintf_r+0x64>
1a0096bc:	aa0f      	add	r2, sp, #60	; 0x3c
1a0096be:	9901      	ldr	r1, [sp, #4]
1a0096c0:	4620      	mov	r0, r4
1a0096c2:	f7ff fc1b 	bl	1a008efc <__sprint_r.part.0>
1a0096c6:	2800      	cmp	r0, #0
1a0096c8:	d174      	bne.n	1a0097b4 <_vfiprintf_r+0x824>
1a0096ca:	9910      	ldr	r1, [sp, #64]	; 0x40
1a0096cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
1a0096ce:	f101 0c01 	add.w	ip, r1, #1
1a0096d2:	46de      	mov	lr, fp
1a0096d4:	e5b3      	b.n	1a00923e <_vfiprintf_r+0x2ae>
1a0096d6:	9910      	ldr	r1, [sp, #64]	; 0x40
1a0096d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
1a0096da:	1c48      	adds	r0, r1, #1
1a0096dc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
1a0096e0:	2d00      	cmp	r5, #0
1a0096e2:	f43f add6 	beq.w	1a009292 <_vfiprintf_r+0x302>
1a0096e6:	3201      	adds	r2, #1
1a0096e8:	f10d 0537 	add.w	r5, sp, #55	; 0x37
1a0096ec:	2101      	movs	r1, #1
1a0096ee:	2807      	cmp	r0, #7
1a0096f0:	9211      	str	r2, [sp, #68]	; 0x44
1a0096f2:	9010      	str	r0, [sp, #64]	; 0x40
1a0096f4:	f8ca 5000 	str.w	r5, [sl]
1a0096f8:	f8ca 1004 	str.w	r1, [sl, #4]
1a0096fc:	f340 80b6 	ble.w	1a00986c <_vfiprintf_r+0x8dc>
1a009700:	2a00      	cmp	r2, #0
1a009702:	f040 8155 	bne.w	1a0099b0 <_vfiprintf_r+0xa20>
1a009706:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a009708:	2b00      	cmp	r3, #0
1a00970a:	f43f add3 	beq.w	1a0092b4 <_vfiprintf_r+0x324>
1a00970e:	ab0e      	add	r3, sp, #56	; 0x38
1a009710:	2202      	movs	r2, #2
1a009712:	4608      	mov	r0, r1
1a009714:	931c      	str	r3, [sp, #112]	; 0x70
1a009716:	921d      	str	r2, [sp, #116]	; 0x74
1a009718:	46da      	mov	sl, fp
1a00971a:	4601      	mov	r1, r0
1a00971c:	f10a 0a08 	add.w	sl, sl, #8
1a009720:	3001      	adds	r0, #1
1a009722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a009724:	2b80      	cmp	r3, #128	; 0x80
1a009726:	f43f adcd 	beq.w	1a0092c4 <_vfiprintf_r+0x334>
1a00972a:	9b05      	ldr	r3, [sp, #20]
1a00972c:	1ae4      	subs	r4, r4, r3
1a00972e:	2c00      	cmp	r4, #0
1a009730:	f77f ae07 	ble.w	1a009342 <_vfiprintf_r+0x3b2>
1a009734:	2c10      	cmp	r4, #16
1a009736:	4d2c      	ldr	r5, [pc, #176]	; (1a0097e8 <_vfiprintf_r+0x858>)
1a009738:	dd1d      	ble.n	1a009776 <_vfiprintf_r+0x7e6>
1a00973a:	46d6      	mov	lr, sl
1a00973c:	2610      	movs	r6, #16
1a00973e:	9f06      	ldr	r7, [sp, #24]
1a009740:	f8dd a004 	ldr.w	sl, [sp, #4]
1a009744:	e006      	b.n	1a009754 <_vfiprintf_r+0x7c4>
1a009746:	1c88      	adds	r0, r1, #2
1a009748:	f10e 0e08 	add.w	lr, lr, #8
1a00974c:	4619      	mov	r1, r3
1a00974e:	3c10      	subs	r4, #16
1a009750:	2c10      	cmp	r4, #16
1a009752:	dd0f      	ble.n	1a009774 <_vfiprintf_r+0x7e4>
1a009754:	1c4b      	adds	r3, r1, #1
1a009756:	3210      	adds	r2, #16
1a009758:	2b07      	cmp	r3, #7
1a00975a:	9211      	str	r2, [sp, #68]	; 0x44
1a00975c:	e88e 0060 	stmia.w	lr, {r5, r6}
1a009760:	9310      	str	r3, [sp, #64]	; 0x40
1a009762:	ddf0      	ble.n	1a009746 <_vfiprintf_r+0x7b6>
1a009764:	b9a2      	cbnz	r2, 1a009790 <_vfiprintf_r+0x800>
1a009766:	3c10      	subs	r4, #16
1a009768:	2c10      	cmp	r4, #16
1a00976a:	f04f 0001 	mov.w	r0, #1
1a00976e:	4611      	mov	r1, r2
1a009770:	46de      	mov	lr, fp
1a009772:	dcef      	bgt.n	1a009754 <_vfiprintf_r+0x7c4>
1a009774:	46f2      	mov	sl, lr
1a009776:	4422      	add	r2, r4
1a009778:	2807      	cmp	r0, #7
1a00977a:	9211      	str	r2, [sp, #68]	; 0x44
1a00977c:	f8ca 5000 	str.w	r5, [sl]
1a009780:	f8ca 4004 	str.w	r4, [sl, #4]
1a009784:	9010      	str	r0, [sp, #64]	; 0x40
1a009786:	dc31      	bgt.n	1a0097ec <_vfiprintf_r+0x85c>
1a009788:	f10a 0a08 	add.w	sl, sl, #8
1a00978c:	3001      	adds	r0, #1
1a00978e:	e5d8      	b.n	1a009342 <_vfiprintf_r+0x3b2>
1a009790:	aa0f      	add	r2, sp, #60	; 0x3c
1a009792:	4651      	mov	r1, sl
1a009794:	4638      	mov	r0, r7
1a009796:	f7ff fbb1 	bl	1a008efc <__sprint_r.part.0>
1a00979a:	b958      	cbnz	r0, 1a0097b4 <_vfiprintf_r+0x824>
1a00979c:	9910      	ldr	r1, [sp, #64]	; 0x40
1a00979e:	9a11      	ldr	r2, [sp, #68]	; 0x44
1a0097a0:	1c48      	adds	r0, r1, #1
1a0097a2:	46de      	mov	lr, fp
1a0097a4:	e7d3      	b.n	1a00974e <_vfiprintf_r+0x7be>
1a0097a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a0097a8:	b123      	cbz	r3, 1a0097b4 <_vfiprintf_r+0x824>
1a0097aa:	9806      	ldr	r0, [sp, #24]
1a0097ac:	9901      	ldr	r1, [sp, #4]
1a0097ae:	aa0f      	add	r2, sp, #60	; 0x3c
1a0097b0:	f7ff fba4 	bl	1a008efc <__sprint_r.part.0>
1a0097b4:	9b01      	ldr	r3, [sp, #4]
1a0097b6:	899b      	ldrh	r3, [r3, #12]
1a0097b8:	065b      	lsls	r3, r3, #25
1a0097ba:	f57f acd2 	bpl.w	1a009162 <_vfiprintf_r+0x1d2>
1a0097be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0097c2:	9304      	str	r3, [sp, #16]
1a0097c4:	e4cd      	b.n	1a009162 <_vfiprintf_r+0x1d2>
1a0097c6:	aa0f      	add	r2, sp, #60	; 0x3c
1a0097c8:	4641      	mov	r1, r8
1a0097ca:	4638      	mov	r0, r7
1a0097cc:	f7ff fb96 	bl	1a008efc <__sprint_r.part.0>
1a0097d0:	2800      	cmp	r0, #0
1a0097d2:	d1ef      	bne.n	1a0097b4 <_vfiprintf_r+0x824>
1a0097d4:	9910      	ldr	r1, [sp, #64]	; 0x40
1a0097d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
1a0097d8:	1c48      	adds	r0, r1, #1
1a0097da:	46da      	mov	sl, fp
1a0097dc:	e5d8      	b.n	1a009390 <_vfiprintf_r+0x400>
1a0097de:	bf00      	nop
1a0097e0:	1a00a2e0 	.word	0x1a00a2e0
1a0097e4:	1a00a2f4 	.word	0x1a00a2f4
1a0097e8:	1a00a468 	.word	0x1a00a468
1a0097ec:	2a00      	cmp	r2, #0
1a0097ee:	f040 8100 	bne.w	1a0099f2 <_vfiprintf_r+0xa62>
1a0097f2:	9a05      	ldr	r2, [sp, #20]
1a0097f4:	921d      	str	r2, [sp, #116]	; 0x74
1a0097f6:	2301      	movs	r3, #1
1a0097f8:	9211      	str	r2, [sp, #68]	; 0x44
1a0097fa:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
1a0097fe:	9310      	str	r3, [sp, #64]	; 0x40
1a009800:	46da      	mov	sl, fp
1a009802:	f10a 0a08 	add.w	sl, sl, #8
1a009806:	9b03      	ldr	r3, [sp, #12]
1a009808:	0759      	lsls	r1, r3, #29
1a00980a:	d505      	bpl.n	1a009818 <_vfiprintf_r+0x888>
1a00980c:	9b07      	ldr	r3, [sp, #28]
1a00980e:	9902      	ldr	r1, [sp, #8]
1a009810:	1a5c      	subs	r4, r3, r1
1a009812:	2c00      	cmp	r4, #0
1a009814:	f73f adae 	bgt.w	1a009374 <_vfiprintf_r+0x3e4>
1a009818:	9b04      	ldr	r3, [sp, #16]
1a00981a:	9907      	ldr	r1, [sp, #28]
1a00981c:	9802      	ldr	r0, [sp, #8]
1a00981e:	4281      	cmp	r1, r0
1a009820:	bfac      	ite	ge
1a009822:	185b      	addge	r3, r3, r1
1a009824:	181b      	addlt	r3, r3, r0
1a009826:	9304      	str	r3, [sp, #16]
1a009828:	bb7a      	cbnz	r2, 1a00988a <_vfiprintf_r+0x8fa>
1a00982a:	2300      	movs	r3, #0
1a00982c:	9310      	str	r3, [sp, #64]	; 0x40
1a00982e:	46da      	mov	sl, fp
1a009830:	f7ff bbe0 	b.w	1a008ff4 <_vfiprintf_r+0x64>
1a009834:	aa0f      	add	r2, sp, #60	; 0x3c
1a009836:	9901      	ldr	r1, [sp, #4]
1a009838:	4620      	mov	r0, r4
1a00983a:	f7ff fb5f 	bl	1a008efc <__sprint_r.part.0>
1a00983e:	2800      	cmp	r0, #0
1a009840:	d1b8      	bne.n	1a0097b4 <_vfiprintf_r+0x824>
1a009842:	9910      	ldr	r1, [sp, #64]	; 0x40
1a009844:	9a11      	ldr	r2, [sp, #68]	; 0x44
1a009846:	f101 0e01 	add.w	lr, r1, #1
1a00984a:	46dc      	mov	ip, fp
1a00984c:	e54e      	b.n	1a0092ec <_vfiprintf_r+0x35c>
1a00984e:	2a00      	cmp	r2, #0
1a009850:	f040 811c 	bne.w	1a009a8c <_vfiprintf_r+0xafc>
1a009854:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
1a009858:	2900      	cmp	r1, #0
1a00985a:	f000 8111 	beq.w	1a009a80 <_vfiprintf_r+0xaf0>
1a00985e:	2201      	movs	r2, #1
1a009860:	f10d 0137 	add.w	r1, sp, #55	; 0x37
1a009864:	4610      	mov	r0, r2
1a009866:	921d      	str	r2, [sp, #116]	; 0x74
1a009868:	911c      	str	r1, [sp, #112]	; 0x70
1a00986a:	46da      	mov	sl, fp
1a00986c:	4601      	mov	r1, r0
1a00986e:	f10a 0a08 	add.w	sl, sl, #8
1a009872:	3001      	adds	r0, #1
1a009874:	e50d      	b.n	1a009292 <_vfiprintf_r+0x302>
1a009876:	9b03      	ldr	r3, [sp, #12]
1a009878:	2a01      	cmp	r2, #1
1a00987a:	f000 8090 	beq.w	1a00999e <_vfiprintf_r+0xa0e>
1a00987e:	2a02      	cmp	r2, #2
1a009880:	d10b      	bne.n	1a00989a <_vfiprintf_r+0x90a>
1a009882:	9303      	str	r3, [sp, #12]
1a009884:	2600      	movs	r6, #0
1a009886:	2700      	movs	r7, #0
1a009888:	e615      	b.n	1a0094b6 <_vfiprintf_r+0x526>
1a00988a:	aa0f      	add	r2, sp, #60	; 0x3c
1a00988c:	9901      	ldr	r1, [sp, #4]
1a00988e:	9806      	ldr	r0, [sp, #24]
1a009890:	f7ff fb34 	bl	1a008efc <__sprint_r.part.0>
1a009894:	2800      	cmp	r0, #0
1a009896:	d0c8      	beq.n	1a00982a <_vfiprintf_r+0x89a>
1a009898:	e78c      	b.n	1a0097b4 <_vfiprintf_r+0x824>
1a00989a:	9303      	str	r3, [sp, #12]
1a00989c:	2600      	movs	r6, #0
1a00989e:	2700      	movs	r7, #0
1a0098a0:	4659      	mov	r1, fp
1a0098a2:	e000      	b.n	1a0098a6 <_vfiprintf_r+0x916>
1a0098a4:	4641      	mov	r1, r8
1a0098a6:	08f2      	lsrs	r2, r6, #3
1a0098a8:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
1a0098ac:	08f8      	lsrs	r0, r7, #3
1a0098ae:	f006 0307 	and.w	r3, r6, #7
1a0098b2:	4607      	mov	r7, r0
1a0098b4:	4616      	mov	r6, r2
1a0098b6:	3330      	adds	r3, #48	; 0x30
1a0098b8:	ea56 0207 	orrs.w	r2, r6, r7
1a0098bc:	f801 3c01 	strb.w	r3, [r1, #-1]
1a0098c0:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
1a0098c4:	d1ee      	bne.n	1a0098a4 <_vfiprintf_r+0x914>
1a0098c6:	9a03      	ldr	r2, [sp, #12]
1a0098c8:	07d6      	lsls	r6, r2, #31
1a0098ca:	f57f ae04 	bpl.w	1a0094d6 <_vfiprintf_r+0x546>
1a0098ce:	2b30      	cmp	r3, #48	; 0x30
1a0098d0:	f43f ae01 	beq.w	1a0094d6 <_vfiprintf_r+0x546>
1a0098d4:	3902      	subs	r1, #2
1a0098d6:	2330      	movs	r3, #48	; 0x30
1a0098d8:	f808 3c01 	strb.w	r3, [r8, #-1]
1a0098dc:	ebab 0301 	sub.w	r3, fp, r1
1a0098e0:	9305      	str	r3, [sp, #20]
1a0098e2:	4688      	mov	r8, r1
1a0098e4:	e47e      	b.n	1a0091e4 <_vfiprintf_r+0x254>
1a0098e6:	9b04      	ldr	r3, [sp, #16]
1a0098e8:	9a07      	ldr	r2, [sp, #28]
1a0098ea:	428a      	cmp	r2, r1
1a0098ec:	bfac      	ite	ge
1a0098ee:	189b      	addge	r3, r3, r2
1a0098f0:	185b      	addlt	r3, r3, r1
1a0098f2:	9304      	str	r3, [sp, #16]
1a0098f4:	e799      	b.n	1a00982a <_vfiprintf_r+0x89a>
1a0098f6:	2202      	movs	r2, #2
1a0098f8:	e455      	b.n	1a0091a6 <_vfiprintf_r+0x216>
1a0098fa:	2f00      	cmp	r7, #0
1a0098fc:	bf08      	it	eq
1a0098fe:	2e0a      	cmpeq	r6, #10
1a009900:	d34c      	bcc.n	1a00999c <_vfiprintf_r+0xa0c>
1a009902:	46d8      	mov	r8, fp
1a009904:	4630      	mov	r0, r6
1a009906:	4639      	mov	r1, r7
1a009908:	220a      	movs	r2, #10
1a00990a:	2300      	movs	r3, #0
1a00990c:	f7fa fba2 	bl	1a004054 <__aeabi_uldivmod>
1a009910:	3230      	adds	r2, #48	; 0x30
1a009912:	f808 2d01 	strb.w	r2, [r8, #-1]!
1a009916:	4630      	mov	r0, r6
1a009918:	4639      	mov	r1, r7
1a00991a:	2300      	movs	r3, #0
1a00991c:	220a      	movs	r2, #10
1a00991e:	f7fa fb99 	bl	1a004054 <__aeabi_uldivmod>
1a009922:	4606      	mov	r6, r0
1a009924:	460f      	mov	r7, r1
1a009926:	ea56 0307 	orrs.w	r3, r6, r7
1a00992a:	d1eb      	bne.n	1a009904 <_vfiprintf_r+0x974>
1a00992c:	ebab 0308 	sub.w	r3, fp, r8
1a009930:	9305      	str	r3, [sp, #20]
1a009932:	e457      	b.n	1a0091e4 <_vfiprintf_r+0x254>
1a009934:	9405      	str	r4, [sp, #20]
1a009936:	46d8      	mov	r8, fp
1a009938:	e454      	b.n	1a0091e4 <_vfiprintf_r+0x254>
1a00993a:	aa0f      	add	r2, sp, #60	; 0x3c
1a00993c:	9901      	ldr	r1, [sp, #4]
1a00993e:	9806      	ldr	r0, [sp, #24]
1a009940:	f7ff fadc 	bl	1a008efc <__sprint_r.part.0>
1a009944:	2800      	cmp	r0, #0
1a009946:	f47f af35 	bne.w	1a0097b4 <_vfiprintf_r+0x824>
1a00994a:	9a11      	ldr	r2, [sp, #68]	; 0x44
1a00994c:	46da      	mov	sl, fp
1a00994e:	e75a      	b.n	1a009806 <_vfiprintf_r+0x876>
1a009950:	aa0f      	add	r2, sp, #60	; 0x3c
1a009952:	9901      	ldr	r1, [sp, #4]
1a009954:	9806      	ldr	r0, [sp, #24]
1a009956:	f7ff fad1 	bl	1a008efc <__sprint_r.part.0>
1a00995a:	2800      	cmp	r0, #0
1a00995c:	f47f af2a 	bne.w	1a0097b4 <_vfiprintf_r+0x824>
1a009960:	46da      	mov	sl, fp
1a009962:	f7ff bbe0 	b.w	1a009126 <_vfiprintf_r+0x196>
1a009966:	3104      	adds	r1, #4
1a009968:	6816      	ldr	r6, [r2, #0]
1a00996a:	9108      	str	r1, [sp, #32]
1a00996c:	2201      	movs	r2, #1
1a00996e:	2700      	movs	r7, #0
1a009970:	e419      	b.n	1a0091a6 <_vfiprintf_r+0x216>
1a009972:	9808      	ldr	r0, [sp, #32]
1a009974:	4601      	mov	r1, r0
1a009976:	3104      	adds	r1, #4
1a009978:	6806      	ldr	r6, [r0, #0]
1a00997a:	9108      	str	r1, [sp, #32]
1a00997c:	2700      	movs	r7, #0
1a00997e:	e412      	b.n	1a0091a6 <_vfiprintf_r+0x216>
1a009980:	680e      	ldr	r6, [r1, #0]
1a009982:	3104      	adds	r1, #4
1a009984:	9108      	str	r1, [sp, #32]
1a009986:	2700      	movs	r7, #0
1a009988:	e5d9      	b.n	1a00953e <_vfiprintf_r+0x5ae>
1a00998a:	9908      	ldr	r1, [sp, #32]
1a00998c:	680e      	ldr	r6, [r1, #0]
1a00998e:	460a      	mov	r2, r1
1a009990:	17f7      	asrs	r7, r6, #31
1a009992:	3204      	adds	r2, #4
1a009994:	9208      	str	r2, [sp, #32]
1a009996:	4630      	mov	r0, r6
1a009998:	4639      	mov	r1, r7
1a00999a:	e575      	b.n	1a009488 <_vfiprintf_r+0x4f8>
1a00999c:	9b03      	ldr	r3, [sp, #12]
1a00999e:	9303      	str	r3, [sp, #12]
1a0099a0:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
1a0099a4:	3630      	adds	r6, #48	; 0x30
1a0099a6:	2301      	movs	r3, #1
1a0099a8:	f808 6d41 	strb.w	r6, [r8, #-65]!
1a0099ac:	9305      	str	r3, [sp, #20]
1a0099ae:	e419      	b.n	1a0091e4 <_vfiprintf_r+0x254>
1a0099b0:	aa0f      	add	r2, sp, #60	; 0x3c
1a0099b2:	9901      	ldr	r1, [sp, #4]
1a0099b4:	9806      	ldr	r0, [sp, #24]
1a0099b6:	f7ff faa1 	bl	1a008efc <__sprint_r.part.0>
1a0099ba:	2800      	cmp	r0, #0
1a0099bc:	f47f aefa 	bne.w	1a0097b4 <_vfiprintf_r+0x824>
1a0099c0:	9910      	ldr	r1, [sp, #64]	; 0x40
1a0099c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
1a0099c4:	1c48      	adds	r0, r1, #1
1a0099c6:	46da      	mov	sl, fp
1a0099c8:	e463      	b.n	1a009292 <_vfiprintf_r+0x302>
1a0099ca:	aa0f      	add	r2, sp, #60	; 0x3c
1a0099cc:	9901      	ldr	r1, [sp, #4]
1a0099ce:	9806      	ldr	r0, [sp, #24]
1a0099d0:	f7ff fa94 	bl	1a008efc <__sprint_r.part.0>
1a0099d4:	2800      	cmp	r0, #0
1a0099d6:	f47f aeed 	bne.w	1a0097b4 <_vfiprintf_r+0x824>
1a0099da:	9910      	ldr	r1, [sp, #64]	; 0x40
1a0099dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
1a0099de:	1c48      	adds	r0, r1, #1
1a0099e0:	46da      	mov	sl, fp
1a0099e2:	e69e      	b.n	1a009722 <_vfiprintf_r+0x792>
1a0099e4:	2a00      	cmp	r2, #0
1a0099e6:	f040 8086 	bne.w	1a009af6 <_vfiprintf_r+0xb66>
1a0099ea:	2001      	movs	r0, #1
1a0099ec:	4611      	mov	r1, r2
1a0099ee:	46da      	mov	sl, fp
1a0099f0:	e69b      	b.n	1a00972a <_vfiprintf_r+0x79a>
1a0099f2:	aa0f      	add	r2, sp, #60	; 0x3c
1a0099f4:	9901      	ldr	r1, [sp, #4]
1a0099f6:	9806      	ldr	r0, [sp, #24]
1a0099f8:	f7ff fa80 	bl	1a008efc <__sprint_r.part.0>
1a0099fc:	2800      	cmp	r0, #0
1a0099fe:	f47f aed9 	bne.w	1a0097b4 <_vfiprintf_r+0x824>
1a009a02:	9810      	ldr	r0, [sp, #64]	; 0x40
1a009a04:	9a11      	ldr	r2, [sp, #68]	; 0x44
1a009a06:	3001      	adds	r0, #1
1a009a08:	46da      	mov	sl, fp
1a009a0a:	e49a      	b.n	1a009342 <_vfiprintf_r+0x3b2>
1a009a0c:	9e08      	ldr	r6, [sp, #32]
1a009a0e:	3607      	adds	r6, #7
1a009a10:	f026 0607 	bic.w	r6, r6, #7
1a009a14:	e9d6 0100 	ldrd	r0, r1, [r6]
1a009a18:	f106 0208 	add.w	r2, r6, #8
1a009a1c:	9208      	str	r2, [sp, #32]
1a009a1e:	4606      	mov	r6, r0
1a009a20:	460f      	mov	r7, r1
1a009a22:	e531      	b.n	1a009488 <_vfiprintf_r+0x4f8>
1a009a24:	9e08      	ldr	r6, [sp, #32]
1a009a26:	3607      	adds	r6, #7
1a009a28:	f026 0207 	bic.w	r2, r6, #7
1a009a2c:	f102 0108 	add.w	r1, r2, #8
1a009a30:	e9d2 6700 	ldrd	r6, r7, [r2]
1a009a34:	9108      	str	r1, [sp, #32]
1a009a36:	2201      	movs	r2, #1
1a009a38:	f7ff bbb5 	b.w	1a0091a6 <_vfiprintf_r+0x216>
1a009a3c:	9e08      	ldr	r6, [sp, #32]
1a009a3e:	3607      	adds	r6, #7
1a009a40:	f026 0207 	bic.w	r2, r6, #7
1a009a44:	f102 0108 	add.w	r1, r2, #8
1a009a48:	e9d2 6700 	ldrd	r6, r7, [r2]
1a009a4c:	9108      	str	r1, [sp, #32]
1a009a4e:	2200      	movs	r2, #0
1a009a50:	f7ff bba9 	b.w	1a0091a6 <_vfiprintf_r+0x216>
1a009a54:	9e08      	ldr	r6, [sp, #32]
1a009a56:	3607      	adds	r6, #7
1a009a58:	f026 0107 	bic.w	r1, r6, #7
1a009a5c:	f101 0008 	add.w	r0, r1, #8
1a009a60:	9008      	str	r0, [sp, #32]
1a009a62:	e9d1 6700 	ldrd	r6, r7, [r1]
1a009a66:	e56a      	b.n	1a00953e <_vfiprintf_r+0x5ae>
1a009a68:	46d8      	mov	r8, fp
1a009a6a:	f7ff bbbb 	b.w	1a0091e4 <_vfiprintf_r+0x254>
1a009a6e:	252d      	movs	r5, #45	; 0x2d
1a009a70:	4276      	negs	r6, r6
1a009a72:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
1a009a76:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
1a009a7a:	2201      	movs	r2, #1
1a009a7c:	f7ff bb98 	b.w	1a0091b0 <_vfiprintf_r+0x220>
1a009a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a009a82:	b9d3      	cbnz	r3, 1a009aba <_vfiprintf_r+0xb2a>
1a009a84:	4611      	mov	r1, r2
1a009a86:	2001      	movs	r0, #1
1a009a88:	46da      	mov	sl, fp
1a009a8a:	e64e      	b.n	1a00972a <_vfiprintf_r+0x79a>
1a009a8c:	aa0f      	add	r2, sp, #60	; 0x3c
1a009a8e:	9901      	ldr	r1, [sp, #4]
1a009a90:	9806      	ldr	r0, [sp, #24]
1a009a92:	f7ff fa33 	bl	1a008efc <__sprint_r.part.0>
1a009a96:	2800      	cmp	r0, #0
1a009a98:	f47f ae8c 	bne.w	1a0097b4 <_vfiprintf_r+0x824>
1a009a9c:	9910      	ldr	r1, [sp, #64]	; 0x40
1a009a9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
1a009aa0:	1c48      	adds	r0, r1, #1
1a009aa2:	46da      	mov	sl, fp
1a009aa4:	e61a      	b.n	1a0096dc <_vfiprintf_r+0x74c>
1a009aa6:	aa0f      	add	r2, sp, #60	; 0x3c
1a009aa8:	9901      	ldr	r1, [sp, #4]
1a009aaa:	9806      	ldr	r0, [sp, #24]
1a009aac:	f7ff fa26 	bl	1a008efc <__sprint_r.part.0>
1a009ab0:	2800      	cmp	r0, #0
1a009ab2:	f47f ae7f 	bne.w	1a0097b4 <_vfiprintf_r+0x824>
1a009ab6:	9a11      	ldr	r2, [sp, #68]	; 0x44
1a009ab8:	e6ae      	b.n	1a009818 <_vfiprintf_r+0x888>
1a009aba:	ab0e      	add	r3, sp, #56	; 0x38
1a009abc:	2202      	movs	r2, #2
1a009abe:	931c      	str	r3, [sp, #112]	; 0x70
1a009ac0:	921d      	str	r2, [sp, #116]	; 0x74
1a009ac2:	2001      	movs	r0, #1
1a009ac4:	46da      	mov	sl, fp
1a009ac6:	e628      	b.n	1a00971a <_vfiprintf_r+0x78a>
1a009ac8:	9a08      	ldr	r2, [sp, #32]
1a009aca:	9904      	ldr	r1, [sp, #16]
1a009acc:	6813      	ldr	r3, [r2, #0]
1a009ace:	17cd      	asrs	r5, r1, #31
1a009ad0:	4608      	mov	r0, r1
1a009ad2:	3204      	adds	r2, #4
1a009ad4:	4629      	mov	r1, r5
1a009ad6:	9208      	str	r2, [sp, #32]
1a009ad8:	e9c3 0100 	strd	r0, r1, [r3]
1a009adc:	f7ff ba8a 	b.w	1a008ff4 <_vfiprintf_r+0x64>
1a009ae0:	4640      	mov	r0, r8
1a009ae2:	9608      	str	r6, [sp, #32]
1a009ae4:	9303      	str	r3, [sp, #12]
1a009ae6:	f7fb fc4b 	bl	1a005380 <strlen>
1a009aea:	2400      	movs	r4, #0
1a009aec:	9005      	str	r0, [sp, #20]
1a009aee:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
1a009af2:	f7ff bb77 	b.w	1a0091e4 <_vfiprintf_r+0x254>
1a009af6:	aa0f      	add	r2, sp, #60	; 0x3c
1a009af8:	9901      	ldr	r1, [sp, #4]
1a009afa:	9806      	ldr	r0, [sp, #24]
1a009afc:	f7ff f9fe 	bl	1a008efc <__sprint_r.part.0>
1a009b00:	2800      	cmp	r0, #0
1a009b02:	f47f ae57 	bne.w	1a0097b4 <_vfiprintf_r+0x824>
1a009b06:	9910      	ldr	r1, [sp, #64]	; 0x40
1a009b08:	9a11      	ldr	r2, [sp, #68]	; 0x44
1a009b0a:	1c48      	adds	r0, r1, #1
1a009b0c:	46da      	mov	sl, fp
1a009b0e:	e60c      	b.n	1a00972a <_vfiprintf_r+0x79a>
1a009b10:	9910      	ldr	r1, [sp, #64]	; 0x40
1a009b12:	9a11      	ldr	r2, [sp, #68]	; 0x44
1a009b14:	4e1c      	ldr	r6, [pc, #112]	; (1a009b88 <_vfiprintf_r+0xbf8>)
1a009b16:	3101      	adds	r1, #1
1a009b18:	f7ff bba9 	b.w	1a00926e <_vfiprintf_r+0x2de>
1a009b1c:	2c06      	cmp	r4, #6
1a009b1e:	bf28      	it	cs
1a009b20:	2406      	movcs	r4, #6
1a009b22:	9405      	str	r4, [sp, #20]
1a009b24:	9608      	str	r6, [sp, #32]
1a009b26:	9402      	str	r4, [sp, #8]
1a009b28:	f8df 8060 	ldr.w	r8, [pc, #96]	; 1a009b8c <_vfiprintf_r+0xbfc>
1a009b2c:	e493      	b.n	1a009456 <_vfiprintf_r+0x4c6>
1a009b2e:	9810      	ldr	r0, [sp, #64]	; 0x40
1a009b30:	4e15      	ldr	r6, [pc, #84]	; (1a009b88 <_vfiprintf_r+0xbf8>)
1a009b32:	3001      	adds	r0, #1
1a009b34:	e443      	b.n	1a0093be <_vfiprintf_r+0x42e>
1a009b36:	4686      	mov	lr, r0
1a009b38:	f7ff bbef 	b.w	1a00931a <_vfiprintf_r+0x38a>
1a009b3c:	9405      	str	r4, [sp, #20]
1a009b3e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
1a009b42:	9608      	str	r6, [sp, #32]
1a009b44:	9303      	str	r3, [sp, #12]
1a009b46:	4604      	mov	r4, r0
1a009b48:	f7ff bb4c 	b.w	1a0091e4 <_vfiprintf_r+0x254>
1a009b4c:	9908      	ldr	r1, [sp, #32]
1a009b4e:	f899 2001 	ldrb.w	r2, [r9, #1]
1a009b52:	680c      	ldr	r4, [r1, #0]
1a009b54:	3104      	adds	r1, #4
1a009b56:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
1a009b5a:	46b9      	mov	r9, r7
1a009b5c:	9108      	str	r1, [sp, #32]
1a009b5e:	f7ff ba7e 	b.w	1a00905e <_vfiprintf_r+0xce>
1a009b62:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
1a009b66:	e4c6      	b.n	1a0094f6 <_vfiprintf_r+0x566>
1a009b68:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
1a009b6c:	e47a      	b.n	1a009464 <_vfiprintf_r+0x4d4>
1a009b6e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
1a009b72:	e575      	b.n	1a009660 <_vfiprintf_r+0x6d0>
1a009b74:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
1a009b78:	e4d0      	b.n	1a00951c <_vfiprintf_r+0x58c>
1a009b7a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
1a009b7e:	e587      	b.n	1a009690 <_vfiprintf_r+0x700>
1a009b80:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
1a009b84:	e522      	b.n	1a0095cc <_vfiprintf_r+0x63c>
1a009b86:	bf00      	nop
1a009b88:	1a00a458 	.word	0x1a00a458
1a009b8c:	1a00a308 	.word	0x1a00a308

1a009b90 <vfiprintf>:
1a009b90:	b410      	push	{r4}
1a009b92:	4c04      	ldr	r4, [pc, #16]	; (1a009ba4 <vfiprintf+0x14>)
1a009b94:	4613      	mov	r3, r2
1a009b96:	460a      	mov	r2, r1
1a009b98:	4601      	mov	r1, r0
1a009b9a:	6820      	ldr	r0, [r4, #0]
1a009b9c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a009ba0:	f7ff b9f6 	b.w	1a008f90 <_vfiprintf_r>
1a009ba4:	10000040 	.word	0x10000040

1a009ba8 <__sbprintf>:
1a009ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a009baa:	460c      	mov	r4, r1
1a009bac:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
1a009bb0:	8989      	ldrh	r1, [r1, #12]
1a009bb2:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a009bb4:	89e5      	ldrh	r5, [r4, #14]
1a009bb6:	9619      	str	r6, [sp, #100]	; 0x64
1a009bb8:	f021 0102 	bic.w	r1, r1, #2
1a009bbc:	6a66      	ldr	r6, [r4, #36]	; 0x24
1a009bbe:	f8ad 500e 	strh.w	r5, [sp, #14]
1a009bc2:	2500      	movs	r5, #0
1a009bc4:	69e7      	ldr	r7, [r4, #28]
1a009bc6:	f8ad 100c 	strh.w	r1, [sp, #12]
1a009bca:	9609      	str	r6, [sp, #36]	; 0x24
1a009bcc:	9506      	str	r5, [sp, #24]
1a009bce:	ae1a      	add	r6, sp, #104	; 0x68
1a009bd0:	f44f 6580 	mov.w	r5, #1024	; 0x400
1a009bd4:	4669      	mov	r1, sp
1a009bd6:	9600      	str	r6, [sp, #0]
1a009bd8:	9604      	str	r6, [sp, #16]
1a009bda:	9502      	str	r5, [sp, #8]
1a009bdc:	9505      	str	r5, [sp, #20]
1a009bde:	9707      	str	r7, [sp, #28]
1a009be0:	4606      	mov	r6, r0
1a009be2:	f7ff f9d5 	bl	1a008f90 <_vfiprintf_r>
1a009be6:	1e05      	subs	r5, r0, #0
1a009be8:	db07      	blt.n	1a009bfa <__sbprintf+0x52>
1a009bea:	4630      	mov	r0, r6
1a009bec:	4669      	mov	r1, sp
1a009bee:	f7fa fca1 	bl	1a004534 <_fflush_r>
1a009bf2:	2800      	cmp	r0, #0
1a009bf4:	bf18      	it	ne
1a009bf6:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
1a009bfa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
1a009bfe:	065b      	lsls	r3, r3, #25
1a009c00:	d503      	bpl.n	1a009c0a <__sbprintf+0x62>
1a009c02:	89a3      	ldrh	r3, [r4, #12]
1a009c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a009c08:	81a3      	strh	r3, [r4, #12]
1a009c0a:	4628      	mov	r0, r5
1a009c0c:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
1a009c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a009c12:	bf00      	nop

1a009c14 <_calloc_r>:
1a009c14:	b510      	push	{r4, lr}
1a009c16:	fb02 f101 	mul.w	r1, r2, r1
1a009c1a:	f7fa ff6b 	bl	1a004af4 <_malloc_r>
1a009c1e:	4604      	mov	r4, r0
1a009c20:	b1d8      	cbz	r0, 1a009c5a <_calloc_r+0x46>
1a009c22:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a009c26:	f022 0203 	bic.w	r2, r2, #3
1a009c2a:	3a04      	subs	r2, #4
1a009c2c:	2a24      	cmp	r2, #36	; 0x24
1a009c2e:	d818      	bhi.n	1a009c62 <_calloc_r+0x4e>
1a009c30:	2a13      	cmp	r2, #19
1a009c32:	d914      	bls.n	1a009c5e <_calloc_r+0x4a>
1a009c34:	2300      	movs	r3, #0
1a009c36:	2a1b      	cmp	r2, #27
1a009c38:	6003      	str	r3, [r0, #0]
1a009c3a:	6043      	str	r3, [r0, #4]
1a009c3c:	d916      	bls.n	1a009c6c <_calloc_r+0x58>
1a009c3e:	2a24      	cmp	r2, #36	; 0x24
1a009c40:	6083      	str	r3, [r0, #8]
1a009c42:	60c3      	str	r3, [r0, #12]
1a009c44:	bf11      	iteee	ne
1a009c46:	f100 0210 	addne.w	r2, r0, #16
1a009c4a:	6103      	streq	r3, [r0, #16]
1a009c4c:	6143      	streq	r3, [r0, #20]
1a009c4e:	f100 0218 	addeq.w	r2, r0, #24
1a009c52:	2300      	movs	r3, #0
1a009c54:	6013      	str	r3, [r2, #0]
1a009c56:	6053      	str	r3, [r2, #4]
1a009c58:	6093      	str	r3, [r2, #8]
1a009c5a:	4620      	mov	r0, r4
1a009c5c:	bd10      	pop	{r4, pc}
1a009c5e:	4602      	mov	r2, r0
1a009c60:	e7f7      	b.n	1a009c52 <_calloc_r+0x3e>
1a009c62:	2100      	movs	r1, #0
1a009c64:	f7fb fa8a 	bl	1a00517c <memset>
1a009c68:	4620      	mov	r0, r4
1a009c6a:	bd10      	pop	{r4, pc}
1a009c6c:	f100 0208 	add.w	r2, r0, #8
1a009c70:	e7ef      	b.n	1a009c52 <_calloc_r+0x3e>
1a009c72:	bf00      	nop

1a009c74 <__fputwc>:
1a009c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a009c78:	b082      	sub	sp, #8
1a009c7a:	4680      	mov	r8, r0
1a009c7c:	4689      	mov	r9, r1
1a009c7e:	4614      	mov	r4, r2
1a009c80:	f7fe f85c 	bl	1a007d3c <__locale_mb_cur_max>
1a009c84:	2801      	cmp	r0, #1
1a009c86:	d036      	beq.n	1a009cf6 <__fputwc+0x82>
1a009c88:	464a      	mov	r2, r9
1a009c8a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
1a009c8e:	a901      	add	r1, sp, #4
1a009c90:	4640      	mov	r0, r8
1a009c92:	f000 f8d3 	bl	1a009e3c <_wcrtomb_r>
1a009c96:	1c42      	adds	r2, r0, #1
1a009c98:	4606      	mov	r6, r0
1a009c9a:	d025      	beq.n	1a009ce8 <__fputwc+0x74>
1a009c9c:	b3a8      	cbz	r0, 1a009d0a <__fputwc+0x96>
1a009c9e:	f89d e004 	ldrb.w	lr, [sp, #4]
1a009ca2:	2500      	movs	r5, #0
1a009ca4:	f10d 0a04 	add.w	sl, sp, #4
1a009ca8:	e009      	b.n	1a009cbe <__fputwc+0x4a>
1a009caa:	6823      	ldr	r3, [r4, #0]
1a009cac:	1c5a      	adds	r2, r3, #1
1a009cae:	6022      	str	r2, [r4, #0]
1a009cb0:	f883 e000 	strb.w	lr, [r3]
1a009cb4:	3501      	adds	r5, #1
1a009cb6:	42b5      	cmp	r5, r6
1a009cb8:	d227      	bcs.n	1a009d0a <__fputwc+0x96>
1a009cba:	f815 e00a 	ldrb.w	lr, [r5, sl]
1a009cbe:	68a3      	ldr	r3, [r4, #8]
1a009cc0:	3b01      	subs	r3, #1
1a009cc2:	2b00      	cmp	r3, #0
1a009cc4:	60a3      	str	r3, [r4, #8]
1a009cc6:	daf0      	bge.n	1a009caa <__fputwc+0x36>
1a009cc8:	69a7      	ldr	r7, [r4, #24]
1a009cca:	42bb      	cmp	r3, r7
1a009ccc:	4671      	mov	r1, lr
1a009cce:	4622      	mov	r2, r4
1a009cd0:	4640      	mov	r0, r8
1a009cd2:	db02      	blt.n	1a009cda <__fputwc+0x66>
1a009cd4:	f1be 0f0a 	cmp.w	lr, #10
1a009cd8:	d1e7      	bne.n	1a009caa <__fputwc+0x36>
1a009cda:	f000 f84f 	bl	1a009d7c <__swbuf_r>
1a009cde:	1c43      	adds	r3, r0, #1
1a009ce0:	d1e8      	bne.n	1a009cb4 <__fputwc+0x40>
1a009ce2:	b002      	add	sp, #8
1a009ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a009ce8:	89a3      	ldrh	r3, [r4, #12]
1a009cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a009cee:	81a3      	strh	r3, [r4, #12]
1a009cf0:	b002      	add	sp, #8
1a009cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a009cf6:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
1a009cfa:	2bfe      	cmp	r3, #254	; 0xfe
1a009cfc:	d8c4      	bhi.n	1a009c88 <__fputwc+0x14>
1a009cfe:	fa5f fe89 	uxtb.w	lr, r9
1a009d02:	4606      	mov	r6, r0
1a009d04:	f88d e004 	strb.w	lr, [sp, #4]
1a009d08:	e7cb      	b.n	1a009ca2 <__fputwc+0x2e>
1a009d0a:	4648      	mov	r0, r9
1a009d0c:	b002      	add	sp, #8
1a009d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a009d12:	bf00      	nop

1a009d14 <_fputwc_r>:
1a009d14:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
1a009d18:	f413 5f00 	tst.w	r3, #8192	; 0x2000
1a009d1c:	d10b      	bne.n	1a009d36 <_fputwc_r+0x22>
1a009d1e:	b410      	push	{r4}
1a009d20:	6e54      	ldr	r4, [r2, #100]	; 0x64
1a009d22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a009d26:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
1a009d2a:	6654      	str	r4, [r2, #100]	; 0x64
1a009d2c:	8193      	strh	r3, [r2, #12]
1a009d2e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a009d32:	f7ff bf9f 	b.w	1a009c74 <__fputwc>
1a009d36:	f7ff bf9d 	b.w	1a009c74 <__fputwc>
1a009d3a:	bf00      	nop

1a009d3c <fputwc>:
1a009d3c:	4b0e      	ldr	r3, [pc, #56]	; (1a009d78 <fputwc+0x3c>)
1a009d3e:	b570      	push	{r4, r5, r6, lr}
1a009d40:	681d      	ldr	r5, [r3, #0]
1a009d42:	4606      	mov	r6, r0
1a009d44:	460c      	mov	r4, r1
1a009d46:	b10d      	cbz	r5, 1a009d4c <fputwc+0x10>
1a009d48:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a009d4a:	b18b      	cbz	r3, 1a009d70 <fputwc+0x34>
1a009d4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a009d50:	049a      	lsls	r2, r3, #18
1a009d52:	d406      	bmi.n	1a009d62 <fputwc+0x26>
1a009d54:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a009d56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a009d5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a009d5e:	81a3      	strh	r3, [r4, #12]
1a009d60:	6662      	str	r2, [r4, #100]	; 0x64
1a009d62:	4622      	mov	r2, r4
1a009d64:	4631      	mov	r1, r6
1a009d66:	4628      	mov	r0, r5
1a009d68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
1a009d6c:	f7ff bf82 	b.w	1a009c74 <__fputwc>
1a009d70:	4628      	mov	r0, r5
1a009d72:	f7fa fcf1 	bl	1a004758 <__sinit>
1a009d76:	e7e9      	b.n	1a009d4c <fputwc+0x10>
1a009d78:	10000040 	.word	0x10000040

1a009d7c <__swbuf_r>:
1a009d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a009d7e:	460d      	mov	r5, r1
1a009d80:	4614      	mov	r4, r2
1a009d82:	4606      	mov	r6, r0
1a009d84:	b110      	cbz	r0, 1a009d8c <__swbuf_r+0x10>
1a009d86:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a009d88:	2b00      	cmp	r3, #0
1a009d8a:	d04b      	beq.n	1a009e24 <__swbuf_r+0xa8>
1a009d8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a009d90:	69a3      	ldr	r3, [r4, #24]
1a009d92:	60a3      	str	r3, [r4, #8]
1a009d94:	b291      	uxth	r1, r2
1a009d96:	0708      	lsls	r0, r1, #28
1a009d98:	d539      	bpl.n	1a009e0e <__swbuf_r+0x92>
1a009d9a:	6923      	ldr	r3, [r4, #16]
1a009d9c:	2b00      	cmp	r3, #0
1a009d9e:	d036      	beq.n	1a009e0e <__swbuf_r+0x92>
1a009da0:	b2ed      	uxtb	r5, r5
1a009da2:	0489      	lsls	r1, r1, #18
1a009da4:	462f      	mov	r7, r5
1a009da6:	d515      	bpl.n	1a009dd4 <__swbuf_r+0x58>
1a009da8:	6822      	ldr	r2, [r4, #0]
1a009daa:	6961      	ldr	r1, [r4, #20]
1a009dac:	1ad3      	subs	r3, r2, r3
1a009dae:	428b      	cmp	r3, r1
1a009db0:	da1c      	bge.n	1a009dec <__swbuf_r+0x70>
1a009db2:	3301      	adds	r3, #1
1a009db4:	68a1      	ldr	r1, [r4, #8]
1a009db6:	1c50      	adds	r0, r2, #1
1a009db8:	3901      	subs	r1, #1
1a009dba:	60a1      	str	r1, [r4, #8]
1a009dbc:	6020      	str	r0, [r4, #0]
1a009dbe:	7015      	strb	r5, [r2, #0]
1a009dc0:	6962      	ldr	r2, [r4, #20]
1a009dc2:	429a      	cmp	r2, r3
1a009dc4:	d01a      	beq.n	1a009dfc <__swbuf_r+0x80>
1a009dc6:	89a3      	ldrh	r3, [r4, #12]
1a009dc8:	07db      	lsls	r3, r3, #31
1a009dca:	d501      	bpl.n	1a009dd0 <__swbuf_r+0x54>
1a009dcc:	2d0a      	cmp	r5, #10
1a009dce:	d015      	beq.n	1a009dfc <__swbuf_r+0x80>
1a009dd0:	4638      	mov	r0, r7
1a009dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a009dd4:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a009dd6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a009dda:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a009dde:	81a2      	strh	r2, [r4, #12]
1a009de0:	6822      	ldr	r2, [r4, #0]
1a009de2:	6661      	str	r1, [r4, #100]	; 0x64
1a009de4:	6961      	ldr	r1, [r4, #20]
1a009de6:	1ad3      	subs	r3, r2, r3
1a009de8:	428b      	cmp	r3, r1
1a009dea:	dbe2      	blt.n	1a009db2 <__swbuf_r+0x36>
1a009dec:	4621      	mov	r1, r4
1a009dee:	4630      	mov	r0, r6
1a009df0:	f7fa fba0 	bl	1a004534 <_fflush_r>
1a009df4:	b940      	cbnz	r0, 1a009e08 <__swbuf_r+0x8c>
1a009df6:	6822      	ldr	r2, [r4, #0]
1a009df8:	2301      	movs	r3, #1
1a009dfa:	e7db      	b.n	1a009db4 <__swbuf_r+0x38>
1a009dfc:	4621      	mov	r1, r4
1a009dfe:	4630      	mov	r0, r6
1a009e00:	f7fa fb98 	bl	1a004534 <_fflush_r>
1a009e04:	2800      	cmp	r0, #0
1a009e06:	d0e3      	beq.n	1a009dd0 <__swbuf_r+0x54>
1a009e08:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a009e0c:	e7e0      	b.n	1a009dd0 <__swbuf_r+0x54>
1a009e0e:	4621      	mov	r1, r4
1a009e10:	4630      	mov	r0, r6
1a009e12:	f7fc fdd9 	bl	1a0069c8 <__swsetup_r>
1a009e16:	2800      	cmp	r0, #0
1a009e18:	d1f6      	bne.n	1a009e08 <__swbuf_r+0x8c>
1a009e1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a009e1e:	6923      	ldr	r3, [r4, #16]
1a009e20:	b291      	uxth	r1, r2
1a009e22:	e7bd      	b.n	1a009da0 <__swbuf_r+0x24>
1a009e24:	f7fa fc98 	bl	1a004758 <__sinit>
1a009e28:	e7b0      	b.n	1a009d8c <__swbuf_r+0x10>
1a009e2a:	bf00      	nop

1a009e2c <__swbuf>:
1a009e2c:	4b02      	ldr	r3, [pc, #8]	; (1a009e38 <__swbuf+0xc>)
1a009e2e:	460a      	mov	r2, r1
1a009e30:	4601      	mov	r1, r0
1a009e32:	6818      	ldr	r0, [r3, #0]
1a009e34:	f7ff bfa2 	b.w	1a009d7c <__swbuf_r>
1a009e38:	10000040 	.word	0x10000040

1a009e3c <_wcrtomb_r>:
1a009e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a009e40:	4605      	mov	r5, r0
1a009e42:	b086      	sub	sp, #24
1a009e44:	461e      	mov	r6, r3
1a009e46:	460c      	mov	r4, r1
1a009e48:	b1a1      	cbz	r1, 1a009e74 <_wcrtomb_r+0x38>
1a009e4a:	4b10      	ldr	r3, [pc, #64]	; (1a009e8c <_wcrtomb_r+0x50>)
1a009e4c:	4617      	mov	r7, r2
1a009e4e:	f8d3 8000 	ldr.w	r8, [r3]
1a009e52:	f7fd ff6f 	bl	1a007d34 <__locale_charset>
1a009e56:	9600      	str	r6, [sp, #0]
1a009e58:	4603      	mov	r3, r0
1a009e5a:	463a      	mov	r2, r7
1a009e5c:	4621      	mov	r1, r4
1a009e5e:	4628      	mov	r0, r5
1a009e60:	47c0      	blx	r8
1a009e62:	1c43      	adds	r3, r0, #1
1a009e64:	d103      	bne.n	1a009e6e <_wcrtomb_r+0x32>
1a009e66:	2200      	movs	r2, #0
1a009e68:	238a      	movs	r3, #138	; 0x8a
1a009e6a:	6032      	str	r2, [r6, #0]
1a009e6c:	602b      	str	r3, [r5, #0]
1a009e6e:	b006      	add	sp, #24
1a009e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a009e74:	4b05      	ldr	r3, [pc, #20]	; (1a009e8c <_wcrtomb_r+0x50>)
1a009e76:	681f      	ldr	r7, [r3, #0]
1a009e78:	f7fd ff5c 	bl	1a007d34 <__locale_charset>
1a009e7c:	9600      	str	r6, [sp, #0]
1a009e7e:	4603      	mov	r3, r0
1a009e80:	4622      	mov	r2, r4
1a009e82:	a903      	add	r1, sp, #12
1a009e84:	4628      	mov	r0, r5
1a009e86:	47b8      	blx	r7
1a009e88:	e7eb      	b.n	1a009e62 <_wcrtomb_r+0x26>
1a009e8a:	bf00      	nop
1a009e8c:	100008fc 	.word	0x100008fc

1a009e90 <wcrtomb>:
1a009e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a009e94:	4b12      	ldr	r3, [pc, #72]	; (1a009ee0 <wcrtomb+0x50>)
1a009e96:	b086      	sub	sp, #24
1a009e98:	4616      	mov	r6, r2
1a009e9a:	681d      	ldr	r5, [r3, #0]
1a009e9c:	4604      	mov	r4, r0
1a009e9e:	b1a0      	cbz	r0, 1a009eca <wcrtomb+0x3a>
1a009ea0:	4b10      	ldr	r3, [pc, #64]	; (1a009ee4 <wcrtomb+0x54>)
1a009ea2:	460f      	mov	r7, r1
1a009ea4:	f8d3 8000 	ldr.w	r8, [r3]
1a009ea8:	f7fd ff44 	bl	1a007d34 <__locale_charset>
1a009eac:	9600      	str	r6, [sp, #0]
1a009eae:	4603      	mov	r3, r0
1a009eb0:	463a      	mov	r2, r7
1a009eb2:	4621      	mov	r1, r4
1a009eb4:	4628      	mov	r0, r5
1a009eb6:	47c0      	blx	r8
1a009eb8:	1c43      	adds	r3, r0, #1
1a009eba:	d103      	bne.n	1a009ec4 <wcrtomb+0x34>
1a009ebc:	2200      	movs	r2, #0
1a009ebe:	238a      	movs	r3, #138	; 0x8a
1a009ec0:	6032      	str	r2, [r6, #0]
1a009ec2:	602b      	str	r3, [r5, #0]
1a009ec4:	b006      	add	sp, #24
1a009ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a009eca:	4b06      	ldr	r3, [pc, #24]	; (1a009ee4 <wcrtomb+0x54>)
1a009ecc:	681f      	ldr	r7, [r3, #0]
1a009ece:	f7fd ff31 	bl	1a007d34 <__locale_charset>
1a009ed2:	9600      	str	r6, [sp, #0]
1a009ed4:	4603      	mov	r3, r0
1a009ed6:	4622      	mov	r2, r4
1a009ed8:	a903      	add	r1, sp, #12
1a009eda:	4628      	mov	r0, r5
1a009edc:	47b8      	blx	r7
1a009ede:	e7eb      	b.n	1a009eb8 <wcrtomb+0x28>
1a009ee0:	10000040 	.word	0x10000040
1a009ee4:	100008fc 	.word	0x100008fc

1a009ee8 <__ascii_wctomb>:
1a009ee8:	b121      	cbz	r1, 1a009ef4 <__ascii_wctomb+0xc>
1a009eea:	2aff      	cmp	r2, #255	; 0xff
1a009eec:	d804      	bhi.n	1a009ef8 <__ascii_wctomb+0x10>
1a009eee:	700a      	strb	r2, [r1, #0]
1a009ef0:	2001      	movs	r0, #1
1a009ef2:	4770      	bx	lr
1a009ef4:	4608      	mov	r0, r1
1a009ef6:	4770      	bx	lr
1a009ef8:	238a      	movs	r3, #138	; 0x8a
1a009efa:	6003      	str	r3, [r0, #0]
1a009efc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a009f00:	4770      	bx	lr
1a009f02:	bf00      	nop

1a009f04 <_wctomb_r>:
1a009f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a009f08:	4c09      	ldr	r4, [pc, #36]	; (1a009f30 <_wctomb_r+0x2c>)
1a009f0a:	b082      	sub	sp, #8
1a009f0c:	4698      	mov	r8, r3
1a009f0e:	4605      	mov	r5, r0
1a009f10:	460e      	mov	r6, r1
1a009f12:	4617      	mov	r7, r2
1a009f14:	6824      	ldr	r4, [r4, #0]
1a009f16:	f7fd ff0d 	bl	1a007d34 <__locale_charset>
1a009f1a:	f8cd 8000 	str.w	r8, [sp]
1a009f1e:	4603      	mov	r3, r0
1a009f20:	463a      	mov	r2, r7
1a009f22:	4631      	mov	r1, r6
1a009f24:	4628      	mov	r0, r5
1a009f26:	47a0      	blx	r4
1a009f28:	b002      	add	sp, #8
1a009f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a009f2e:	bf00      	nop
1a009f30:	100008fc 	.word	0x100008fc
1a009f34:	74747562 	.word	0x74747562
1a009f38:	745f6e6f 	.word	0x745f6e6f
1a009f3c:	006b7361 	.word	0x006b7361
1a009f40:	74747542 	.word	0x74747542
1a009f44:	74206e6f 	.word	0x74206e6f
1a009f48:	206b7361 	.word	0x206b7361
1a009f4c:	61657263 	.word	0x61657263
1a009f50:	2e646574 	.word	0x2e646574
1a009f54:	0000000d 	.word	0x0000000d
1a009f58:	5f64656c 	.word	0x5f64656c
1a009f5c:	6b736174 	.word	0x6b736174
1a009f60:	00000000 	.word	0x00000000
1a009f64:	65726154 	.word	0x65726154
1a009f68:	454c2061 	.word	0x454c2061
1a009f6c:	20642544 	.word	0x20642544
1a009f70:	65726320 	.word	0x65726320
1a009f74:	0d616461 	.word	0x0d616461
1a009f78:	ffff000a 	.word	0xffff000a
1a009f7c:	6c707041 	.word	0x6c707041
1a009f80:	74616369 	.word	0x74616369
1a009f84:	206e6f69 	.word	0x206e6f69
1a009f88:	6c6c614d 	.word	0x6c6c614d
1a009f8c:	4620636f 	.word	0x4620636f
1a009f90:	656c6961 	.word	0x656c6961
1a009f94:	6f482064 	.word	0x6f482064
1a009f98:	0d216b6f 	.word	0x0d216b6f
1a009f9c:	00000000 	.word	0x00000000
1a009fa0:	7362696c 	.word	0x7362696c
1a009fa4:	6572662f 	.word	0x6572662f
1a009fa8:	6f747265 	.word	0x6f747265
1a009fac:	6f732f73 	.word	0x6f732f73
1a009fb0:	65637275 	.word	0x65637275
1a009fb4:	6f6f682f 	.word	0x6f6f682f
1a009fb8:	632e736b 	.word	0x632e736b
1a009fbc:	ffffff00 	.word	0xffffff00
1a009fc0:	70410a0d 	.word	0x70410a0d
1a009fc4:	63696c70 	.word	0x63696c70
1a009fc8:	6f697461 	.word	0x6f697461
1a009fcc:	7453206e 	.word	0x7453206e
1a009fd0:	206b6361 	.word	0x206b6361
1a009fd4:	7265764f 	.word	0x7265764f
1a009fd8:	776f6c66 	.word	0x776f6c66
1a009fdc:	6f202121 	.word	0x6f202121
1a009fe0:	6154206e 	.word	0x6154206e
1a009fe4:	203a6b73 	.word	0x203a6b73
1a009fe8:	0a0d7325 	.word	0x0a0d7325
1a009fec:	ffffff00 	.word	0xffffff00
1a009ff0:	41760a0d 	.word	0x41760a0d
1a009ff4:	72657373 	.word	0x72657373
1a009ff8:	6c614374 	.word	0x6c614374
1a009ffc:	2864656c 	.word	0x2864656c
1a00a000:	200a0d29 	.word	0x200a0d29
1a00a004:	4c4c2020 	.word	0x4c4c2020
1a00a008:	20656e69 	.word	0x20656e69
1a00a00c:	626d754e 	.word	0x626d754e
1a00a010:	3d207265 	.word	0x3d207265
1a00a014:	0d642520 	.word	0x0d642520
1a00a018:	2020200a 	.word	0x2020200a
1a00a01c:	656c6946 	.word	0x656c6946
1a00a020:	6d614e20 	.word	0x6d614e20
1a00a024:	203d2065 	.word	0x203d2065
1a00a028:	0a0d7325 	.word	0x0a0d7325
1a00a02c:	ff000a0d 	.word	0xff000a0d
1a00a030:	454c4449 	.word	0x454c4449
1a00a034:	ffffff00 	.word	0xffffff00
1a00a038:	51726d54 	.word	0x51726d54
1a00a03c:	ffffff00 	.word	0xffffff00
1a00a040:	20726d54 	.word	0x20726d54
1a00a044:	00637653 	.word	0x00637653

1a00a048 <ExtRateIn>:
1a00a048:	00000000                                ....

1a00a04c <GpioButtons>:
1a00a04c:	08000400 09010900                       ........

1a00a054 <GpioLeds>:
1a00a054:	01050005 0e000205 0c010b01              ............

1a00a060 <GpioPorts>:
1a00a060:	03030003 0f050403 05031005 07030603     ................
1a00a070:	ffff0802                                ....

1a00a074 <OscRateIn>:
1a00a074:	00b71b00                                ....

1a00a078 <InitClkStates>:
1a00a078:	01010f01                                ....

1a00a07c <pinmuxing>:
1a00a07c:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a00a08c:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a00a09c:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a00a0ac:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a00a0bc:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a00a0cc:	00d50301 00d50401 00160107 00560207     ..............V.
1a00a0dc:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a00a0ec:	00570206                                ..W.

1a00a0f0 <UART_BClock>:
1a00a0f0:	01a201c2 01620182                       ......b.

1a00a0f8 <UART_PClock>:
1a00a0f8:	00820081 00a200a1 08040201 0f0f0f03     ................
1a00a108:	ffff00ff                                ....

1a00a10c <periph_to_base>:
1a00a10c:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a00a11c:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a00a12c:	000100e0 01000100 01200003 00060120     .......... . ...
1a00a13c:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a00a14c:	01820013 00120182 01a201a2 01c20011     ................
1a00a15c:	001001c2 01e201e2 0202000f 000e0202     ................
1a00a16c:	02220222 0223000d 001c0223              "."...#.#...

1a00a178 <InitClkStates>:
1a00a178:	00010100 00010909 0001090a 01010701     ................
1a00a188:	00010902 00010906 0101090c 0001090d     ................
1a00a198:	0001090e 0001090f 00010910 00010911     ................
1a00a1a8:	00010912 00010913 00011114 00011119     ................
1a00a1b8:	0001111a 0001111b                       ........

1a00a1c0 <gpioPinsInit>:
1a00a1c0:	02000104 00050701 05010d03 04080100     ................
1a00a1d0:	02020002 02000304 00000403 04070002     ................
1a00a1e0:	030c0300 09050402 05040103 04030208     ................
1a00a1f0:	04020305 06040504 0802000c 03000b06     ................
1a00a200:	00090607 07060503 060f0504 03030004     ................
1a00a210:	02000404 00050404 06040502 04060200     ................
1a00a220:	0c050408 05040a04 0003010e 14010a00     ................
1a00a230:	010f0000 0d000012 00001101 0010010c     ................
1a00a240:	07070300 000f0300 01000001 00000000     ................
1a00a250:	000a0600 08060603 06100504 04030005     ................
1a00a260:	03000106 04090400 04010d05 010b0000     ................
1a00a270:	0200000f 00000001 00010104 02010800     ................
1a00a280:	01090000 09010006 05040002 04010200     ................
1a00a290:	02020105 02020504 0e00000a 01000b02     ................
1a00a2a0:	000c020b ffff0c01                       ........

1a00a2a8 <_global_impure_ptr>:
1a00a2a8:	10000048 ffff0043                       H...C...

1a00a2b0 <blanks.8142>:
1a00a2b0:	20202020 20202020 20202020 20202020                     

1a00a2c0 <zeroes.8143>:
1a00a2c0:	30303030 30303030 30303030 30303030     0000000000000000
1a00a2d0:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
1a00a2e0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
1a00a2f0:	00000000 33323130 37363534 62613938     ....0123456789ab
1a00a300:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
1a00a310:	ffff0030 69666e49 7974696e 00000000     0...Infinity....
1a00a320:	004e614e 49534f50 00000058 0000002e     NaN.POSIX.......

1a00a330 <p05.6468>:
1a00a330:	00000005 00000019 0000007d 00000000     ........}.......

1a00a340 <__mprec_tens>:
1a00a340:	00000000 3ff00000 00000000 40240000     .......?......$@
1a00a350:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
1a00a360:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
1a00a370:	00000000 412e8480 00000000 416312d0     .......A......cA
1a00a380:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
1a00a390:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
1a00a3a0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
1a00a3b0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
1a00a3c0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
1a00a3d0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
1a00a3e0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
1a00a3f0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
1a00a400:	79d99db4 44ea7843                       ...yCx.D

1a00a408 <__mprec_tinytens>:
1a00a408:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
1a00a418:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
1a00a428:	64ac6f43 0ac80628                       Co.d(...

1a00a430 <__mprec_bigtens>:
1a00a430:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
1a00a440:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
1a00a450:	7f73bf3c 75154fdd                       <.s..O.u

1a00a458 <blanks.8085>:
1a00a458:	20202020 20202020 20202020 20202020                     

1a00a468 <zeroes.8086>:
1a00a468:	30303030 30303030 30303030 30303030     0000000000000000
